package com.zipow.videobox.ptapp;

import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageLite;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.LazyStringArrayList;
import com.google.protobuf.LazyStringList;
import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageLiteOrBuilder;
import com.google.protobuf.UnmodifiableLazyStringList;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public final class IMProtos {

    public static final class AtInfoItem extends GeneratedMessageLite implements AtInfoItemOrBuilder {
        public static final int JID_FIELD_NUMBER = 4;
        public static final int POSITIONEND_FIELD_NUMBER = 2;
        public static final int POSITIONSTART_FIELD_NUMBER = 1;
        public static final int TYPE_FIELD_NUMBER = 3;
        private static final AtInfoItem defaultInstance = new AtInfoItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object jid_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int positionEnd_;
        /* access modifiers changed from: private */
        public int positionStart_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<AtInfoItem, Builder> implements AtInfoItemOrBuilder {
            private int bitField0_;
            private Object jid_ = "";
            private int positionEnd_;
            private int positionStart_;
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.positionStart_ = 0;
                this.bitField0_ &= -2;
                this.positionEnd_ = 0;
                this.bitField0_ &= -3;
                this.type_ = 0;
                this.bitField0_ &= -5;
                this.jid_ = "";
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public AtInfoItem getDefaultInstanceForType() {
                return AtInfoItem.getDefaultInstance();
            }

            public AtInfoItem build() {
                AtInfoItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public AtInfoItem buildParsed() throws InvalidProtocolBufferException {
                AtInfoItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public AtInfoItem buildPartial() {
                AtInfoItem atInfoItem = new AtInfoItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                atInfoItem.positionStart_ = this.positionStart_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                atInfoItem.positionEnd_ = this.positionEnd_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                atInfoItem.type_ = this.type_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                atInfoItem.jid_ = this.jid_;
                atInfoItem.bitField0_ = i2;
                return atInfoItem;
            }

            public Builder mergeFrom(AtInfoItem atInfoItem) {
                if (atInfoItem == AtInfoItem.getDefaultInstance()) {
                    return this;
                }
                if (atInfoItem.hasPositionStart()) {
                    setPositionStart(atInfoItem.getPositionStart());
                }
                if (atInfoItem.hasPositionEnd()) {
                    setPositionEnd(atInfoItem.getPositionEnd());
                }
                if (atInfoItem.hasType()) {
                    setType(atInfoItem.getType());
                }
                if (atInfoItem.hasJid()) {
                    setJid(atInfoItem.getJid());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasPositionStart() && hasPositionEnd() && hasType() && hasJid()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.positionStart_ = codedInputStream.readInt32();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.positionEnd_ = codedInputStream.readInt32();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.jid_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasPositionStart() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getPositionStart() {
                return this.positionStart_;
            }

            public Builder setPositionStart(int i) {
                this.bitField0_ |= 1;
                this.positionStart_ = i;
                return this;
            }

            public Builder clearPositionStart() {
                this.bitField0_ &= -2;
                this.positionStart_ = 0;
                return this;
            }

            public boolean hasPositionEnd() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getPositionEnd() {
                return this.positionEnd_;
            }

            public Builder setPositionEnd(int i) {
                this.bitField0_ |= 2;
                this.positionEnd_ = i;
                return this;
            }

            public Builder clearPositionEnd() {
                this.bitField0_ &= -3;
                this.positionEnd_ = 0;
                return this;
            }

            public boolean hasType() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 4;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -5;
                this.type_ = 0;
                return this;
            }

            public boolean hasJid() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getJid() {
                Object obj = this.jid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.jid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.jid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearJid() {
                this.bitField0_ &= -9;
                this.jid_ = AtInfoItem.getDefaultInstance().getJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setJid(ByteString byteString) {
                this.bitField0_ |= 8;
                this.jid_ = byteString;
            }
        }

        private AtInfoItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private AtInfoItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static AtInfoItem getDefaultInstance() {
            return defaultInstance;
        }

        public AtInfoItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasPositionStart() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getPositionStart() {
            return this.positionStart_;
        }

        public boolean hasPositionEnd() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getPositionEnd() {
            return this.positionEnd_;
        }

        public boolean hasType() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasJid() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getJid() {
            Object obj = this.jid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.jid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getJidBytes() {
            Object obj = this.jid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.jid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.positionStart_ = 0;
            this.positionEnd_ = 0;
            this.type_ = 0;
            this.jid_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasPositionStart()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPositionEnd()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.positionStart_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.positionEnd_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.type_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getJidBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.positionStart_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.positionEnd_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.type_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getJidBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AtInfoItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static AtInfoItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static AtInfoItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static AtInfoItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static AtInfoItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static AtInfoItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static AtInfoItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static AtInfoItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static AtInfoItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static AtInfoItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AtInfoItem atInfoItem) {
            return newBuilder().mergeFrom(atInfoItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface AtInfoItemOrBuilder extends MessageLiteOrBuilder {
        String getJid();

        int getPositionEnd();

        int getPositionStart();

        int getType();

        boolean hasJid();

        boolean hasPositionEnd();

        boolean hasPositionStart();

        boolean hasType();
    }

    public static final class AtInfoList extends GeneratedMessageLite implements AtInfoListOrBuilder {
        public static final int ATINFOITEM_FIELD_NUMBER = 1;
        private static final AtInfoList defaultInstance = new AtInfoList(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<AtInfoItem> atInfoItem_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<AtInfoList, Builder> implements AtInfoListOrBuilder {
            private List<AtInfoItem> atInfoItem_ = Collections.emptyList();
            private int bitField0_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.atInfoItem_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public AtInfoList getDefaultInstanceForType() {
                return AtInfoList.getDefaultInstance();
            }

            public AtInfoList build() {
                AtInfoList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public AtInfoList buildParsed() throws InvalidProtocolBufferException {
                AtInfoList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public AtInfoList buildPartial() {
                AtInfoList atInfoList = new AtInfoList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.atInfoItem_ = Collections.unmodifiableList(this.atInfoItem_);
                    this.bitField0_ &= -2;
                }
                atInfoList.atInfoItem_ = this.atInfoItem_;
                return atInfoList;
            }

            public Builder mergeFrom(AtInfoList atInfoList) {
                if (atInfoList != AtInfoList.getDefaultInstance() && !atInfoList.atInfoItem_.isEmpty()) {
                    if (this.atInfoItem_.isEmpty()) {
                        this.atInfoItem_ = atInfoList.atInfoItem_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureAtInfoItemIsMutable();
                        this.atInfoItem_.addAll(atInfoList.atInfoItem_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getAtInfoItemCount(); i++) {
                    if (!getAtInfoItem(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = AtInfoItem.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addAtInfoItem(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureAtInfoItemIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.atInfoItem_ = new ArrayList(this.atInfoItem_);
                    this.bitField0_ |= 1;
                }
            }

            public List<AtInfoItem> getAtInfoItemList() {
                return Collections.unmodifiableList(this.atInfoItem_);
            }

            public int getAtInfoItemCount() {
                return this.atInfoItem_.size();
            }

            public AtInfoItem getAtInfoItem(int i) {
                return (AtInfoItem) this.atInfoItem_.get(i);
            }

            public Builder setAtInfoItem(int i, AtInfoItem atInfoItem) {
                if (atInfoItem != null) {
                    ensureAtInfoItemIsMutable();
                    this.atInfoItem_.set(i, atInfoItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setAtInfoItem(int i, Builder builder) {
                ensureAtInfoItemIsMutable();
                this.atInfoItem_.set(i, builder.build());
                return this;
            }

            public Builder addAtInfoItem(AtInfoItem atInfoItem) {
                if (atInfoItem != null) {
                    ensureAtInfoItemIsMutable();
                    this.atInfoItem_.add(atInfoItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAtInfoItem(int i, AtInfoItem atInfoItem) {
                if (atInfoItem != null) {
                    ensureAtInfoItemIsMutable();
                    this.atInfoItem_.add(i, atInfoItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAtInfoItem(Builder builder) {
                ensureAtInfoItemIsMutable();
                this.atInfoItem_.add(builder.build());
                return this;
            }

            public Builder addAtInfoItem(int i, Builder builder) {
                ensureAtInfoItemIsMutable();
                this.atInfoItem_.add(i, builder.build());
                return this;
            }

            public Builder addAllAtInfoItem(Iterable<? extends AtInfoItem> iterable) {
                ensureAtInfoItemIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.atInfoItem_);
                return this;
            }

            public Builder clearAtInfoItem() {
                this.atInfoItem_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeAtInfoItem(int i) {
                ensureAtInfoItemIsMutable();
                this.atInfoItem_.remove(i);
                return this;
            }
        }

        private AtInfoList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private AtInfoList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static AtInfoList getDefaultInstance() {
            return defaultInstance;
        }

        public AtInfoList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<AtInfoItem> getAtInfoItemList() {
            return this.atInfoItem_;
        }

        public List<? extends AtInfoItemOrBuilder> getAtInfoItemOrBuilderList() {
            return this.atInfoItem_;
        }

        public int getAtInfoItemCount() {
            return this.atInfoItem_.size();
        }

        public AtInfoItem getAtInfoItem(int i) {
            return (AtInfoItem) this.atInfoItem_.get(i);
        }

        public AtInfoItemOrBuilder getAtInfoItemOrBuilder(int i) {
            return (AtInfoItemOrBuilder) this.atInfoItem_.get(i);
        }

        private void initFields() {
            this.atInfoItem_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getAtInfoItemCount(); i++) {
                if (!getAtInfoItem(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.atInfoItem_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.atInfoItem_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.atInfoItem_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.atInfoItem_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AtInfoList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static AtInfoList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static AtInfoList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static AtInfoList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static AtInfoList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static AtInfoList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static AtInfoList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static AtInfoList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static AtInfoList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static AtInfoList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AtInfoList atInfoList) {
            return newBuilder().mergeFrom(atInfoList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface AtInfoListOrBuilder extends MessageLiteOrBuilder {
        AtInfoItem getAtInfoItem(int i);

        int getAtInfoItemCount();

        List<AtInfoItem> getAtInfoItemList();
    }

    public static final class BuddyItem extends GeneratedMessageLite implements BuddyItemOrBuilder {
        public static final int HASNORESOURCE_FIELD_NUMBER = 9;
        public static final int ISNONEFRIEND_FIELD_NUMBER = 17;
        public static final int ISONLINE_FIELD_NUMBER = 10;
        public static final int ISPENDING_FIELD_NUMBER = 16;
        public static final int ISSAASBEEONLINE_FIELD_NUMBER = 11;
        public static final int ISSAASBEEUSER_FIELD_NUMBER = 8;
        public static final int JID_FIELD_NUMBER = 1;
        public static final int LOCALPICTUREPATH_FIELD_NUMBER = 13;
        public static final int NICKNAME_FIELD_NUMBER = 7;
        public static final int PICTUREURL_FIELD_NUMBER = 12;
        public static final int PICTURE_FIELD_NUMBER = 3;
        public static final int PRESENCE_FIELD_NUMBER = 4;
        public static final int PROFILEURL_FIELD_NUMBER = 14;
        public static final int RESOURCEID_FIELD_NUMBER = 5;
        public static final int SCREENNAME_FIELD_NUMBER = 2;
        public static final int STATUSTEXT_FIELD_NUMBER = 6;
        public static final int USERID_FIELD_NUMBER = 15;
        private static final BuddyItem defaultInstance = new BuddyItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean hasNoResource_;
        /* access modifiers changed from: private */
        public boolean isNoneFriend_;
        /* access modifiers changed from: private */
        public boolean isOnline_;
        /* access modifiers changed from: private */
        public boolean isPending_;
        /* access modifiers changed from: private */
        public boolean isSaaSbeeOnline_;
        /* access modifiers changed from: private */
        public boolean isSaaSbeeUser_;
        /* access modifiers changed from: private */
        public Object jid_;
        /* access modifiers changed from: private */
        public Object localPicturePath_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object nickName_;
        /* access modifiers changed from: private */
        public Object pictureUrl_;
        /* access modifiers changed from: private */
        public Object picture_;
        /* access modifiers changed from: private */
        public int presence_;
        /* access modifiers changed from: private */
        public Object profileUrl_;
        /* access modifiers changed from: private */
        public Object resourceID_;
        /* access modifiers changed from: private */
        public Object screenName_;
        /* access modifiers changed from: private */
        public Object statusText_;
        /* access modifiers changed from: private */
        public Object userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<BuddyItem, Builder> implements BuddyItemOrBuilder {
            private int bitField0_;
            private boolean hasNoResource_;
            private boolean isNoneFriend_;
            private boolean isOnline_;
            private boolean isPending_;
            private boolean isSaaSbeeOnline_;
            private boolean isSaaSbeeUser_;
            private Object jid_ = "";
            private Object localPicturePath_ = "";
            private Object nickName_ = "";
            private Object pictureUrl_ = "";
            private Object picture_ = "";
            private int presence_;
            private Object profileUrl_ = "";
            private Object resourceID_ = "";
            private Object screenName_ = "";
            private Object statusText_ = "";
            private Object userId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.jid_ = "";
                this.bitField0_ &= -2;
                this.screenName_ = "";
                this.bitField0_ &= -3;
                this.picture_ = "";
                this.bitField0_ &= -5;
                this.presence_ = 0;
                this.bitField0_ &= -9;
                this.resourceID_ = "";
                this.bitField0_ &= -17;
                this.statusText_ = "";
                this.bitField0_ &= -33;
                this.nickName_ = "";
                this.bitField0_ &= -65;
                this.isSaaSbeeUser_ = false;
                this.bitField0_ &= -129;
                this.hasNoResource_ = false;
                this.bitField0_ &= -257;
                this.isOnline_ = false;
                this.bitField0_ &= -513;
                this.isSaaSbeeOnline_ = false;
                this.bitField0_ &= -1025;
                this.pictureUrl_ = "";
                this.bitField0_ &= -2049;
                this.localPicturePath_ = "";
                this.bitField0_ &= -4097;
                this.profileUrl_ = "";
                this.bitField0_ &= -8193;
                this.userId_ = "";
                this.bitField0_ &= -16385;
                this.isPending_ = false;
                this.bitField0_ &= -32769;
                this.isNoneFriend_ = false;
                this.bitField0_ &= -65537;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public BuddyItem getDefaultInstanceForType() {
                return BuddyItem.getDefaultInstance();
            }

            public BuddyItem build() {
                BuddyItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public BuddyItem buildParsed() throws InvalidProtocolBufferException {
                BuddyItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public BuddyItem buildPartial() {
                BuddyItem buddyItem = new BuddyItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                buddyItem.jid_ = this.jid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                buddyItem.screenName_ = this.screenName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                buddyItem.picture_ = this.picture_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                buddyItem.presence_ = this.presence_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                buddyItem.resourceID_ = this.resourceID_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                buddyItem.statusText_ = this.statusText_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                buddyItem.nickName_ = this.nickName_;
                if ((i & 128) == 128) {
                    i2 |= 128;
                }
                buddyItem.isSaaSbeeUser_ = this.isSaaSbeeUser_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                buddyItem.hasNoResource_ = this.hasNoResource_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                buddyItem.isOnline_ = this.isOnline_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                buddyItem.isSaaSbeeOnline_ = this.isSaaSbeeOnline_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                buddyItem.pictureUrl_ = this.pictureUrl_;
                if ((i & 4096) == 4096) {
                    i2 |= 4096;
                }
                buddyItem.localPicturePath_ = this.localPicturePath_;
                if ((i & 8192) == 8192) {
                    i2 |= 8192;
                }
                buddyItem.profileUrl_ = this.profileUrl_;
                if ((i & 16384) == 16384) {
                    i2 |= 16384;
                }
                buddyItem.userId_ = this.userId_;
                if ((32768 & i) == 32768) {
                    i2 |= 32768;
                }
                buddyItem.isPending_ = this.isPending_;
                if ((i & 65536) == 65536) {
                    i2 |= 65536;
                }
                buddyItem.isNoneFriend_ = this.isNoneFriend_;
                buddyItem.bitField0_ = i2;
                return buddyItem;
            }

            public Builder mergeFrom(BuddyItem buddyItem) {
                if (buddyItem == BuddyItem.getDefaultInstance()) {
                    return this;
                }
                if (buddyItem.hasJid()) {
                    setJid(buddyItem.getJid());
                }
                if (buddyItem.hasScreenName()) {
                    setScreenName(buddyItem.getScreenName());
                }
                if (buddyItem.hasPicture()) {
                    setPicture(buddyItem.getPicture());
                }
                if (buddyItem.hasPresence()) {
                    setPresence(buddyItem.getPresence());
                }
                if (buddyItem.hasResourceID()) {
                    setResourceID(buddyItem.getResourceID());
                }
                if (buddyItem.hasStatusText()) {
                    setStatusText(buddyItem.getStatusText());
                }
                if (buddyItem.hasNickName()) {
                    setNickName(buddyItem.getNickName());
                }
                if (buddyItem.hasIsSaaSbeeUser()) {
                    setIsSaaSbeeUser(buddyItem.getIsSaaSbeeUser());
                }
                if (buddyItem.hasHasNoResource()) {
                    setHasNoResource(buddyItem.getHasNoResource());
                }
                if (buddyItem.hasIsOnline()) {
                    setIsOnline(buddyItem.getIsOnline());
                }
                if (buddyItem.hasIsSaaSbeeOnline()) {
                    setIsSaaSbeeOnline(buddyItem.getIsSaaSbeeOnline());
                }
                if (buddyItem.hasPictureUrl()) {
                    setPictureUrl(buddyItem.getPictureUrl());
                }
                if (buddyItem.hasLocalPicturePath()) {
                    setLocalPicturePath(buddyItem.getLocalPicturePath());
                }
                if (buddyItem.hasProfileUrl()) {
                    setProfileUrl(buddyItem.getProfileUrl());
                }
                if (buddyItem.hasUserId()) {
                    setUserId(buddyItem.getUserId());
                }
                if (buddyItem.hasIsPending()) {
                    setIsPending(buddyItem.getIsPending());
                }
                if (buddyItem.hasIsNoneFriend()) {
                    setIsNoneFriend(buddyItem.getIsNoneFriend());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasJid() && hasScreenName() && hasPicture() && hasPresence() && hasResourceID() && hasStatusText() && hasNickName() && hasIsSaaSbeeUser() && hasHasNoResource() && hasIsOnline() && hasIsSaaSbeeOnline() && hasPictureUrl() && hasLocalPicturePath() && hasProfileUrl() && hasUserId() && hasIsPending() && hasIsNoneFriend()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            this.bitField0_ |= 1;
                            this.jid_ = codedInputStream.readBytes();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.screenName_ = codedInputStream.readBytes();
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.picture_ = codedInputStream.readBytes();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.presence_ = codedInputStream.readInt32();
                            break;
                        case 42:
                            this.bitField0_ |= 16;
                            this.resourceID_ = codedInputStream.readBytes();
                            break;
                        case 50:
                            this.bitField0_ |= 32;
                            this.statusText_ = codedInputStream.readBytes();
                            break;
                        case 58:
                            this.bitField0_ |= 64;
                            this.nickName_ = codedInputStream.readBytes();
                            break;
                        case 64:
                            this.bitField0_ |= 128;
                            this.isSaaSbeeUser_ = codedInputStream.readBool();
                            break;
                        case 72:
                            this.bitField0_ |= 256;
                            this.hasNoResource_ = codedInputStream.readBool();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.isOnline_ = codedInputStream.readBool();
                            break;
                        case 88:
                            this.bitField0_ |= 1024;
                            this.isSaaSbeeOnline_ = codedInputStream.readBool();
                            break;
                        case 98:
                            this.bitField0_ |= 2048;
                            this.pictureUrl_ = codedInputStream.readBytes();
                            break;
                        case 106:
                            this.bitField0_ |= 4096;
                            this.localPicturePath_ = codedInputStream.readBytes();
                            break;
                        case 114:
                            this.bitField0_ |= 8192;
                            this.profileUrl_ = codedInputStream.readBytes();
                            break;
                        case 122:
                            this.bitField0_ |= 16384;
                            this.userId_ = codedInputStream.readBytes();
                            break;
                        case 128:
                            this.bitField0_ |= 32768;
                            this.isPending_ = codedInputStream.readBool();
                            break;
                        case 136:
                            this.bitField0_ |= 65536;
                            this.isNoneFriend_ = codedInputStream.readBool();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasJid() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getJid() {
                Object obj = this.jid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.jid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.jid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearJid() {
                this.bitField0_ &= -2;
                this.jid_ = BuddyItem.getDefaultInstance().getJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setJid(ByteString byteString) {
                this.bitField0_ |= 1;
                this.jid_ = byteString;
            }

            public boolean hasScreenName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getScreenName() {
                Object obj = this.screenName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.screenName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setScreenName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.screenName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearScreenName() {
                this.bitField0_ &= -3;
                this.screenName_ = BuddyItem.getDefaultInstance().getScreenName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setScreenName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.screenName_ = byteString;
            }

            public boolean hasPicture() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getPicture() {
                Object obj = this.picture_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.picture_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setPicture(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.picture_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearPicture() {
                this.bitField0_ &= -5;
                this.picture_ = BuddyItem.getDefaultInstance().getPicture();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setPicture(ByteString byteString) {
                this.bitField0_ |= 4;
                this.picture_ = byteString;
            }

            public boolean hasPresence() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getPresence() {
                return this.presence_;
            }

            public Builder setPresence(int i) {
                this.bitField0_ |= 8;
                this.presence_ = i;
                return this;
            }

            public Builder clearPresence() {
                this.bitField0_ &= -9;
                this.presence_ = 0;
                return this;
            }

            public boolean hasResourceID() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getResourceID() {
                Object obj = this.resourceID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.resourceID_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setResourceID(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.resourceID_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearResourceID() {
                this.bitField0_ &= -17;
                this.resourceID_ = BuddyItem.getDefaultInstance().getResourceID();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setResourceID(ByteString byteString) {
                this.bitField0_ |= 16;
                this.resourceID_ = byteString;
            }

            public boolean hasStatusText() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getStatusText() {
                Object obj = this.statusText_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.statusText_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setStatusText(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.statusText_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearStatusText() {
                this.bitField0_ &= -33;
                this.statusText_ = BuddyItem.getDefaultInstance().getStatusText();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setStatusText(ByteString byteString) {
                this.bitField0_ |= 32;
                this.statusText_ = byteString;
            }

            public boolean hasNickName() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getNickName() {
                Object obj = this.nickName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.nickName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setNickName(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.nickName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearNickName() {
                this.bitField0_ &= -65;
                this.nickName_ = BuddyItem.getDefaultInstance().getNickName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setNickName(ByteString byteString) {
                this.bitField0_ |= 64;
                this.nickName_ = byteString;
            }

            public boolean hasIsSaaSbeeUser() {
                return (this.bitField0_ & 128) == 128;
            }

            public boolean getIsSaaSbeeUser() {
                return this.isSaaSbeeUser_;
            }

            public Builder setIsSaaSbeeUser(boolean z) {
                this.bitField0_ |= 128;
                this.isSaaSbeeUser_ = z;
                return this;
            }

            public Builder clearIsSaaSbeeUser() {
                this.bitField0_ &= -129;
                this.isSaaSbeeUser_ = false;
                return this;
            }

            public boolean hasHasNoResource() {
                return (this.bitField0_ & 256) == 256;
            }

            public boolean getHasNoResource() {
                return this.hasNoResource_;
            }

            public Builder setHasNoResource(boolean z) {
                this.bitField0_ |= 256;
                this.hasNoResource_ = z;
                return this;
            }

            public Builder clearHasNoResource() {
                this.bitField0_ &= -257;
                this.hasNoResource_ = false;
                return this;
            }

            public boolean hasIsOnline() {
                return (this.bitField0_ & 512) == 512;
            }

            public boolean getIsOnline() {
                return this.isOnline_;
            }

            public Builder setIsOnline(boolean z) {
                this.bitField0_ |= 512;
                this.isOnline_ = z;
                return this;
            }

            public Builder clearIsOnline() {
                this.bitField0_ &= -513;
                this.isOnline_ = false;
                return this;
            }

            public boolean hasIsSaaSbeeOnline() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public boolean getIsSaaSbeeOnline() {
                return this.isSaaSbeeOnline_;
            }

            public Builder setIsSaaSbeeOnline(boolean z) {
                this.bitField0_ |= 1024;
                this.isSaaSbeeOnline_ = z;
                return this;
            }

            public Builder clearIsSaaSbeeOnline() {
                this.bitField0_ &= -1025;
                this.isSaaSbeeOnline_ = false;
                return this;
            }

            public boolean hasPictureUrl() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public String getPictureUrl() {
                Object obj = this.pictureUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pictureUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setPictureUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 2048;
                    this.pictureUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearPictureUrl() {
                this.bitField0_ &= -2049;
                this.pictureUrl_ = BuddyItem.getDefaultInstance().getPictureUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setPictureUrl(ByteString byteString) {
                this.bitField0_ |= 2048;
                this.pictureUrl_ = byteString;
            }

            public boolean hasLocalPicturePath() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public String getLocalPicturePath() {
                Object obj = this.localPicturePath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.localPicturePath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setLocalPicturePath(String str) {
                if (str != null) {
                    this.bitField0_ |= 4096;
                    this.localPicturePath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearLocalPicturePath() {
                this.bitField0_ &= -4097;
                this.localPicturePath_ = BuddyItem.getDefaultInstance().getLocalPicturePath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setLocalPicturePath(ByteString byteString) {
                this.bitField0_ |= 4096;
                this.localPicturePath_ = byteString;
            }

            public boolean hasProfileUrl() {
                return (this.bitField0_ & 8192) == 8192;
            }

            public String getProfileUrl() {
                Object obj = this.profileUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.profileUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setProfileUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 8192;
                    this.profileUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearProfileUrl() {
                this.bitField0_ &= -8193;
                this.profileUrl_ = BuddyItem.getDefaultInstance().getProfileUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setProfileUrl(ByteString byteString) {
                this.bitField0_ |= 8192;
                this.profileUrl_ = byteString;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 16384) == 16384;
            }

            public String getUserId() {
                Object obj = this.userId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setUserId(String str) {
                if (str != null) {
                    this.bitField0_ |= 16384;
                    this.userId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearUserId() {
                this.bitField0_ &= -16385;
                this.userId_ = BuddyItem.getDefaultInstance().getUserId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setUserId(ByteString byteString) {
                this.bitField0_ |= 16384;
                this.userId_ = byteString;
            }

            public boolean hasIsPending() {
                return (this.bitField0_ & 32768) == 32768;
            }

            public boolean getIsPending() {
                return this.isPending_;
            }

            public Builder setIsPending(boolean z) {
                this.bitField0_ |= 32768;
                this.isPending_ = z;
                return this;
            }

            public Builder clearIsPending() {
                this.bitField0_ &= -32769;
                this.isPending_ = false;
                return this;
            }

            public boolean hasIsNoneFriend() {
                return (this.bitField0_ & 65536) == 65536;
            }

            public boolean getIsNoneFriend() {
                return this.isNoneFriend_;
            }

            public Builder setIsNoneFriend(boolean z) {
                this.bitField0_ |= 65536;
                this.isNoneFriend_ = z;
                return this;
            }

            public Builder clearIsNoneFriend() {
                this.bitField0_ &= -65537;
                this.isNoneFriend_ = false;
                return this;
            }
        }

        private BuddyItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private BuddyItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static BuddyItem getDefaultInstance() {
            return defaultInstance;
        }

        public BuddyItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasJid() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getJid() {
            Object obj = this.jid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.jid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getJidBytes() {
            Object obj = this.jid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.jid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasScreenName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getScreenName() {
            Object obj = this.screenName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.screenName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getScreenNameBytes() {
            Object obj = this.screenName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.screenName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPicture() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getPicture() {
            Object obj = this.picture_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.picture_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getPictureBytes() {
            Object obj = this.picture_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.picture_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPresence() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getPresence() {
            return this.presence_;
        }

        public boolean hasResourceID() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getResourceID() {
            Object obj = this.resourceID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.resourceID_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getResourceIDBytes() {
            Object obj = this.resourceID_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.resourceID_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasStatusText() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getStatusText() {
            Object obj = this.statusText_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.statusText_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getStatusTextBytes() {
            Object obj = this.statusText_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.statusText_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasNickName() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getNickName() {
            Object obj = this.nickName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.nickName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNickNameBytes() {
            Object obj = this.nickName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.nickName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsSaaSbeeUser() {
            return (this.bitField0_ & 128) == 128;
        }

        public boolean getIsSaaSbeeUser() {
            return this.isSaaSbeeUser_;
        }

        public boolean hasHasNoResource() {
            return (this.bitField0_ & 256) == 256;
        }

        public boolean getHasNoResource() {
            return this.hasNoResource_;
        }

        public boolean hasIsOnline() {
            return (this.bitField0_ & 512) == 512;
        }

        public boolean getIsOnline() {
            return this.isOnline_;
        }

        public boolean hasIsSaaSbeeOnline() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public boolean getIsSaaSbeeOnline() {
            return this.isSaaSbeeOnline_;
        }

        public boolean hasPictureUrl() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public String getPictureUrl() {
            Object obj = this.pictureUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.pictureUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getPictureUrlBytes() {
            Object obj = this.pictureUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pictureUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasLocalPicturePath() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public String getLocalPicturePath() {
            Object obj = this.localPicturePath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.localPicturePath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getLocalPicturePathBytes() {
            Object obj = this.localPicturePath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.localPicturePath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasProfileUrl() {
            return (this.bitField0_ & 8192) == 8192;
        }

        public String getProfileUrl() {
            Object obj = this.profileUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.profileUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getProfileUrlBytes() {
            Object obj = this.profileUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.profileUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 16384) == 16384;
        }

        public String getUserId() {
            Object obj = this.userId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.userId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getUserIdBytes() {
            Object obj = this.userId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsPending() {
            return (this.bitField0_ & 32768) == 32768;
        }

        public boolean getIsPending() {
            return this.isPending_;
        }

        public boolean hasIsNoneFriend() {
            return (this.bitField0_ & 65536) == 65536;
        }

        public boolean getIsNoneFriend() {
            return this.isNoneFriend_;
        }

        private void initFields() {
            this.jid_ = "";
            this.screenName_ = "";
            this.picture_ = "";
            this.presence_ = 0;
            this.resourceID_ = "";
            this.statusText_ = "";
            this.nickName_ = "";
            this.isSaaSbeeUser_ = false;
            this.hasNoResource_ = false;
            this.isOnline_ = false;
            this.isSaaSbeeOnline_ = false;
            this.pictureUrl_ = "";
            this.localPicturePath_ = "";
            this.profileUrl_ = "";
            this.userId_ = "";
            this.isPending_ = false;
            this.isNoneFriend_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasScreenName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPicture()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPresence()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResourceID()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStatusText()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNickName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsSaaSbeeUser()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasHasNoResource()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsOnline()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsSaaSbeeOnline()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPictureUrl()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLocalPicturePath()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasProfileUrl()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsPending()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsNoneFriend()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getScreenNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getPictureBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.presence_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getResourceIDBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getStatusTextBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getNickNameBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBool(8, this.isSaaSbeeUser_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBool(9, this.hasNoResource_);
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBool(10, this.isOnline_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBool(11, this.isSaaSbeeOnline_);
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeBytes(12, getPictureUrlBytes());
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeBytes(13, getLocalPicturePathBytes());
            }
            if ((this.bitField0_ & 8192) == 8192) {
                codedOutputStream.writeBytes(14, getProfileUrlBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                codedOutputStream.writeBytes(15, getUserIdBytes());
            }
            if ((this.bitField0_ & 32768) == 32768) {
                codedOutputStream.writeBool(16, this.isPending_);
            }
            if ((this.bitField0_ & 65536) == 65536) {
                codedOutputStream.writeBool(17, this.isNoneFriend_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getScreenNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getPictureBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt32Size(4, this.presence_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getResourceIDBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getStatusTextBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getNickNameBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeBoolSize(8, this.isSaaSbeeUser_);
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBoolSize(9, this.hasNoResource_);
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBoolSize(10, this.isOnline_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBoolSize(11, this.isSaaSbeeOnline_);
            }
            if ((this.bitField0_ & 2048) == 2048) {
                i2 += CodedOutputStream.computeBytesSize(12, getPictureUrlBytes());
            }
            if ((this.bitField0_ & 4096) == 4096) {
                i2 += CodedOutputStream.computeBytesSize(13, getLocalPicturePathBytes());
            }
            if ((this.bitField0_ & 8192) == 8192) {
                i2 += CodedOutputStream.computeBytesSize(14, getProfileUrlBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                i2 += CodedOutputStream.computeBytesSize(15, getUserIdBytes());
            }
            if ((this.bitField0_ & 32768) == 32768) {
                i2 += CodedOutputStream.computeBoolSize(16, this.isPending_);
            }
            if ((this.bitField0_ & 65536) == 65536) {
                i2 += CodedOutputStream.computeBoolSize(17, this.isNoneFriend_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static BuddyItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static BuddyItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static BuddyItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static BuddyItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static BuddyItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static BuddyItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static BuddyItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static BuddyItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static BuddyItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static BuddyItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(BuddyItem buddyItem) {
            return newBuilder().mergeFrom(buddyItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface BuddyItemOrBuilder extends MessageLiteOrBuilder {
        boolean getHasNoResource();

        boolean getIsNoneFriend();

        boolean getIsOnline();

        boolean getIsPending();

        boolean getIsSaaSbeeOnline();

        boolean getIsSaaSbeeUser();

        String getJid();

        String getLocalPicturePath();

        String getNickName();

        String getPicture();

        String getPictureUrl();

        int getPresence();

        String getProfileUrl();

        String getResourceID();

        String getScreenName();

        String getStatusText();

        String getUserId();

        boolean hasHasNoResource();

        boolean hasIsNoneFriend();

        boolean hasIsOnline();

        boolean hasIsPending();

        boolean hasIsSaaSbeeOnline();

        boolean hasIsSaaSbeeUser();

        boolean hasJid();

        boolean hasLocalPicturePath();

        boolean hasNickName();

        boolean hasPicture();

        boolean hasPictureUrl();

        boolean hasPresence();

        boolean hasProfileUrl();

        boolean hasResourceID();

        boolean hasScreenName();

        boolean hasStatusText();

        boolean hasUserId();
    }

    public static final class BuddyUserInfo extends GeneratedMessageLite implements BuddyUserInfoOrBuilder {
        public static final int _DISPLAY_NAME_FIELD_NUMBER = 2;
        public static final int _JID_FIELD_NUMBER = 1;
        public static final int _NOT_ALLOWED_REASON_FIELD_NUMBER = 3;
        private static final BuddyUserInfo defaultInstance = new BuddyUserInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public Object DisplayName_;
        /* access modifiers changed from: private */
        public Object Jid_;
        /* access modifiers changed from: private */
        public int NotAllowedReason_;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<BuddyUserInfo, Builder> implements BuddyUserInfoOrBuilder {
            private Object DisplayName_ = "";
            private Object Jid_ = "";
            private int NotAllowedReason_;
            private int bitField0_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.Jid_ = "";
                this.bitField0_ &= -2;
                this.DisplayName_ = "";
                this.bitField0_ &= -3;
                this.NotAllowedReason_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public BuddyUserInfo getDefaultInstanceForType() {
                return BuddyUserInfo.getDefaultInstance();
            }

            public BuddyUserInfo build() {
                BuddyUserInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public BuddyUserInfo buildParsed() throws InvalidProtocolBufferException {
                BuddyUserInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public BuddyUserInfo buildPartial() {
                BuddyUserInfo buddyUserInfo = new BuddyUserInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                buddyUserInfo.Jid_ = this.Jid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                buddyUserInfo.DisplayName_ = this.DisplayName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                buddyUserInfo.NotAllowedReason_ = this.NotAllowedReason_;
                buddyUserInfo.bitField0_ = i2;
                return buddyUserInfo;
            }

            public Builder mergeFrom(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo == BuddyUserInfo.getDefaultInstance()) {
                    return this;
                }
                if (buddyUserInfo.hasJid()) {
                    setJid(buddyUserInfo.getJid());
                }
                if (buddyUserInfo.hasDisplayName()) {
                    setDisplayName(buddyUserInfo.getDisplayName());
                }
                if (buddyUserInfo.hasNotAllowedReason()) {
                    setNotAllowedReason(buddyUserInfo.getNotAllowedReason());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasJid() && hasDisplayName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.Jid_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.DisplayName_ = codedInputStream.readBytes();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.NotAllowedReason_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasJid() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getJid() {
                Object obj = this.Jid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.Jid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.Jid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearJid() {
                this.bitField0_ &= -2;
                this.Jid_ = BuddyUserInfo.getDefaultInstance().getJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setJid(ByteString byteString) {
                this.bitField0_ |= 1;
                this.Jid_ = byteString;
            }

            public boolean hasDisplayName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getDisplayName() {
                Object obj = this.DisplayName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.DisplayName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setDisplayName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.DisplayName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearDisplayName() {
                this.bitField0_ &= -3;
                this.DisplayName_ = BuddyUserInfo.getDefaultInstance().getDisplayName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setDisplayName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.DisplayName_ = byteString;
            }

            public boolean hasNotAllowedReason() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getNotAllowedReason() {
                return this.NotAllowedReason_;
            }

            public Builder setNotAllowedReason(int i) {
                this.bitField0_ |= 4;
                this.NotAllowedReason_ = i;
                return this;
            }

            public Builder clearNotAllowedReason() {
                this.bitField0_ &= -5;
                this.NotAllowedReason_ = 0;
                return this;
            }
        }

        private BuddyUserInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private BuddyUserInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static BuddyUserInfo getDefaultInstance() {
            return defaultInstance;
        }

        public BuddyUserInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasJid() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getJid() {
            Object obj = this.Jid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.Jid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getJidBytes() {
            Object obj = this.Jid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.Jid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasDisplayName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getDisplayName() {
            Object obj = this.DisplayName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.DisplayName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getDisplayNameBytes() {
            Object obj = this.DisplayName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.DisplayName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasNotAllowedReason() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getNotAllowedReason() {
            return this.NotAllowedReason_;
        }

        private void initFields() {
            this.Jid_ = "";
            this.DisplayName_ = "";
            this.NotAllowedReason_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDisplayName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getDisplayNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.NotAllowedReason_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getDisplayNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.NotAllowedReason_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static BuddyUserInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static BuddyUserInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static BuddyUserInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static BuddyUserInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static BuddyUserInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static BuddyUserInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static BuddyUserInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static BuddyUserInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static BuddyUserInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static BuddyUserInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(BuddyUserInfo buddyUserInfo) {
            return newBuilder().mergeFrom(buddyUserInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface BuddyUserInfoOrBuilder extends MessageLiteOrBuilder {
        String getDisplayName();

        String getJid();

        int getNotAllowedReason();

        boolean hasDisplayName();

        boolean hasJid();

        boolean hasNotAllowedReason();
    }

    public static final class ButtonParam extends GeneratedMessageLite implements ButtonParamOrBuilder {
        public static final int EVENT_ID_FIELD_NUMBER = 3;
        public static final int MESSAGE_ID_FIELD_NUMBER = 2;
        public static final int REQ_ID_FIELD_NUMBER = 6;
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        public static final int TEXT_FIELD_NUMBER = 4;
        public static final int VALUE_FIELD_NUMBER = 5;
        private static final ButtonParam defaultInstance = new ButtonParam(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object eventId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object messageId_;
        /* access modifiers changed from: private */
        public Object reqId_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public Object text_;
        /* access modifiers changed from: private */
        public Object value_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<ButtonParam, Builder> implements ButtonParamOrBuilder {
            private int bitField0_;
            private Object eventId_ = "";
            private Object messageId_ = "";
            private Object reqId_ = "";
            private Object sessionId_ = "";
            private Object text_ = "";
            private Object value_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.messageId_ = "";
                this.bitField0_ &= -3;
                this.eventId_ = "";
                this.bitField0_ &= -5;
                this.text_ = "";
                this.bitField0_ &= -9;
                this.value_ = "";
                this.bitField0_ &= -17;
                this.reqId_ = "";
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public ButtonParam getDefaultInstanceForType() {
                return ButtonParam.getDefaultInstance();
            }

            public ButtonParam build() {
                ButtonParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public ButtonParam buildParsed() throws InvalidProtocolBufferException {
                ButtonParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public ButtonParam buildPartial() {
                ButtonParam buttonParam = new ButtonParam(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                buttonParam.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                buttonParam.messageId_ = this.messageId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                buttonParam.eventId_ = this.eventId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                buttonParam.text_ = this.text_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                buttonParam.value_ = this.value_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                buttonParam.reqId_ = this.reqId_;
                buttonParam.bitField0_ = i2;
                return buttonParam;
            }

            public Builder mergeFrom(ButtonParam buttonParam) {
                if (buttonParam == ButtonParam.getDefaultInstance()) {
                    return this;
                }
                if (buttonParam.hasSessionId()) {
                    setSessionId(buttonParam.getSessionId());
                }
                if (buttonParam.hasMessageId()) {
                    setMessageId(buttonParam.getMessageId());
                }
                if (buttonParam.hasEventId()) {
                    setEventId(buttonParam.getEventId());
                }
                if (buttonParam.hasText()) {
                    setText(buttonParam.getText());
                }
                if (buttonParam.hasValue()) {
                    setValue(buttonParam.getValue());
                }
                if (buttonParam.hasReqId()) {
                    setReqId(buttonParam.getReqId());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasMessageId() && hasEventId() && hasText() && hasValue()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.messageId_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.eventId_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.text_ = codedInputStream.readBytes();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.value_ = codedInputStream.readBytes();
                    } else if (readTag == 50) {
                        this.bitField0_ |= 32;
                        this.reqId_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = ButtonParam.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasMessageId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getMessageId() {
                Object obj = this.messageId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.messageId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMessageId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.messageId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMessageId() {
                this.bitField0_ &= -3;
                this.messageId_ = ButtonParam.getDefaultInstance().getMessageId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMessageId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.messageId_ = byteString;
            }

            public boolean hasEventId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getEventId() {
                Object obj = this.eventId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.eventId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setEventId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.eventId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearEventId() {
                this.bitField0_ &= -5;
                this.eventId_ = ButtonParam.getDefaultInstance().getEventId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setEventId(ByteString byteString) {
                this.bitField0_ |= 4;
                this.eventId_ = byteString;
            }

            public boolean hasText() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getText() {
                Object obj = this.text_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.text_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setText(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.text_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearText() {
                this.bitField0_ &= -9;
                this.text_ = ButtonParam.getDefaultInstance().getText();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setText(ByteString byteString) {
                this.bitField0_ |= 8;
                this.text_ = byteString;
            }

            public boolean hasValue() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getValue() {
                Object obj = this.value_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.value_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setValue(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.value_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearValue() {
                this.bitField0_ &= -17;
                this.value_ = ButtonParam.getDefaultInstance().getValue();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setValue(ByteString byteString) {
                this.bitField0_ |= 16;
                this.value_ = byteString;
            }

            public boolean hasReqId() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getReqId() {
                Object obj = this.reqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.reqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.reqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReqId() {
                this.bitField0_ &= -33;
                this.reqId_ = ButtonParam.getDefaultInstance().getReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReqId(ByteString byteString) {
                this.bitField0_ |= 32;
                this.reqId_ = byteString;
            }
        }

        private ButtonParam(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private ButtonParam(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static ButtonParam getDefaultInstance() {
            return defaultInstance;
        }

        public ButtonParam getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessageId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getMessageId() {
            Object obj = this.messageId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.messageId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMessageIdBytes() {
            Object obj = this.messageId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.messageId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasEventId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getEventId() {
            Object obj = this.eventId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.eventId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getEventIdBytes() {
            Object obj = this.eventId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.eventId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasText() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getText() {
            Object obj = this.text_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.text_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getTextBytes() {
            Object obj = this.text_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.text_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasValue() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getValue() {
            Object obj = this.value_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.value_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getValueBytes() {
            Object obj = this.value_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.value_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasReqId() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getReqId() {
            Object obj = this.reqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.reqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqIdBytes() {
            Object obj = this.reqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.messageId_ = "";
            this.eventId_ = "";
            this.text_ = "";
            this.value_ = "";
            this.reqId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEventId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasText()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasValue()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getTextBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getValueBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getReqIdBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getTextBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getValueBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getReqIdBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ButtonParam parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static ButtonParam parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static ButtonParam parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static ButtonParam parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static ButtonParam parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static ButtonParam parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static ButtonParam parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ButtonParam parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ButtonParam parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static ButtonParam parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ButtonParam buttonParam) {
            return newBuilder().mergeFrom(buttonParam);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface ButtonParamOrBuilder extends MessageLiteOrBuilder {
        String getEventId();

        String getMessageId();

        String getReqId();

        String getSessionId();

        String getText();

        String getValue();

        boolean hasEventId();

        boolean hasMessageId();

        boolean hasReqId();

        boolean hasSessionId();

        boolean hasText();

        boolean hasValue();
    }

    public static final class CallAvailableInfo extends GeneratedMessageLite implements CallAvailableInfoOrBuilder {
        public static final int BUDDYJID_FIELD_NUMBER = 1;
        public static final int MEETINGNUMBER_FIELD_NUMBER = 3;
        public static final int STATE_FIELD_NUMBER = 2;
        private static final CallAvailableInfo defaultInstance = new CallAvailableInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object buddyJid_;
        /* access modifiers changed from: private */
        public long meetingNumber_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int state_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CallAvailableInfo, Builder> implements CallAvailableInfoOrBuilder {
            private int bitField0_;
            private Object buddyJid_ = "";
            private long meetingNumber_;
            private int state_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.buddyJid_ = "";
                this.bitField0_ &= -2;
                this.state_ = 0;
                this.bitField0_ &= -3;
                this.meetingNumber_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CallAvailableInfo getDefaultInstanceForType() {
                return CallAvailableInfo.getDefaultInstance();
            }

            public CallAvailableInfo build() {
                CallAvailableInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CallAvailableInfo buildParsed() throws InvalidProtocolBufferException {
                CallAvailableInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CallAvailableInfo buildPartial() {
                CallAvailableInfo callAvailableInfo = new CallAvailableInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                callAvailableInfo.buddyJid_ = this.buddyJid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                callAvailableInfo.state_ = this.state_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                callAvailableInfo.meetingNumber_ = this.meetingNumber_;
                callAvailableInfo.bitField0_ = i2;
                return callAvailableInfo;
            }

            public Builder mergeFrom(CallAvailableInfo callAvailableInfo) {
                if (callAvailableInfo == CallAvailableInfo.getDefaultInstance()) {
                    return this;
                }
                if (callAvailableInfo.hasBuddyJid()) {
                    setBuddyJid(callAvailableInfo.getBuddyJid());
                }
                if (callAvailableInfo.hasState()) {
                    setState(callAvailableInfo.getState());
                }
                if (callAvailableInfo.hasMeetingNumber()) {
                    setMeetingNumber(callAvailableInfo.getMeetingNumber());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasBuddyJid() && hasState() && hasMeetingNumber()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.buddyJid_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.state_ = codedInputStream.readInt32();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.meetingNumber_ = codedInputStream.readInt64();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasBuddyJid() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getBuddyJid() {
                Object obj = this.buddyJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.buddyJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setBuddyJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.buddyJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearBuddyJid() {
                this.bitField0_ &= -2;
                this.buddyJid_ = CallAvailableInfo.getDefaultInstance().getBuddyJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setBuddyJid(ByteString byteString) {
                this.bitField0_ |= 1;
                this.buddyJid_ = byteString;
            }

            public boolean hasState() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getState() {
                return this.state_;
            }

            public Builder setState(int i) {
                this.bitField0_ |= 2;
                this.state_ = i;
                return this;
            }

            public Builder clearState() {
                this.bitField0_ &= -3;
                this.state_ = 0;
                return this;
            }

            public boolean hasMeetingNumber() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getMeetingNumber() {
                return this.meetingNumber_;
            }

            public Builder setMeetingNumber(long j) {
                this.bitField0_ |= 4;
                this.meetingNumber_ = j;
                return this;
            }

            public Builder clearMeetingNumber() {
                this.bitField0_ &= -5;
                this.meetingNumber_ = 0;
                return this;
            }
        }

        private CallAvailableInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CallAvailableInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CallAvailableInfo getDefaultInstance() {
            return defaultInstance;
        }

        public CallAvailableInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasBuddyJid() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getBuddyJid() {
            Object obj = this.buddyJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.buddyJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getBuddyJidBytes() {
            Object obj = this.buddyJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.buddyJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasState() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getState() {
            return this.state_;
        }

        public boolean hasMeetingNumber() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getMeetingNumber() {
            return this.meetingNumber_;
        }

        private void initFields() {
            this.buddyJid_ = "";
            this.state_ = 0;
            this.meetingNumber_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasBuddyJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasState()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMeetingNumber()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getBuddyJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.state_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.meetingNumber_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getBuddyJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.state_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt64Size(3, this.meetingNumber_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CallAvailableInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CallAvailableInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CallAvailableInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CallAvailableInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CallAvailableInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CallAvailableInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CallAvailableInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CallAvailableInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CallAvailableInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CallAvailableInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CallAvailableInfo callAvailableInfo) {
            return newBuilder().mergeFrom(callAvailableInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CallAvailableInfoOrBuilder extends MessageLiteOrBuilder {
        String getBuddyJid();

        long getMeetingNumber();

        int getState();

        boolean hasBuddyJid();

        boolean hasMeetingNumber();

        boolean hasState();
    }

    public static final class CodeAttachmentDownloadInfo extends GeneratedMessageLite implements CodeAttachmentDownloadInfoOrBuilder {
        public static final int FILE_ID_FIELD_NUMBER = 4;
        public static final int LOCAL_PATH_FIELD_NUMBER = 3;
        public static final int MESSAGE_ID_FIELD_NUMBER = 2;
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        public static final int SUB_TYPE_FIELD_NUMBER = 5;
        private static final CodeAttachmentDownloadInfo defaultInstance = new CodeAttachmentDownloadInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object fileId_;
        /* access modifiers changed from: private */
        public Object localPath_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object messageId_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public int subType_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CodeAttachmentDownloadInfo, Builder> implements CodeAttachmentDownloadInfoOrBuilder {
            private int bitField0_;
            private Object fileId_ = "";
            private Object localPath_ = "";
            private Object messageId_ = "";
            private Object sessionId_ = "";
            private int subType_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.messageId_ = "";
                this.bitField0_ &= -3;
                this.localPath_ = "";
                this.bitField0_ &= -5;
                this.fileId_ = "";
                this.bitField0_ &= -9;
                this.subType_ = 0;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CodeAttachmentDownloadInfo getDefaultInstanceForType() {
                return CodeAttachmentDownloadInfo.getDefaultInstance();
            }

            public CodeAttachmentDownloadInfo build() {
                CodeAttachmentDownloadInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CodeAttachmentDownloadInfo buildParsed() throws InvalidProtocolBufferException {
                CodeAttachmentDownloadInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CodeAttachmentDownloadInfo buildPartial() {
                CodeAttachmentDownloadInfo codeAttachmentDownloadInfo = new CodeAttachmentDownloadInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                codeAttachmentDownloadInfo.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                codeAttachmentDownloadInfo.messageId_ = this.messageId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                codeAttachmentDownloadInfo.localPath_ = this.localPath_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                codeAttachmentDownloadInfo.fileId_ = this.fileId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                codeAttachmentDownloadInfo.subType_ = this.subType_;
                codeAttachmentDownloadInfo.bitField0_ = i2;
                return codeAttachmentDownloadInfo;
            }

            public Builder mergeFrom(CodeAttachmentDownloadInfo codeAttachmentDownloadInfo) {
                if (codeAttachmentDownloadInfo == CodeAttachmentDownloadInfo.getDefaultInstance()) {
                    return this;
                }
                if (codeAttachmentDownloadInfo.hasSessionId()) {
                    setSessionId(codeAttachmentDownloadInfo.getSessionId());
                }
                if (codeAttachmentDownloadInfo.hasMessageId()) {
                    setMessageId(codeAttachmentDownloadInfo.getMessageId());
                }
                if (codeAttachmentDownloadInfo.hasLocalPath()) {
                    setLocalPath(codeAttachmentDownloadInfo.getLocalPath());
                }
                if (codeAttachmentDownloadInfo.hasFileId()) {
                    setFileId(codeAttachmentDownloadInfo.getFileId());
                }
                if (codeAttachmentDownloadInfo.hasSubType()) {
                    setSubType(codeAttachmentDownloadInfo.getSubType());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasMessageId() && hasLocalPath() && hasFileId() && hasSubType()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.messageId_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.localPath_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.fileId_ = codedInputStream.readBytes();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.subType_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = CodeAttachmentDownloadInfo.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasMessageId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getMessageId() {
                Object obj = this.messageId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.messageId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMessageId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.messageId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMessageId() {
                this.bitField0_ &= -3;
                this.messageId_ = CodeAttachmentDownloadInfo.getDefaultInstance().getMessageId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMessageId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.messageId_ = byteString;
            }

            public boolean hasLocalPath() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getLocalPath() {
                Object obj = this.localPath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.localPath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setLocalPath(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.localPath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearLocalPath() {
                this.bitField0_ &= -5;
                this.localPath_ = CodeAttachmentDownloadInfo.getDefaultInstance().getLocalPath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setLocalPath(ByteString byteString) {
                this.bitField0_ |= 4;
                this.localPath_ = byteString;
            }

            public boolean hasFileId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getFileId() {
                Object obj = this.fileId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fileId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFileId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.fileId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFileId() {
                this.bitField0_ &= -9;
                this.fileId_ = CodeAttachmentDownloadInfo.getDefaultInstance().getFileId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFileId(ByteString byteString) {
                this.bitField0_ |= 8;
                this.fileId_ = byteString;
            }

            public boolean hasSubType() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getSubType() {
                return this.subType_;
            }

            public Builder setSubType(int i) {
                this.bitField0_ |= 16;
                this.subType_ = i;
                return this;
            }

            public Builder clearSubType() {
                this.bitField0_ &= -17;
                this.subType_ = 0;
                return this;
            }
        }

        private CodeAttachmentDownloadInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CodeAttachmentDownloadInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CodeAttachmentDownloadInfo getDefaultInstance() {
            return defaultInstance;
        }

        public CodeAttachmentDownloadInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessageId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getMessageId() {
            Object obj = this.messageId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.messageId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMessageIdBytes() {
            Object obj = this.messageId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.messageId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasLocalPath() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getLocalPath() {
            Object obj = this.localPath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.localPath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getLocalPathBytes() {
            Object obj = this.localPath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.localPath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasFileId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getFileId() {
            Object obj = this.fileId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fileId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFileIdBytes() {
            Object obj = this.fileId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fileId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSubType() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getSubType() {
            return this.subType_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.messageId_ = "";
            this.localPath_ = "";
            this.fileId_ = "";
            this.subType_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLocalPath()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFileId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSubType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getLocalPathBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getFileIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.subType_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getLocalPathBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getFileIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.subType_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CodeAttachmentDownloadInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CodeAttachmentDownloadInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CodeAttachmentDownloadInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CodeAttachmentDownloadInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CodeAttachmentDownloadInfo codeAttachmentDownloadInfo) {
            return newBuilder().mergeFrom(codeAttachmentDownloadInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CodeAttachmentDownloadInfoOrBuilder extends MessageLiteOrBuilder {
        String getFileId();

        String getLocalPath();

        String getMessageId();

        String getSessionId();

        int getSubType();

        boolean hasFileId();

        boolean hasLocalPath();

        boolean hasMessageId();

        boolean hasSessionId();

        boolean hasSubType();
    }

    public static final class CommentDataResult extends GeneratedMessageLite implements CommentDataResultOrBuilder {
        public static final int CHANNEL_FIELD_NUMBER = 5;
        public static final int COMMENT_IDS_FIELD_NUMBER = 4;
        public static final int CURR_STATE_FIELD_NUMBER = 3;
        public static final int DB_REQ_ID_FIELD_NUMBER = 1;
        public static final int DIR_FIELD_NUMBER = 7;
        public static final int START_COMMENT_FIELD_NUMBER = 8;
        public static final int START_SVR_T_FIELD_NUMBER = 10;
        public static final int THREAD_ID_FIELD_NUMBER = 6;
        public static final int THREAD_SVR_T_FIELD_NUMBER = 9;
        public static final int XMS_REQ_ID_FIELD_NUMBER = 2;
        private static final CommentDataResult defaultInstance = new CommentDataResult(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object channel_;
        /* access modifiers changed from: private */
        public LazyStringList commentIds_;
        /* access modifiers changed from: private */
        public long currState_;
        /* access modifiers changed from: private */
        public Object dbReqId_;
        /* access modifiers changed from: private */
        public int dir_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object startComment_;
        /* access modifiers changed from: private */
        public long startSvrT_;
        /* access modifiers changed from: private */
        public Object threadId_;
        /* access modifiers changed from: private */
        public long threadSvrT_;
        /* access modifiers changed from: private */
        public Object xmsReqId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CommentDataResult, Builder> implements CommentDataResultOrBuilder {
            private int bitField0_;
            private Object channel_ = "";
            private LazyStringList commentIds_ = LazyStringArrayList.EMPTY;
            private long currState_;
            private Object dbReqId_ = "";
            private int dir_;
            private Object startComment_ = "";
            private long startSvrT_;
            private Object threadId_ = "";
            private long threadSvrT_;
            private Object xmsReqId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.dbReqId_ = "";
                this.bitField0_ &= -2;
                this.xmsReqId_ = "";
                this.bitField0_ &= -3;
                this.currState_ = 0;
                this.bitField0_ &= -5;
                this.commentIds_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                this.channel_ = "";
                this.bitField0_ &= -17;
                this.threadId_ = "";
                this.bitField0_ &= -33;
                this.dir_ = 0;
                this.bitField0_ &= -65;
                this.startComment_ = "";
                this.bitField0_ &= -129;
                this.threadSvrT_ = 0;
                this.bitField0_ &= -257;
                this.startSvrT_ = 0;
                this.bitField0_ &= -513;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CommentDataResult getDefaultInstanceForType() {
                return CommentDataResult.getDefaultInstance();
            }

            public CommentDataResult build() {
                CommentDataResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CommentDataResult buildParsed() throws InvalidProtocolBufferException {
                CommentDataResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CommentDataResult buildPartial() {
                CommentDataResult commentDataResult = new CommentDataResult(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                commentDataResult.dbReqId_ = this.dbReqId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                commentDataResult.xmsReqId_ = this.xmsReqId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                commentDataResult.currState_ = this.currState_;
                if ((this.bitField0_ & 8) == 8) {
                    this.commentIds_ = new UnmodifiableLazyStringList(this.commentIds_);
                    this.bitField0_ &= -9;
                }
                commentDataResult.commentIds_ = this.commentIds_;
                if ((i & 16) == 16) {
                    i2 |= 8;
                }
                commentDataResult.channel_ = this.channel_;
                if ((i & 32) == 32) {
                    i2 |= 16;
                }
                commentDataResult.threadId_ = this.threadId_;
                if ((i & 64) == 64) {
                    i2 |= 32;
                }
                commentDataResult.dir_ = this.dir_;
                if ((i & 128) == 128) {
                    i2 |= 64;
                }
                commentDataResult.startComment_ = this.startComment_;
                if ((i & 256) == 256) {
                    i2 |= 128;
                }
                commentDataResult.threadSvrT_ = this.threadSvrT_;
                if ((i & 512) == 512) {
                    i2 |= 256;
                }
                commentDataResult.startSvrT_ = this.startSvrT_;
                commentDataResult.bitField0_ = i2;
                return commentDataResult;
            }

            public Builder mergeFrom(CommentDataResult commentDataResult) {
                if (commentDataResult == CommentDataResult.getDefaultInstance()) {
                    return this;
                }
                if (commentDataResult.hasDbReqId()) {
                    setDbReqId(commentDataResult.getDbReqId());
                }
                if (commentDataResult.hasXmsReqId()) {
                    setXmsReqId(commentDataResult.getXmsReqId());
                }
                if (commentDataResult.hasCurrState()) {
                    setCurrState(commentDataResult.getCurrState());
                }
                if (!commentDataResult.commentIds_.isEmpty()) {
                    if (this.commentIds_.isEmpty()) {
                        this.commentIds_ = commentDataResult.commentIds_;
                        this.bitField0_ &= -9;
                    } else {
                        ensureCommentIdsIsMutable();
                        this.commentIds_.addAll(commentDataResult.commentIds_);
                    }
                }
                if (commentDataResult.hasChannel()) {
                    setChannel(commentDataResult.getChannel());
                }
                if (commentDataResult.hasThreadId()) {
                    setThreadId(commentDataResult.getThreadId());
                }
                if (commentDataResult.hasDir()) {
                    setDir(commentDataResult.getDir());
                }
                if (commentDataResult.hasStartComment()) {
                    setStartComment(commentDataResult.getStartComment());
                }
                if (commentDataResult.hasThreadSvrT()) {
                    setThreadSvrT(commentDataResult.getThreadSvrT());
                }
                if (commentDataResult.hasStartSvrT()) {
                    setStartSvrT(commentDataResult.getStartSvrT());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasDbReqId() && hasXmsReqId() && hasCurrState() && hasChannel() && hasThreadId() && hasDir() && hasStartComment() && hasThreadSvrT() && hasStartSvrT()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            this.bitField0_ |= 1;
                            this.dbReqId_ = codedInputStream.readBytes();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.xmsReqId_ = codedInputStream.readBytes();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.currState_ = codedInputStream.readInt64();
                            break;
                        case 34:
                            ensureCommentIdsIsMutable();
                            this.commentIds_.add(codedInputStream.readBytes());
                            break;
                        case 42:
                            this.bitField0_ |= 16;
                            this.channel_ = codedInputStream.readBytes();
                            break;
                        case 50:
                            this.bitField0_ |= 32;
                            this.threadId_ = codedInputStream.readBytes();
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.dir_ = codedInputStream.readInt32();
                            break;
                        case 66:
                            this.bitField0_ |= 128;
                            this.startComment_ = codedInputStream.readBytes();
                            break;
                        case 72:
                            this.bitField0_ |= 256;
                            this.threadSvrT_ = codedInputStream.readInt64();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.startSvrT_ = codedInputStream.readInt64();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasDbReqId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getDbReqId() {
                Object obj = this.dbReqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.dbReqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setDbReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.dbReqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearDbReqId() {
                this.bitField0_ &= -2;
                this.dbReqId_ = CommentDataResult.getDefaultInstance().getDbReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setDbReqId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.dbReqId_ = byteString;
            }

            public boolean hasXmsReqId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getXmsReqId() {
                Object obj = this.xmsReqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.xmsReqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setXmsReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.xmsReqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearXmsReqId() {
                this.bitField0_ &= -3;
                this.xmsReqId_ = CommentDataResult.getDefaultInstance().getXmsReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setXmsReqId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.xmsReqId_ = byteString;
            }

            public boolean hasCurrState() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getCurrState() {
                return this.currState_;
            }

            public Builder setCurrState(long j) {
                this.bitField0_ |= 4;
                this.currState_ = j;
                return this;
            }

            public Builder clearCurrState() {
                this.bitField0_ &= -5;
                this.currState_ = 0;
                return this;
            }

            private void ensureCommentIdsIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.commentIds_ = new LazyStringArrayList(this.commentIds_);
                    this.bitField0_ |= 8;
                }
            }

            public List<String> getCommentIdsList() {
                return Collections.unmodifiableList(this.commentIds_);
            }

            public int getCommentIdsCount() {
                return this.commentIds_.size();
            }

            public String getCommentIds(int i) {
                return (String) this.commentIds_.get(i);
            }

            public Builder setCommentIds(int i, String str) {
                if (str != null) {
                    ensureCommentIdsIsMutable();
                    this.commentIds_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addCommentIds(String str) {
                if (str != null) {
                    ensureCommentIdsIsMutable();
                    this.commentIds_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllCommentIds(Iterable<String> iterable) {
                ensureCommentIdsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.commentIds_);
                return this;
            }

            public Builder clearCommentIds() {
                this.commentIds_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addCommentIds(ByteString byteString) {
                ensureCommentIdsIsMutable();
                this.commentIds_.add(byteString);
            }

            public boolean hasChannel() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getChannel() {
                Object obj = this.channel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.channel_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.channel_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearChannel() {
                this.bitField0_ &= -17;
                this.channel_ = CommentDataResult.getDefaultInstance().getChannel();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setChannel(ByteString byteString) {
                this.bitField0_ |= 16;
                this.channel_ = byteString;
            }

            public boolean hasThreadId() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getThreadId() {
                Object obj = this.threadId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.threadId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setThreadId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.threadId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearThreadId() {
                this.bitField0_ &= -33;
                this.threadId_ = CommentDataResult.getDefaultInstance().getThreadId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setThreadId(ByteString byteString) {
                this.bitField0_ |= 32;
                this.threadId_ = byteString;
            }

            public boolean hasDir() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getDir() {
                return this.dir_;
            }

            public Builder setDir(int i) {
                this.bitField0_ |= 64;
                this.dir_ = i;
                return this;
            }

            public Builder clearDir() {
                this.bitField0_ &= -65;
                this.dir_ = 0;
                return this;
            }

            public boolean hasStartComment() {
                return (this.bitField0_ & 128) == 128;
            }

            public String getStartComment() {
                Object obj = this.startComment_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.startComment_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setStartComment(String str) {
                if (str != null) {
                    this.bitField0_ |= 128;
                    this.startComment_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearStartComment() {
                this.bitField0_ &= -129;
                this.startComment_ = CommentDataResult.getDefaultInstance().getStartComment();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setStartComment(ByteString byteString) {
                this.bitField0_ |= 128;
                this.startComment_ = byteString;
            }

            public boolean hasThreadSvrT() {
                return (this.bitField0_ & 256) == 256;
            }

            public long getThreadSvrT() {
                return this.threadSvrT_;
            }

            public Builder setThreadSvrT(long j) {
                this.bitField0_ |= 256;
                this.threadSvrT_ = j;
                return this;
            }

            public Builder clearThreadSvrT() {
                this.bitField0_ &= -257;
                this.threadSvrT_ = 0;
                return this;
            }

            public boolean hasStartSvrT() {
                return (this.bitField0_ & 512) == 512;
            }

            public long getStartSvrT() {
                return this.startSvrT_;
            }

            public Builder setStartSvrT(long j) {
                this.bitField0_ |= 512;
                this.startSvrT_ = j;
                return this;
            }

            public Builder clearStartSvrT() {
                this.bitField0_ &= -513;
                this.startSvrT_ = 0;
                return this;
            }
        }

        private CommentDataResult(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CommentDataResult(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CommentDataResult getDefaultInstance() {
            return defaultInstance;
        }

        public CommentDataResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasDbReqId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getDbReqId() {
            Object obj = this.dbReqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.dbReqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getDbReqIdBytes() {
            Object obj = this.dbReqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.dbReqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasXmsReqId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getXmsReqId() {
            Object obj = this.xmsReqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.xmsReqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getXmsReqIdBytes() {
            Object obj = this.xmsReqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.xmsReqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCurrState() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getCurrState() {
            return this.currState_;
        }

        public List<String> getCommentIdsList() {
            return this.commentIds_;
        }

        public int getCommentIdsCount() {
            return this.commentIds_.size();
        }

        public String getCommentIds(int i) {
            return (String) this.commentIds_.get(i);
        }

        public boolean hasChannel() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getChannel() {
            Object obj = this.channel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.channel_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getChannelBytes() {
            Object obj = this.channel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.channel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThreadId() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getThreadId() {
            Object obj = this.threadId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.threadId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getThreadIdBytes() {
            Object obj = this.threadId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.threadId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasDir() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getDir() {
            return this.dir_;
        }

        public boolean hasStartComment() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getStartComment() {
            Object obj = this.startComment_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.startComment_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getStartCommentBytes() {
            Object obj = this.startComment_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.startComment_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThreadSvrT() {
            return (this.bitField0_ & 128) == 128;
        }

        public long getThreadSvrT() {
            return this.threadSvrT_;
        }

        public boolean hasStartSvrT() {
            return (this.bitField0_ & 256) == 256;
        }

        public long getStartSvrT() {
            return this.startSvrT_;
        }

        private void initFields() {
            this.dbReqId_ = "";
            this.xmsReqId_ = "";
            this.currState_ = 0;
            this.commentIds_ = LazyStringArrayList.EMPTY;
            this.channel_ = "";
            this.threadId_ = "";
            this.dir_ = 0;
            this.startComment_ = "";
            this.threadSvrT_ = 0;
            this.startSvrT_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasDbReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasXmsReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCurrState()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasChannel()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasThreadId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDir()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStartComment()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasThreadSvrT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStartSvrT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDbReqIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getXmsReqIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.currState_);
            }
            for (int i = 0; i < this.commentIds_.size(); i++) {
                codedOutputStream.writeBytes(4, this.commentIds_.getByteString(i));
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(5, getChannelBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(6, getThreadIdBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(7, this.dir_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(8, getStartCommentBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeInt64(9, this.threadSvrT_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeInt64(10, this.startSvrT_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getDbReqIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getXmsReqIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeInt64Size(3, this.currState_);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.commentIds_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.commentIds_.getByteString(i3));
            }
            int size = computeBytesSize + i2 + (getCommentIdsList().size() * 1);
            if ((this.bitField0_ & 8) == 8) {
                size += CodedOutputStream.computeBytesSize(5, getChannelBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeBytesSize(6, getThreadIdBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeInt32Size(7, this.dir_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeBytesSize(8, getStartCommentBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeInt64Size(9, this.threadSvrT_);
            }
            if ((this.bitField0_ & 256) == 256) {
                size += CodedOutputStream.computeInt64Size(10, this.startSvrT_);
            }
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CommentDataResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CommentDataResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CommentDataResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CommentDataResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CommentDataResult parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CommentDataResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CommentDataResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CommentDataResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CommentDataResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CommentDataResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CommentDataResult commentDataResult) {
            return newBuilder().mergeFrom(commentDataResult);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CommentDataResultOrBuilder extends MessageLiteOrBuilder {
        String getChannel();

        String getCommentIds(int i);

        int getCommentIdsCount();

        List<String> getCommentIdsList();

        long getCurrState();

        String getDbReqId();

        int getDir();

        String getStartComment();

        long getStartSvrT();

        String getThreadId();

        long getThreadSvrT();

        String getXmsReqId();

        boolean hasChannel();

        boolean hasCurrState();

        boolean hasDbReqId();

        boolean hasDir();

        boolean hasStartComment();

        boolean hasStartSvrT();

        boolean hasThreadId();

        boolean hasThreadSvrT();

        boolean hasXmsReqId();
    }

    public static final class CommentIndexList extends GeneratedMessageLite implements CommentIndexListOrBuilder {
        public static final int COMMON_ID_FIELD_NUMBER = 1;
        private static final CommentIndexList defaultInstance = new CommentIndexList(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public LazyStringList commonId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CommentIndexList, Builder> implements CommentIndexListOrBuilder {
            private int bitField0_;
            private LazyStringList commonId_ = LazyStringArrayList.EMPTY;

            private void maybeForceBuilderInitialization() {
            }

            public final boolean isInitialized() {
                return true;
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.commonId_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CommentIndexList getDefaultInstanceForType() {
                return CommentIndexList.getDefaultInstance();
            }

            public CommentIndexList build() {
                CommentIndexList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CommentIndexList buildParsed() throws InvalidProtocolBufferException {
                CommentIndexList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CommentIndexList buildPartial() {
                CommentIndexList commentIndexList = new CommentIndexList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.commonId_ = new UnmodifiableLazyStringList(this.commonId_);
                    this.bitField0_ &= -2;
                }
                commentIndexList.commonId_ = this.commonId_;
                return commentIndexList;
            }

            public Builder mergeFrom(CommentIndexList commentIndexList) {
                if (commentIndexList != CommentIndexList.getDefaultInstance() && !commentIndexList.commonId_.isEmpty()) {
                    if (this.commonId_.isEmpty()) {
                        this.commonId_ = commentIndexList.commonId_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureCommonIdIsMutable();
                        this.commonId_.addAll(commentIndexList.commonId_);
                    }
                }
                return this;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        ensureCommonIdIsMutable();
                        this.commonId_.add(codedInputStream.readBytes());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureCommonIdIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.commonId_ = new LazyStringArrayList(this.commonId_);
                    this.bitField0_ |= 1;
                }
            }

            public List<String> getCommonIdList() {
                return Collections.unmodifiableList(this.commonId_);
            }

            public int getCommonIdCount() {
                return this.commonId_.size();
            }

            public String getCommonId(int i) {
                return (String) this.commonId_.get(i);
            }

            public Builder setCommonId(int i, String str) {
                if (str != null) {
                    ensureCommonIdIsMutable();
                    this.commonId_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addCommonId(String str) {
                if (str != null) {
                    ensureCommonIdIsMutable();
                    this.commonId_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllCommonId(Iterable<String> iterable) {
                ensureCommonIdIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.commonId_);
                return this;
            }

            public Builder clearCommonId() {
                this.commonId_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -2;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addCommonId(ByteString byteString) {
                ensureCommonIdIsMutable();
                this.commonId_.add(byteString);
            }
        }

        private CommentIndexList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CommentIndexList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CommentIndexList getDefaultInstance() {
            return defaultInstance;
        }

        public CommentIndexList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<String> getCommonIdList() {
            return this.commonId_;
        }

        public int getCommonIdCount() {
            return this.commonId_.size();
        }

        public String getCommonId(int i) {
            return (String) this.commonId_.get(i);
        }

        private void initFields() {
            this.commonId_ = LazyStringArrayList.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.commonId_.size(); i++) {
                codedOutputStream.writeBytes(1, this.commonId_.getByteString(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.commonId_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.commonId_.getByteString(i3));
            }
            int size = 0 + i2 + (getCommonIdList().size() * 1);
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CommentIndexList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CommentIndexList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CommentIndexList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CommentIndexList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CommentIndexList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CommentIndexList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CommentIndexList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CommentIndexList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CommentIndexList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CommentIndexList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CommentIndexList commentIndexList) {
            return newBuilder().mergeFrom(commentIndexList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CommentIndexListOrBuilder extends MessageLiteOrBuilder {
        String getCommonId(int i);

        int getCommonIdCount();

        List<String> getCommonIdList();
    }

    public static final class CommentInfo extends GeneratedMessageLite implements CommentInfoOrBuilder {
        public static final int FOLLOWED_FIELD_NUMBER = 4;
        public static final int THR_ID_FIELD_NUMBER = 1;
        public static final int THR_OWNER_JID_FIELD_NUMBER = 3;
        public static final int THR_TIME_FIELD_NUMBER = 2;
        private static final CommentInfo defaultInstance = new CommentInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean followed_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object thrId_;
        /* access modifiers changed from: private */
        public Object thrOwnerJid_;
        /* access modifiers changed from: private */
        public long thrTime_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CommentInfo, Builder> implements CommentInfoOrBuilder {
            private int bitField0_;
            private boolean followed_;
            private Object thrId_ = "";
            private Object thrOwnerJid_ = "";
            private long thrTime_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.thrId_ = "";
                this.bitField0_ &= -2;
                this.thrTime_ = 0;
                this.bitField0_ &= -3;
                this.thrOwnerJid_ = "";
                this.bitField0_ &= -5;
                this.followed_ = false;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CommentInfo getDefaultInstanceForType() {
                return CommentInfo.getDefaultInstance();
            }

            public CommentInfo build() {
                CommentInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CommentInfo buildParsed() throws InvalidProtocolBufferException {
                CommentInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CommentInfo buildPartial() {
                CommentInfo commentInfo = new CommentInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                commentInfo.thrId_ = this.thrId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                commentInfo.thrTime_ = this.thrTime_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                commentInfo.thrOwnerJid_ = this.thrOwnerJid_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                commentInfo.followed_ = this.followed_;
                commentInfo.bitField0_ = i2;
                return commentInfo;
            }

            public Builder mergeFrom(CommentInfo commentInfo) {
                if (commentInfo == CommentInfo.getDefaultInstance()) {
                    return this;
                }
                if (commentInfo.hasThrId()) {
                    setThrId(commentInfo.getThrId());
                }
                if (commentInfo.hasThrTime()) {
                    setThrTime(commentInfo.getThrTime());
                }
                if (commentInfo.hasThrOwnerJid()) {
                    setThrOwnerJid(commentInfo.getThrOwnerJid());
                }
                if (commentInfo.hasFollowed()) {
                    setFollowed(commentInfo.getFollowed());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasThrId() && hasThrTime() && hasThrOwnerJid()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.thrId_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.thrTime_ = codedInputStream.readInt64();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.thrOwnerJid_ = codedInputStream.readBytes();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.followed_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasThrId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getThrId() {
                Object obj = this.thrId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.thrId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setThrId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.thrId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearThrId() {
                this.bitField0_ &= -2;
                this.thrId_ = CommentInfo.getDefaultInstance().getThrId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setThrId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.thrId_ = byteString;
            }

            public boolean hasThrTime() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getThrTime() {
                return this.thrTime_;
            }

            public Builder setThrTime(long j) {
                this.bitField0_ |= 2;
                this.thrTime_ = j;
                return this;
            }

            public Builder clearThrTime() {
                this.bitField0_ &= -3;
                this.thrTime_ = 0;
                return this;
            }

            public boolean hasThrOwnerJid() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getThrOwnerJid() {
                Object obj = this.thrOwnerJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.thrOwnerJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setThrOwnerJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.thrOwnerJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearThrOwnerJid() {
                this.bitField0_ &= -5;
                this.thrOwnerJid_ = CommentInfo.getDefaultInstance().getThrOwnerJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setThrOwnerJid(ByteString byteString) {
                this.bitField0_ |= 4;
                this.thrOwnerJid_ = byteString;
            }

            public boolean hasFollowed() {
                return (this.bitField0_ & 8) == 8;
            }

            public boolean getFollowed() {
                return this.followed_;
            }

            public Builder setFollowed(boolean z) {
                this.bitField0_ |= 8;
                this.followed_ = z;
                return this;
            }

            public Builder clearFollowed() {
                this.bitField0_ &= -9;
                this.followed_ = false;
                return this;
            }
        }

        private CommentInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CommentInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CommentInfo getDefaultInstance() {
            return defaultInstance;
        }

        public CommentInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasThrId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getThrId() {
            Object obj = this.thrId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.thrId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getThrIdBytes() {
            Object obj = this.thrId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.thrId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThrTime() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getThrTime() {
            return this.thrTime_;
        }

        public boolean hasThrOwnerJid() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getThrOwnerJid() {
            Object obj = this.thrOwnerJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.thrOwnerJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getThrOwnerJidBytes() {
            Object obj = this.thrOwnerJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.thrOwnerJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasFollowed() {
            return (this.bitField0_ & 8) == 8;
        }

        public boolean getFollowed() {
            return this.followed_;
        }

        private void initFields() {
            this.thrId_ = "";
            this.thrTime_ = 0;
            this.thrOwnerJid_ = "";
            this.followed_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasThrId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasThrTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasThrOwnerJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getThrIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.thrTime_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getThrOwnerJidBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBool(4, this.followed_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getThrIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.thrTime_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getThrOwnerJidBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBoolSize(4, this.followed_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CommentInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CommentInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CommentInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CommentInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CommentInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CommentInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CommentInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CommentInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CommentInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CommentInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CommentInfo commentInfo) {
            return newBuilder().mergeFrom(commentInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CommentInfoOrBuilder extends MessageLiteOrBuilder {
        boolean getFollowed();

        String getThrId();

        String getThrOwnerJid();

        long getThrTime();

        boolean hasFollowed();

        boolean hasThrId();

        boolean hasThrOwnerJid();

        boolean hasThrTime();
    }

    public static final class ContactSearchResponse extends GeneratedMessageLite implements ContactSearchResponseOrBuilder {
        public static final int JID_FIELD_NUMBER = 1;
        private static final ContactSearchResponse defaultInstance = new ContactSearchResponse(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public LazyStringList jid_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<ContactSearchResponse, Builder> implements ContactSearchResponseOrBuilder {
            private int bitField0_;
            private LazyStringList jid_ = LazyStringArrayList.EMPTY;

            private void maybeForceBuilderInitialization() {
            }

            public final boolean isInitialized() {
                return true;
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.jid_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public ContactSearchResponse getDefaultInstanceForType() {
                return ContactSearchResponse.getDefaultInstance();
            }

            public ContactSearchResponse build() {
                ContactSearchResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public ContactSearchResponse buildParsed() throws InvalidProtocolBufferException {
                ContactSearchResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public ContactSearchResponse buildPartial() {
                ContactSearchResponse contactSearchResponse = new ContactSearchResponse(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.jid_ = new UnmodifiableLazyStringList(this.jid_);
                    this.bitField0_ &= -2;
                }
                contactSearchResponse.jid_ = this.jid_;
                return contactSearchResponse;
            }

            public Builder mergeFrom(ContactSearchResponse contactSearchResponse) {
                if (contactSearchResponse != ContactSearchResponse.getDefaultInstance() && !contactSearchResponse.jid_.isEmpty()) {
                    if (this.jid_.isEmpty()) {
                        this.jid_ = contactSearchResponse.jid_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureJidIsMutable();
                        this.jid_.addAll(contactSearchResponse.jid_);
                    }
                }
                return this;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        ensureJidIsMutable();
                        this.jid_.add(codedInputStream.readBytes());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureJidIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.jid_ = new LazyStringArrayList(this.jid_);
                    this.bitField0_ |= 1;
                }
            }

            public List<String> getJidList() {
                return Collections.unmodifiableList(this.jid_);
            }

            public int getJidCount() {
                return this.jid_.size();
            }

            public String getJid(int i) {
                return (String) this.jid_.get(i);
            }

            public Builder setJid(int i, String str) {
                if (str != null) {
                    ensureJidIsMutable();
                    this.jid_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addJid(String str) {
                if (str != null) {
                    ensureJidIsMutable();
                    this.jid_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllJid(Iterable<String> iterable) {
                ensureJidIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.jid_);
                return this;
            }

            public Builder clearJid() {
                this.jid_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -2;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addJid(ByteString byteString) {
                ensureJidIsMutable();
                this.jid_.add(byteString);
            }
        }

        private ContactSearchResponse(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private ContactSearchResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static ContactSearchResponse getDefaultInstance() {
            return defaultInstance;
        }

        public ContactSearchResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<String> getJidList() {
            return this.jid_;
        }

        public int getJidCount() {
            return this.jid_.size();
        }

        public String getJid(int i) {
            return (String) this.jid_.get(i);
        }

        private void initFields() {
            this.jid_ = LazyStringArrayList.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.jid_.size(); i++) {
                codedOutputStream.writeBytes(1, this.jid_.getByteString(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.jid_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.jid_.getByteString(i3));
            }
            int size = 0 + i2 + (getJidList().size() * 1);
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContactSearchResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static ContactSearchResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static ContactSearchResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static ContactSearchResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static ContactSearchResponse parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static ContactSearchResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static ContactSearchResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ContactSearchResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ContactSearchResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static ContactSearchResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContactSearchResponse contactSearchResponse) {
            return newBuilder().mergeFrom(contactSearchResponse);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface ContactSearchResponseOrBuilder extends MessageLiteOrBuilder {
        String getJid(int i);

        int getJidCount();

        List<String> getJidList();
    }

    public static final class CrawlLinkMetaInfo extends GeneratedMessageLite implements CrawlLinkMetaInfoOrBuilder {
        public static final int DESC_FIELD_NUMBER = 5;
        public static final int FAVICON_FIELD_NUMBER = 8;
        public static final int FAVICON_PATH_FIELD_NUMBER = 11;
        public static final int IMAGE_PATH_FIELD_NUMBER = 9;
        public static final int IMG_URL_FIELD_NUMBER = 6;
        public static final int SITE_NAME_FIELD_NUMBER = 2;
        public static final int TITLE_FIELD_NUMBER = 3;
        public static final int TYPE_FIELD_NUMBER = 4;
        public static final int URL_FIELD_NUMBER = 1;
        public static final int VIDEO_PATH_FIELD_NUMBER = 10;
        public static final int VIDEO_URL_FIELD_NUMBER = 7;
        private static final CrawlLinkMetaInfo defaultInstance = new CrawlLinkMetaInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object desc_;
        /* access modifiers changed from: private */
        public Object faviconPath_;
        /* access modifiers changed from: private */
        public Object favicon_;
        /* access modifiers changed from: private */
        public Object imagePath_;
        /* access modifiers changed from: private */
        public Object imgUrl_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object siteName_;
        /* access modifiers changed from: private */
        public Object title_;
        /* access modifiers changed from: private */
        public Object type_;
        /* access modifiers changed from: private */
        public Object url_;
        /* access modifiers changed from: private */
        public Object videoPath_;
        /* access modifiers changed from: private */
        public Object videoUrl_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CrawlLinkMetaInfo, Builder> implements CrawlLinkMetaInfoOrBuilder {
            private int bitField0_;
            private Object desc_ = "";
            private Object faviconPath_ = "";
            private Object favicon_ = "";
            private Object imagePath_ = "";
            private Object imgUrl_ = "";
            private Object siteName_ = "";
            private Object title_ = "";
            private Object type_ = "";
            private Object url_ = "";
            private Object videoPath_ = "";
            private Object videoUrl_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.url_ = "";
                this.bitField0_ &= -2;
                this.siteName_ = "";
                this.bitField0_ &= -3;
                this.title_ = "";
                this.bitField0_ &= -5;
                this.type_ = "";
                this.bitField0_ &= -9;
                this.desc_ = "";
                this.bitField0_ &= -17;
                this.imgUrl_ = "";
                this.bitField0_ &= -33;
                this.videoUrl_ = "";
                this.bitField0_ &= -65;
                this.favicon_ = "";
                this.bitField0_ &= -129;
                this.imagePath_ = "";
                this.bitField0_ &= -257;
                this.videoPath_ = "";
                this.bitField0_ &= -513;
                this.faviconPath_ = "";
                this.bitField0_ &= -1025;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CrawlLinkMetaInfo getDefaultInstanceForType() {
                return CrawlLinkMetaInfo.getDefaultInstance();
            }

            public CrawlLinkMetaInfo build() {
                CrawlLinkMetaInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CrawlLinkMetaInfo buildParsed() throws InvalidProtocolBufferException {
                CrawlLinkMetaInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CrawlLinkMetaInfo buildPartial() {
                CrawlLinkMetaInfo crawlLinkMetaInfo = new CrawlLinkMetaInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                crawlLinkMetaInfo.url_ = this.url_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                crawlLinkMetaInfo.siteName_ = this.siteName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                crawlLinkMetaInfo.title_ = this.title_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                crawlLinkMetaInfo.type_ = this.type_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                crawlLinkMetaInfo.desc_ = this.desc_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                crawlLinkMetaInfo.imgUrl_ = this.imgUrl_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                crawlLinkMetaInfo.videoUrl_ = this.videoUrl_;
                if ((i & 128) == 128) {
                    i2 |= 128;
                }
                crawlLinkMetaInfo.favicon_ = this.favicon_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                crawlLinkMetaInfo.imagePath_ = this.imagePath_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                crawlLinkMetaInfo.videoPath_ = this.videoPath_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                crawlLinkMetaInfo.faviconPath_ = this.faviconPath_;
                crawlLinkMetaInfo.bitField0_ = i2;
                return crawlLinkMetaInfo;
            }

            public Builder mergeFrom(CrawlLinkMetaInfo crawlLinkMetaInfo) {
                if (crawlLinkMetaInfo == CrawlLinkMetaInfo.getDefaultInstance()) {
                    return this;
                }
                if (crawlLinkMetaInfo.hasUrl()) {
                    setUrl(crawlLinkMetaInfo.getUrl());
                }
                if (crawlLinkMetaInfo.hasSiteName()) {
                    setSiteName(crawlLinkMetaInfo.getSiteName());
                }
                if (crawlLinkMetaInfo.hasTitle()) {
                    setTitle(crawlLinkMetaInfo.getTitle());
                }
                if (crawlLinkMetaInfo.hasType()) {
                    setType(crawlLinkMetaInfo.getType());
                }
                if (crawlLinkMetaInfo.hasDesc()) {
                    setDesc(crawlLinkMetaInfo.getDesc());
                }
                if (crawlLinkMetaInfo.hasImgUrl()) {
                    setImgUrl(crawlLinkMetaInfo.getImgUrl());
                }
                if (crawlLinkMetaInfo.hasVideoUrl()) {
                    setVideoUrl(crawlLinkMetaInfo.getVideoUrl());
                }
                if (crawlLinkMetaInfo.hasFavicon()) {
                    setFavicon(crawlLinkMetaInfo.getFavicon());
                }
                if (crawlLinkMetaInfo.hasImagePath()) {
                    setImagePath(crawlLinkMetaInfo.getImagePath());
                }
                if (crawlLinkMetaInfo.hasVideoPath()) {
                    setVideoPath(crawlLinkMetaInfo.getVideoPath());
                }
                if (crawlLinkMetaInfo.hasFaviconPath()) {
                    setFaviconPath(crawlLinkMetaInfo.getFaviconPath());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUrl() && hasSiteName() && hasTitle() && hasType() && hasDesc() && hasImgUrl() && hasVideoUrl() && hasFavicon() && hasImagePath() && hasVideoPath() && hasFaviconPath()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            this.bitField0_ |= 1;
                            this.url_ = codedInputStream.readBytes();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.siteName_ = codedInputStream.readBytes();
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.title_ = codedInputStream.readBytes();
                            break;
                        case 34:
                            this.bitField0_ |= 8;
                            this.type_ = codedInputStream.readBytes();
                            break;
                        case 42:
                            this.bitField0_ |= 16;
                            this.desc_ = codedInputStream.readBytes();
                            break;
                        case 50:
                            this.bitField0_ |= 32;
                            this.imgUrl_ = codedInputStream.readBytes();
                            break;
                        case 58:
                            this.bitField0_ |= 64;
                            this.videoUrl_ = codedInputStream.readBytes();
                            break;
                        case 66:
                            this.bitField0_ |= 128;
                            this.favicon_ = codedInputStream.readBytes();
                            break;
                        case 74:
                            this.bitField0_ |= 256;
                            this.imagePath_ = codedInputStream.readBytes();
                            break;
                        case 82:
                            this.bitField0_ |= 512;
                            this.videoPath_ = codedInputStream.readBytes();
                            break;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.faviconPath_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasUrl() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getUrl() {
                Object obj = this.url_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.url_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.url_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearUrl() {
                this.bitField0_ &= -2;
                this.url_ = CrawlLinkMetaInfo.getDefaultInstance().getUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setUrl(ByteString byteString) {
                this.bitField0_ |= 1;
                this.url_ = byteString;
            }

            public boolean hasSiteName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getSiteName() {
                Object obj = this.siteName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.siteName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSiteName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.siteName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSiteName() {
                this.bitField0_ &= -3;
                this.siteName_ = CrawlLinkMetaInfo.getDefaultInstance().getSiteName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSiteName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.siteName_ = byteString;
            }

            public boolean hasTitle() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getTitle() {
                Object obj = this.title_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.title_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setTitle(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.title_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearTitle() {
                this.bitField0_ &= -5;
                this.title_ = CrawlLinkMetaInfo.getDefaultInstance().getTitle();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setTitle(ByteString byteString) {
                this.bitField0_ |= 4;
                this.title_ = byteString;
            }

            public boolean hasType() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getType() {
                Object obj = this.type_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.type_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setType(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.type_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearType() {
                this.bitField0_ &= -9;
                this.type_ = CrawlLinkMetaInfo.getDefaultInstance().getType();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setType(ByteString byteString) {
                this.bitField0_ |= 8;
                this.type_ = byteString;
            }

            public boolean hasDesc() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getDesc() {
                Object obj = this.desc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.desc_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.desc_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearDesc() {
                this.bitField0_ &= -17;
                this.desc_ = CrawlLinkMetaInfo.getDefaultInstance().getDesc();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setDesc(ByteString byteString) {
                this.bitField0_ |= 16;
                this.desc_ = byteString;
            }

            public boolean hasImgUrl() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getImgUrl() {
                Object obj = this.imgUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.imgUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setImgUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.imgUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearImgUrl() {
                this.bitField0_ &= -33;
                this.imgUrl_ = CrawlLinkMetaInfo.getDefaultInstance().getImgUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setImgUrl(ByteString byteString) {
                this.bitField0_ |= 32;
                this.imgUrl_ = byteString;
            }

            public boolean hasVideoUrl() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getVideoUrl() {
                Object obj = this.videoUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.videoUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setVideoUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.videoUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearVideoUrl() {
                this.bitField0_ &= -65;
                this.videoUrl_ = CrawlLinkMetaInfo.getDefaultInstance().getVideoUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setVideoUrl(ByteString byteString) {
                this.bitField0_ |= 64;
                this.videoUrl_ = byteString;
            }

            public boolean hasFavicon() {
                return (this.bitField0_ & 128) == 128;
            }

            public String getFavicon() {
                Object obj = this.favicon_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.favicon_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFavicon(String str) {
                if (str != null) {
                    this.bitField0_ |= 128;
                    this.favicon_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFavicon() {
                this.bitField0_ &= -129;
                this.favicon_ = CrawlLinkMetaInfo.getDefaultInstance().getFavicon();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFavicon(ByteString byteString) {
                this.bitField0_ |= 128;
                this.favicon_ = byteString;
            }

            public boolean hasImagePath() {
                return (this.bitField0_ & 256) == 256;
            }

            public String getImagePath() {
                Object obj = this.imagePath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.imagePath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setImagePath(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.imagePath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearImagePath() {
                this.bitField0_ &= -257;
                this.imagePath_ = CrawlLinkMetaInfo.getDefaultInstance().getImagePath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setImagePath(ByteString byteString) {
                this.bitField0_ |= 256;
                this.imagePath_ = byteString;
            }

            public boolean hasVideoPath() {
                return (this.bitField0_ & 512) == 512;
            }

            public String getVideoPath() {
                Object obj = this.videoPath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.videoPath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setVideoPath(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.videoPath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearVideoPath() {
                this.bitField0_ &= -513;
                this.videoPath_ = CrawlLinkMetaInfo.getDefaultInstance().getVideoPath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setVideoPath(ByteString byteString) {
                this.bitField0_ |= 512;
                this.videoPath_ = byteString;
            }

            public boolean hasFaviconPath() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public String getFaviconPath() {
                Object obj = this.faviconPath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.faviconPath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFaviconPath(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.faviconPath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFaviconPath() {
                this.bitField0_ &= -1025;
                this.faviconPath_ = CrawlLinkMetaInfo.getDefaultInstance().getFaviconPath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFaviconPath(ByteString byteString) {
                this.bitField0_ |= 1024;
                this.faviconPath_ = byteString;
            }
        }

        private CrawlLinkMetaInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CrawlLinkMetaInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CrawlLinkMetaInfo getDefaultInstance() {
            return defaultInstance;
        }

        public CrawlLinkMetaInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasUrl() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getUrl() {
            Object obj = this.url_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.url_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getUrlBytes() {
            Object obj = this.url_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.url_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSiteName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getSiteName() {
            Object obj = this.siteName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.siteName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSiteNameBytes() {
            Object obj = this.siteName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.siteName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasTitle() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getTitle() {
            Object obj = this.title_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.title_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getTitleBytes() {
            Object obj = this.title_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.title_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasType() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getType() {
            Object obj = this.type_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.type_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getTypeBytes() {
            Object obj = this.type_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.type_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasDesc() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getDesc() {
            Object obj = this.desc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.desc_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getDescBytes() {
            Object obj = this.desc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.desc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasImgUrl() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getImgUrl() {
            Object obj = this.imgUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.imgUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getImgUrlBytes() {
            Object obj = this.imgUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.imgUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasVideoUrl() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getVideoUrl() {
            Object obj = this.videoUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.videoUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getVideoUrlBytes() {
            Object obj = this.videoUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.videoUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasFavicon() {
            return (this.bitField0_ & 128) == 128;
        }

        public String getFavicon() {
            Object obj = this.favicon_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.favicon_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFaviconBytes() {
            Object obj = this.favicon_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.favicon_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasImagePath() {
            return (this.bitField0_ & 256) == 256;
        }

        public String getImagePath() {
            Object obj = this.imagePath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.imagePath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getImagePathBytes() {
            Object obj = this.imagePath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.imagePath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasVideoPath() {
            return (this.bitField0_ & 512) == 512;
        }

        public String getVideoPath() {
            Object obj = this.videoPath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.videoPath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getVideoPathBytes() {
            Object obj = this.videoPath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.videoPath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasFaviconPath() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public String getFaviconPath() {
            Object obj = this.faviconPath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.faviconPath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFaviconPathBytes() {
            Object obj = this.faviconPath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.faviconPath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.url_ = "";
            this.siteName_ = "";
            this.title_ = "";
            this.type_ = "";
            this.desc_ = "";
            this.imgUrl_ = "";
            this.videoUrl_ = "";
            this.favicon_ = "";
            this.imagePath_ = "";
            this.videoPath_ = "";
            this.faviconPath_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasUrl()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSiteName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasTitle()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDesc()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasImgUrl()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVideoUrl()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFavicon()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasImagePath()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVideoPath()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFaviconPath()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getUrlBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSiteNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getTitleBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getTypeBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getDescBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getImgUrlBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getVideoUrlBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(8, getFaviconBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getImagePathBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getVideoPathBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getFaviconPathBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getUrlBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSiteNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getTitleBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getTypeBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getDescBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getImgUrlBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getVideoUrlBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getFaviconBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getImagePathBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getVideoPathBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(11, getFaviconPathBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CrawlLinkMetaInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CrawlLinkMetaInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CrawlLinkMetaInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CrawlLinkMetaInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CrawlLinkMetaInfo crawlLinkMetaInfo) {
            return newBuilder().mergeFrom(crawlLinkMetaInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CrawlLinkMetaInfoOrBuilder extends MessageLiteOrBuilder {
        String getDesc();

        String getFavicon();

        String getFaviconPath();

        String getImagePath();

        String getImgUrl();

        String getSiteName();

        String getTitle();

        String getType();

        String getUrl();

        String getVideoPath();

        String getVideoUrl();

        boolean hasDesc();

        boolean hasFavicon();

        boolean hasFaviconPath();

        boolean hasImagePath();

        boolean hasImgUrl();

        boolean hasSiteName();

        boolean hasTitle();

        boolean hasType();

        boolean hasUrl();

        boolean hasVideoPath();

        boolean hasVideoUrl();
    }

    public static final class CrawlLinkResponse extends GeneratedMessageLite implements CrawlLinkResponseOrBuilder {
        public static final int META_INFO_FIELD_NUMBER = 3;
        public static final int MSG_GUID_FIELD_NUMBER = 2;
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        private static final CrawlLinkResponse defaultInstance = new CrawlLinkResponse(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<CrawlLinkMetaInfo> metaInfo_;
        /* access modifiers changed from: private */
        public Object msgGuid_;
        /* access modifiers changed from: private */
        public Object sessionId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<CrawlLinkResponse, Builder> implements CrawlLinkResponseOrBuilder {
            private int bitField0_;
            private List<CrawlLinkMetaInfo> metaInfo_ = Collections.emptyList();
            private Object msgGuid_ = "";
            private Object sessionId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.msgGuid_ = "";
                this.bitField0_ &= -3;
                this.metaInfo_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public CrawlLinkResponse getDefaultInstanceForType() {
                return CrawlLinkResponse.getDefaultInstance();
            }

            public CrawlLinkResponse build() {
                CrawlLinkResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public CrawlLinkResponse buildParsed() throws InvalidProtocolBufferException {
                CrawlLinkResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public CrawlLinkResponse buildPartial() {
                CrawlLinkResponse crawlLinkResponse = new CrawlLinkResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                crawlLinkResponse.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                crawlLinkResponse.msgGuid_ = this.msgGuid_;
                if ((this.bitField0_ & 4) == 4) {
                    this.metaInfo_ = Collections.unmodifiableList(this.metaInfo_);
                    this.bitField0_ &= -5;
                }
                crawlLinkResponse.metaInfo_ = this.metaInfo_;
                crawlLinkResponse.bitField0_ = i2;
                return crawlLinkResponse;
            }

            public Builder mergeFrom(CrawlLinkResponse crawlLinkResponse) {
                if (crawlLinkResponse == CrawlLinkResponse.getDefaultInstance()) {
                    return this;
                }
                if (crawlLinkResponse.hasSessionId()) {
                    setSessionId(crawlLinkResponse.getSessionId());
                }
                if (crawlLinkResponse.hasMsgGuid()) {
                    setMsgGuid(crawlLinkResponse.getMsgGuid());
                }
                if (!crawlLinkResponse.metaInfo_.isEmpty()) {
                    if (this.metaInfo_.isEmpty()) {
                        this.metaInfo_ = crawlLinkResponse.metaInfo_;
                        this.bitField0_ &= -5;
                    } else {
                        ensureMetaInfoIsMutable();
                        this.metaInfo_.addAll(crawlLinkResponse.metaInfo_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSessionId() || !hasMsgGuid()) {
                    return false;
                }
                for (int i = 0; i < getMetaInfoCount(); i++) {
                    if (!getMetaInfo(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.msgGuid_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        Builder newBuilder = CrawlLinkMetaInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addMetaInfo(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = CrawlLinkResponse.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasMsgGuid() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getMsgGuid() {
                Object obj = this.msgGuid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.msgGuid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMsgGuid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.msgGuid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMsgGuid() {
                this.bitField0_ &= -3;
                this.msgGuid_ = CrawlLinkResponse.getDefaultInstance().getMsgGuid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMsgGuid(ByteString byteString) {
                this.bitField0_ |= 2;
                this.msgGuid_ = byteString;
            }

            private void ensureMetaInfoIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.metaInfo_ = new ArrayList(this.metaInfo_);
                    this.bitField0_ |= 4;
                }
            }

            public List<CrawlLinkMetaInfo> getMetaInfoList() {
                return Collections.unmodifiableList(this.metaInfo_);
            }

            public int getMetaInfoCount() {
                return this.metaInfo_.size();
            }

            public CrawlLinkMetaInfo getMetaInfo(int i) {
                return (CrawlLinkMetaInfo) this.metaInfo_.get(i);
            }

            public Builder setMetaInfo(int i, CrawlLinkMetaInfo crawlLinkMetaInfo) {
                if (crawlLinkMetaInfo != null) {
                    ensureMetaInfoIsMutable();
                    this.metaInfo_.set(i, crawlLinkMetaInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setMetaInfo(int i, Builder builder) {
                ensureMetaInfoIsMutable();
                this.metaInfo_.set(i, builder.build());
                return this;
            }

            public Builder addMetaInfo(CrawlLinkMetaInfo crawlLinkMetaInfo) {
                if (crawlLinkMetaInfo != null) {
                    ensureMetaInfoIsMutable();
                    this.metaInfo_.add(crawlLinkMetaInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMetaInfo(int i, CrawlLinkMetaInfo crawlLinkMetaInfo) {
                if (crawlLinkMetaInfo != null) {
                    ensureMetaInfoIsMutable();
                    this.metaInfo_.add(i, crawlLinkMetaInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMetaInfo(Builder builder) {
                ensureMetaInfoIsMutable();
                this.metaInfo_.add(builder.build());
                return this;
            }

            public Builder addMetaInfo(int i, Builder builder) {
                ensureMetaInfoIsMutable();
                this.metaInfo_.add(i, builder.build());
                return this;
            }

            public Builder addAllMetaInfo(Iterable<? extends CrawlLinkMetaInfo> iterable) {
                ensureMetaInfoIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.metaInfo_);
                return this;
            }

            public Builder clearMetaInfo() {
                this.metaInfo_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder removeMetaInfo(int i) {
                ensureMetaInfoIsMutable();
                this.metaInfo_.remove(i);
                return this;
            }
        }

        private CrawlLinkResponse(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private CrawlLinkResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static CrawlLinkResponse getDefaultInstance() {
            return defaultInstance;
        }

        public CrawlLinkResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMsgGuid() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getMsgGuid() {
            Object obj = this.msgGuid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.msgGuid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMsgGuidBytes() {
            Object obj = this.msgGuid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.msgGuid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<CrawlLinkMetaInfo> getMetaInfoList() {
            return this.metaInfo_;
        }

        public List<? extends CrawlLinkMetaInfoOrBuilder> getMetaInfoOrBuilderList() {
            return this.metaInfo_;
        }

        public int getMetaInfoCount() {
            return this.metaInfo_.size();
        }

        public CrawlLinkMetaInfo getMetaInfo(int i) {
            return (CrawlLinkMetaInfo) this.metaInfo_.get(i);
        }

        public CrawlLinkMetaInfoOrBuilder getMetaInfoOrBuilder(int i) {
            return (CrawlLinkMetaInfoOrBuilder) this.metaInfo_.get(i);
        }

        private void initFields() {
            this.sessionId_ = "";
            this.msgGuid_ = "";
            this.metaInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMsgGuid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getMetaInfoCount(); i++) {
                    if (!getMetaInfo(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMsgGuidBytes());
            }
            for (int i = 0; i < this.metaInfo_.size(); i++) {
                codedOutputStream.writeMessage(3, (MessageLite) this.metaInfo_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getSessionIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getMsgGuidBytes());
            }
            for (int i2 = 0; i2 < this.metaInfo_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(3, (MessageLite) this.metaInfo_.get(i2));
            }
            this.memoizedSerializedSize = computeBytesSize;
            return computeBytesSize;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CrawlLinkResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static CrawlLinkResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static CrawlLinkResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static CrawlLinkResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static CrawlLinkResponse parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static CrawlLinkResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static CrawlLinkResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CrawlLinkResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static CrawlLinkResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static CrawlLinkResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CrawlLinkResponse crawlLinkResponse) {
            return newBuilder().mergeFrom(crawlLinkResponse);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface CrawlLinkResponseOrBuilder extends MessageLiteOrBuilder {
        CrawlLinkMetaInfo getMetaInfo(int i);

        int getMetaInfoCount();

        List<CrawlLinkMetaInfo> getMetaInfoList();

        String getMsgGuid();

        String getSessionId();

        boolean hasMsgGuid();

        boolean hasSessionId();
    }

    public static final class DBExistResult extends GeneratedMessageLite implements DBExistResultOrBuilder {
        public static final int EXIST_FIELD_NUMBER = 2;
        public static final int LOADING_FIELD_NUMBER = 3;
        public static final int REQ_FIELD_NUMBER = 1;
        private static final DBExistResult defaultInstance = new DBExistResult(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean exist_;
        /* access modifiers changed from: private */
        public boolean loading_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object req_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<DBExistResult, Builder> implements DBExistResultOrBuilder {
            private int bitField0_;
            private boolean exist_;
            private boolean loading_;
            private Object req_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.req_ = "";
                this.bitField0_ &= -2;
                this.exist_ = false;
                this.bitField0_ &= -3;
                this.loading_ = false;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public DBExistResult getDefaultInstanceForType() {
                return DBExistResult.getDefaultInstance();
            }

            public DBExistResult build() {
                DBExistResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public DBExistResult buildParsed() throws InvalidProtocolBufferException {
                DBExistResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public DBExistResult buildPartial() {
                DBExistResult dBExistResult = new DBExistResult(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                dBExistResult.req_ = this.req_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                dBExistResult.exist_ = this.exist_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                dBExistResult.loading_ = this.loading_;
                dBExistResult.bitField0_ = i2;
                return dBExistResult;
            }

            public Builder mergeFrom(DBExistResult dBExistResult) {
                if (dBExistResult == DBExistResult.getDefaultInstance()) {
                    return this;
                }
                if (dBExistResult.hasReq()) {
                    setReq(dBExistResult.getReq());
                }
                if (dBExistResult.hasExist()) {
                    setExist(dBExistResult.getExist());
                }
                if (dBExistResult.hasLoading()) {
                    setLoading(dBExistResult.getLoading());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReq() && hasExist() && hasLoading()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.req_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.exist_ = codedInputStream.readBool();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.loading_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasReq() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getReq() {
                Object obj = this.req_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.req_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReq(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.req_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReq() {
                this.bitField0_ &= -2;
                this.req_ = DBExistResult.getDefaultInstance().getReq();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReq(ByteString byteString) {
                this.bitField0_ |= 1;
                this.req_ = byteString;
            }

            public boolean hasExist() {
                return (this.bitField0_ & 2) == 2;
            }

            public boolean getExist() {
                return this.exist_;
            }

            public Builder setExist(boolean z) {
                this.bitField0_ |= 2;
                this.exist_ = z;
                return this;
            }

            public Builder clearExist() {
                this.bitField0_ &= -3;
                this.exist_ = false;
                return this;
            }

            public boolean hasLoading() {
                return (this.bitField0_ & 4) == 4;
            }

            public boolean getLoading() {
                return this.loading_;
            }

            public Builder setLoading(boolean z) {
                this.bitField0_ |= 4;
                this.loading_ = z;
                return this;
            }

            public Builder clearLoading() {
                this.bitField0_ &= -5;
                this.loading_ = false;
                return this;
            }
        }

        private DBExistResult(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private DBExistResult(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static DBExistResult getDefaultInstance() {
            return defaultInstance;
        }

        public DBExistResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasReq() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getReq() {
            Object obj = this.req_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.req_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqBytes() {
            Object obj = this.req_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.req_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasExist() {
            return (this.bitField0_ & 2) == 2;
        }

        public boolean getExist() {
            return this.exist_;
        }

        public boolean hasLoading() {
            return (this.bitField0_ & 4) == 4;
        }

        public boolean getLoading() {
            return this.loading_;
        }

        private void initFields() {
            this.req_ = "";
            this.exist_ = false;
            this.loading_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasReq()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasExist()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLoading()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getReqBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBool(2, this.exist_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBool(3, this.loading_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getReqBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBoolSize(2, this.exist_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBoolSize(3, this.loading_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DBExistResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static DBExistResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static DBExistResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static DBExistResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static DBExistResult parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static DBExistResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static DBExistResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static DBExistResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static DBExistResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static DBExistResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DBExistResult dBExistResult) {
            return newBuilder().mergeFrom(dBExistResult);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface DBExistResultOrBuilder extends MessageLiteOrBuilder {
        boolean getExist();

        boolean getLoading();

        String getReq();

        boolean hasExist();

        boolean hasLoading();

        boolean hasReq();
    }

    public static final class EditParam extends GeneratedMessageLite implements EditParamOrBuilder {
        public static final int EVENT_ID_FIELD_NUMBER = 3;
        public static final int MESSAGE_ID_FIELD_NUMBER = 2;
        public static final int REQ_ID_FIELD_NUMBER = 6;
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        public static final int VALUE_NEW_FIELD_NUMBER = 5;
        public static final int VALUE_OLD_FIELD_NUMBER = 4;
        private static final EditParam defaultInstance = new EditParam(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object eventId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object messageId_;
        /* access modifiers changed from: private */
        public Object reqId_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public Object valueNew_;
        /* access modifiers changed from: private */
        public Object valueOld_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EditParam, Builder> implements EditParamOrBuilder {
            private int bitField0_;
            private Object eventId_ = "";
            private Object messageId_ = "";
            private Object reqId_ = "";
            private Object sessionId_ = "";
            private Object valueNew_ = "";
            private Object valueOld_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.messageId_ = "";
                this.bitField0_ &= -3;
                this.eventId_ = "";
                this.bitField0_ &= -5;
                this.valueOld_ = "";
                this.bitField0_ &= -9;
                this.valueNew_ = "";
                this.bitField0_ &= -17;
                this.reqId_ = "";
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EditParam getDefaultInstanceForType() {
                return EditParam.getDefaultInstance();
            }

            public EditParam build() {
                EditParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EditParam buildParsed() throws InvalidProtocolBufferException {
                EditParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EditParam buildPartial() {
                EditParam editParam = new EditParam(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                editParam.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                editParam.messageId_ = this.messageId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                editParam.eventId_ = this.eventId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                editParam.valueOld_ = this.valueOld_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                editParam.valueNew_ = this.valueNew_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                editParam.reqId_ = this.reqId_;
                editParam.bitField0_ = i2;
                return editParam;
            }

            public Builder mergeFrom(EditParam editParam) {
                if (editParam == EditParam.getDefaultInstance()) {
                    return this;
                }
                if (editParam.hasSessionId()) {
                    setSessionId(editParam.getSessionId());
                }
                if (editParam.hasMessageId()) {
                    setMessageId(editParam.getMessageId());
                }
                if (editParam.hasEventId()) {
                    setEventId(editParam.getEventId());
                }
                if (editParam.hasValueOld()) {
                    setValueOld(editParam.getValueOld());
                }
                if (editParam.hasValueNew()) {
                    setValueNew(editParam.getValueNew());
                }
                if (editParam.hasReqId()) {
                    setReqId(editParam.getReqId());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasMessageId() && hasEventId() && hasValueOld() && hasValueNew()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.messageId_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.eventId_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.valueOld_ = codedInputStream.readBytes();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.valueNew_ = codedInputStream.readBytes();
                    } else if (readTag == 50) {
                        this.bitField0_ |= 32;
                        this.reqId_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = EditParam.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasMessageId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getMessageId() {
                Object obj = this.messageId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.messageId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMessageId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.messageId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMessageId() {
                this.bitField0_ &= -3;
                this.messageId_ = EditParam.getDefaultInstance().getMessageId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMessageId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.messageId_ = byteString;
            }

            public boolean hasEventId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getEventId() {
                Object obj = this.eventId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.eventId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setEventId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.eventId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearEventId() {
                this.bitField0_ &= -5;
                this.eventId_ = EditParam.getDefaultInstance().getEventId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setEventId(ByteString byteString) {
                this.bitField0_ |= 4;
                this.eventId_ = byteString;
            }

            public boolean hasValueOld() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getValueOld() {
                Object obj = this.valueOld_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.valueOld_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setValueOld(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.valueOld_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearValueOld() {
                this.bitField0_ &= -9;
                this.valueOld_ = EditParam.getDefaultInstance().getValueOld();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setValueOld(ByteString byteString) {
                this.bitField0_ |= 8;
                this.valueOld_ = byteString;
            }

            public boolean hasValueNew() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getValueNew() {
                Object obj = this.valueNew_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.valueNew_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setValueNew(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.valueNew_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearValueNew() {
                this.bitField0_ &= -17;
                this.valueNew_ = EditParam.getDefaultInstance().getValueNew();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setValueNew(ByteString byteString) {
                this.bitField0_ |= 16;
                this.valueNew_ = byteString;
            }

            public boolean hasReqId() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getReqId() {
                Object obj = this.reqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.reqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.reqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReqId() {
                this.bitField0_ &= -33;
                this.reqId_ = EditParam.getDefaultInstance().getReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReqId(ByteString byteString) {
                this.bitField0_ |= 32;
                this.reqId_ = byteString;
            }
        }

        private EditParam(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EditParam(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EditParam getDefaultInstance() {
            return defaultInstance;
        }

        public EditParam getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessageId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getMessageId() {
            Object obj = this.messageId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.messageId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMessageIdBytes() {
            Object obj = this.messageId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.messageId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasEventId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getEventId() {
            Object obj = this.eventId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.eventId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getEventIdBytes() {
            Object obj = this.eventId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.eventId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasValueOld() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getValueOld() {
            Object obj = this.valueOld_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.valueOld_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getValueOldBytes() {
            Object obj = this.valueOld_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.valueOld_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasValueNew() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getValueNew() {
            Object obj = this.valueNew_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.valueNew_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getValueNewBytes() {
            Object obj = this.valueNew_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.valueNew_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasReqId() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getReqId() {
            Object obj = this.reqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.reqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqIdBytes() {
            Object obj = this.reqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.messageId_ = "";
            this.eventId_ = "";
            this.valueOld_ = "";
            this.valueNew_ = "";
            this.reqId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEventId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasValueOld()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasValueNew()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getValueOldBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getValueNewBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getReqIdBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getValueOldBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getValueNewBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getReqIdBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EditParam parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EditParam parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EditParam parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EditParam parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EditParam parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EditParam parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EditParam parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EditParam parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EditParam parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EditParam parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EditParam editParam) {
            return newBuilder().mergeFrom(editParam);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EditParamOrBuilder extends MessageLiteOrBuilder {
        String getEventId();

        String getMessageId();

        String getReqId();

        String getSessionId();

        String getValueNew();

        String getValueOld();

        boolean hasEventId();

        boolean hasMessageId();

        boolean hasReqId();

        boolean hasSessionId();

        boolean hasValueNew();

        boolean hasValueOld();
    }

    public static final class EmojiComment extends GeneratedMessageLite implements EmojiCommentOrBuilder {
        public static final int COMMENT_T_FIELD_NUMBER = 2;
        public static final int JID_FIELD_NUMBER = 1;
        private static final EmojiComment defaultInstance = new EmojiComment(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public long commentT_;
        /* access modifiers changed from: private */
        public Object jid_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EmojiComment, Builder> implements EmojiCommentOrBuilder {
            private int bitField0_;
            private long commentT_;
            private Object jid_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.jid_ = "";
                this.bitField0_ &= -2;
                this.commentT_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EmojiComment getDefaultInstanceForType() {
                return EmojiComment.getDefaultInstance();
            }

            public EmojiComment build() {
                EmojiComment buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EmojiComment buildParsed() throws InvalidProtocolBufferException {
                EmojiComment buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EmojiComment buildPartial() {
                EmojiComment emojiComment = new EmojiComment(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                emojiComment.jid_ = this.jid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                emojiComment.commentT_ = this.commentT_;
                emojiComment.bitField0_ = i2;
                return emojiComment;
            }

            public Builder mergeFrom(EmojiComment emojiComment) {
                if (emojiComment == EmojiComment.getDefaultInstance()) {
                    return this;
                }
                if (emojiComment.hasJid()) {
                    setJid(emojiComment.getJid());
                }
                if (emojiComment.hasCommentT()) {
                    setCommentT(emojiComment.getCommentT());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasJid() && hasCommentT()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.jid_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.commentT_ = codedInputStream.readInt64();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasJid() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getJid() {
                Object obj = this.jid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.jid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.jid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearJid() {
                this.bitField0_ &= -2;
                this.jid_ = EmojiComment.getDefaultInstance().getJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setJid(ByteString byteString) {
                this.bitField0_ |= 1;
                this.jid_ = byteString;
            }

            public boolean hasCommentT() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getCommentT() {
                return this.commentT_;
            }

            public Builder setCommentT(long j) {
                this.bitField0_ |= 2;
                this.commentT_ = j;
                return this;
            }

            public Builder clearCommentT() {
                this.bitField0_ &= -3;
                this.commentT_ = 0;
                return this;
            }
        }

        private EmojiComment(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EmojiComment(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EmojiComment getDefaultInstance() {
            return defaultInstance;
        }

        public EmojiComment getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasJid() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getJid() {
            Object obj = this.jid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.jid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getJidBytes() {
            Object obj = this.jid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.jid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCommentT() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getCommentT() {
            return this.commentT_;
        }

        private void initFields() {
            this.jid_ = "";
            this.commentT_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCommentT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.commentT_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.commentT_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EmojiComment parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EmojiComment parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EmojiComment parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EmojiComment parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EmojiComment parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EmojiComment parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EmojiComment parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiComment parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiComment parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EmojiComment parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EmojiComment emojiComment) {
            return newBuilder().mergeFrom(emojiComment);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EmojiCommentOrBuilder extends MessageLiteOrBuilder {
        long getCommentT();

        String getJid();

        boolean hasCommentT();

        boolean hasJid();
    }

    public static final class EmojiCountInfo extends GeneratedMessageLite implements EmojiCountInfoOrBuilder {
        public static final int CONTAIN_MINE_FIELD_NUMBER = 4;
        public static final int COUNT_FIELD_NUMBER = 2;
        public static final int EMOJI_FIELD_NUMBER = 1;
        public static final int FIRST_EMOJI_T_FIELD_NUMBER = 3;
        private static final EmojiCountInfo defaultInstance = new EmojiCountInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean containMine_;
        /* access modifiers changed from: private */
        public long count_;
        /* access modifiers changed from: private */
        public Object emoji_;
        /* access modifiers changed from: private */
        public long firstEmojiT_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EmojiCountInfo, Builder> implements EmojiCountInfoOrBuilder {
            private int bitField0_;
            private boolean containMine_;
            private long count_;
            private Object emoji_ = "";
            private long firstEmojiT_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.emoji_ = "";
                this.bitField0_ &= -2;
                this.count_ = 0;
                this.bitField0_ &= -3;
                this.firstEmojiT_ = 0;
                this.bitField0_ &= -5;
                this.containMine_ = false;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EmojiCountInfo getDefaultInstanceForType() {
                return EmojiCountInfo.getDefaultInstance();
            }

            public EmojiCountInfo build() {
                EmojiCountInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EmojiCountInfo buildParsed() throws InvalidProtocolBufferException {
                EmojiCountInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EmojiCountInfo buildPartial() {
                EmojiCountInfo emojiCountInfo = new EmojiCountInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                emojiCountInfo.emoji_ = this.emoji_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                emojiCountInfo.count_ = this.count_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                emojiCountInfo.firstEmojiT_ = this.firstEmojiT_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                emojiCountInfo.containMine_ = this.containMine_;
                emojiCountInfo.bitField0_ = i2;
                return emojiCountInfo;
            }

            public Builder mergeFrom(EmojiCountInfo emojiCountInfo) {
                if (emojiCountInfo == EmojiCountInfo.getDefaultInstance()) {
                    return this;
                }
                if (emojiCountInfo.hasEmoji()) {
                    setEmoji(emojiCountInfo.getEmoji());
                }
                if (emojiCountInfo.hasCount()) {
                    setCount(emojiCountInfo.getCount());
                }
                if (emojiCountInfo.hasFirstEmojiT()) {
                    setFirstEmojiT(emojiCountInfo.getFirstEmojiT());
                }
                if (emojiCountInfo.hasContainMine()) {
                    setContainMine(emojiCountInfo.getContainMine());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasEmoji() && hasCount() && hasFirstEmojiT() && hasContainMine()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.emoji_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.count_ = codedInputStream.readInt64();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.firstEmojiT_ = codedInputStream.readInt64();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.containMine_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasEmoji() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getEmoji() {
                Object obj = this.emoji_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.emoji_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setEmoji(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.emoji_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearEmoji() {
                this.bitField0_ &= -2;
                this.emoji_ = EmojiCountInfo.getDefaultInstance().getEmoji();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setEmoji(ByteString byteString) {
                this.bitField0_ |= 1;
                this.emoji_ = byteString;
            }

            public boolean hasCount() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getCount() {
                return this.count_;
            }

            public Builder setCount(long j) {
                this.bitField0_ |= 2;
                this.count_ = j;
                return this;
            }

            public Builder clearCount() {
                this.bitField0_ &= -3;
                this.count_ = 0;
                return this;
            }

            public boolean hasFirstEmojiT() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getFirstEmojiT() {
                return this.firstEmojiT_;
            }

            public Builder setFirstEmojiT(long j) {
                this.bitField0_ |= 4;
                this.firstEmojiT_ = j;
                return this;
            }

            public Builder clearFirstEmojiT() {
                this.bitField0_ &= -5;
                this.firstEmojiT_ = 0;
                return this;
            }

            public boolean hasContainMine() {
                return (this.bitField0_ & 8) == 8;
            }

            public boolean getContainMine() {
                return this.containMine_;
            }

            public Builder setContainMine(boolean z) {
                this.bitField0_ |= 8;
                this.containMine_ = z;
                return this;
            }

            public Builder clearContainMine() {
                this.bitField0_ &= -9;
                this.containMine_ = false;
                return this;
            }
        }

        private EmojiCountInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EmojiCountInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EmojiCountInfo getDefaultInstance() {
            return defaultInstance;
        }

        public EmojiCountInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasEmoji() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getEmoji() {
            Object obj = this.emoji_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.emoji_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getEmojiBytes() {
            Object obj = this.emoji_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.emoji_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCount() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getCount() {
            return this.count_;
        }

        public boolean hasFirstEmojiT() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getFirstEmojiT() {
            return this.firstEmojiT_;
        }

        public boolean hasContainMine() {
            return (this.bitField0_ & 8) == 8;
        }

        public boolean getContainMine() {
            return this.containMine_;
        }

        private void initFields() {
            this.emoji_ = "";
            this.count_ = 0;
            this.firstEmojiT_ = 0;
            this.containMine_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasEmoji()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFirstEmojiT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasContainMine()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getEmojiBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.count_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.firstEmojiT_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBool(4, this.containMine_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getEmojiBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.count_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt64Size(3, this.firstEmojiT_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBoolSize(4, this.containMine_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EmojiCountInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EmojiCountInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EmojiCountInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EmojiCountInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EmojiCountInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EmojiCountInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EmojiCountInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiCountInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiCountInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EmojiCountInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EmojiCountInfo emojiCountInfo) {
            return newBuilder().mergeFrom(emojiCountInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EmojiCountInfoOrBuilder extends MessageLiteOrBuilder {
        boolean getContainMine();

        long getCount();

        String getEmoji();

        long getFirstEmojiT();

        boolean hasContainMine();

        boolean hasCount();

        boolean hasEmoji();

        boolean hasFirstEmojiT();
    }

    public static final class EmojiCountMap extends GeneratedMessageLite implements EmojiCountMapOrBuilder {
        public static final int EMOJI_COUNT_INFOS_FIELD_NUMBER = 1;
        public static final int XMS_REQ_ID_FIELD_NUMBER = 2;
        private static final EmojiCountMap defaultInstance = new EmojiCountMap(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<EmojiCountInfo> emojiCountInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object xmsReqId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EmojiCountMap, Builder> implements EmojiCountMapOrBuilder {
            private int bitField0_;
            private List<EmojiCountInfo> emojiCountInfos_ = Collections.emptyList();
            private Object xmsReqId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.emojiCountInfos_ = Collections.emptyList();
                this.bitField0_ &= -2;
                this.xmsReqId_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EmojiCountMap getDefaultInstanceForType() {
                return EmojiCountMap.getDefaultInstance();
            }

            public EmojiCountMap build() {
                EmojiCountMap buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EmojiCountMap buildParsed() throws InvalidProtocolBufferException {
                EmojiCountMap buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EmojiCountMap buildPartial() {
                EmojiCountMap emojiCountMap = new EmojiCountMap(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) == 1) {
                    this.emojiCountInfos_ = Collections.unmodifiableList(this.emojiCountInfos_);
                    this.bitField0_ &= -2;
                }
                emojiCountMap.emojiCountInfos_ = this.emojiCountInfos_;
                if ((i & 2) != 2) {
                    i2 = 0;
                }
                emojiCountMap.xmsReqId_ = this.xmsReqId_;
                emojiCountMap.bitField0_ = i2;
                return emojiCountMap;
            }

            public Builder mergeFrom(EmojiCountMap emojiCountMap) {
                if (emojiCountMap == EmojiCountMap.getDefaultInstance()) {
                    return this;
                }
                if (!emojiCountMap.emojiCountInfos_.isEmpty()) {
                    if (this.emojiCountInfos_.isEmpty()) {
                        this.emojiCountInfos_ = emojiCountMap.emojiCountInfos_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureEmojiCountInfosIsMutable();
                        this.emojiCountInfos_.addAll(emojiCountMap.emojiCountInfos_);
                    }
                }
                if (emojiCountMap.hasXmsReqId()) {
                    setXmsReqId(emojiCountMap.getXmsReqId());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasXmsReqId()) {
                    return false;
                }
                for (int i = 0; i < getEmojiCountInfosCount(); i++) {
                    if (!getEmojiCountInfos(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = EmojiCountInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addEmojiCountInfos(newBuilder.buildPartial());
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.xmsReqId_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureEmojiCountInfosIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.emojiCountInfos_ = new ArrayList(this.emojiCountInfos_);
                    this.bitField0_ |= 1;
                }
            }

            public List<EmojiCountInfo> getEmojiCountInfosList() {
                return Collections.unmodifiableList(this.emojiCountInfos_);
            }

            public int getEmojiCountInfosCount() {
                return this.emojiCountInfos_.size();
            }

            public EmojiCountInfo getEmojiCountInfos(int i) {
                return (EmojiCountInfo) this.emojiCountInfos_.get(i);
            }

            public Builder setEmojiCountInfos(int i, EmojiCountInfo emojiCountInfo) {
                if (emojiCountInfo != null) {
                    ensureEmojiCountInfosIsMutable();
                    this.emojiCountInfos_.set(i, emojiCountInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setEmojiCountInfos(int i, Builder builder) {
                ensureEmojiCountInfosIsMutable();
                this.emojiCountInfos_.set(i, builder.build());
                return this;
            }

            public Builder addEmojiCountInfos(EmojiCountInfo emojiCountInfo) {
                if (emojiCountInfo != null) {
                    ensureEmojiCountInfosIsMutable();
                    this.emojiCountInfos_.add(emojiCountInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addEmojiCountInfos(int i, EmojiCountInfo emojiCountInfo) {
                if (emojiCountInfo != null) {
                    ensureEmojiCountInfosIsMutable();
                    this.emojiCountInfos_.add(i, emojiCountInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addEmojiCountInfos(Builder builder) {
                ensureEmojiCountInfosIsMutable();
                this.emojiCountInfos_.add(builder.build());
                return this;
            }

            public Builder addEmojiCountInfos(int i, Builder builder) {
                ensureEmojiCountInfosIsMutable();
                this.emojiCountInfos_.add(i, builder.build());
                return this;
            }

            public Builder addAllEmojiCountInfos(Iterable<? extends EmojiCountInfo> iterable) {
                ensureEmojiCountInfosIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.emojiCountInfos_);
                return this;
            }

            public Builder clearEmojiCountInfos() {
                this.emojiCountInfos_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeEmojiCountInfos(int i) {
                ensureEmojiCountInfosIsMutable();
                this.emojiCountInfos_.remove(i);
                return this;
            }

            public boolean hasXmsReqId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getXmsReqId() {
                Object obj = this.xmsReqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.xmsReqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setXmsReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.xmsReqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearXmsReqId() {
                this.bitField0_ &= -3;
                this.xmsReqId_ = EmojiCountMap.getDefaultInstance().getXmsReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setXmsReqId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.xmsReqId_ = byteString;
            }
        }

        private EmojiCountMap(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EmojiCountMap(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EmojiCountMap getDefaultInstance() {
            return defaultInstance;
        }

        public EmojiCountMap getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<EmojiCountInfo> getEmojiCountInfosList() {
            return this.emojiCountInfos_;
        }

        public List<? extends EmojiCountInfoOrBuilder> getEmojiCountInfosOrBuilderList() {
            return this.emojiCountInfos_;
        }

        public int getEmojiCountInfosCount() {
            return this.emojiCountInfos_.size();
        }

        public EmojiCountInfo getEmojiCountInfos(int i) {
            return (EmojiCountInfo) this.emojiCountInfos_.get(i);
        }

        public EmojiCountInfoOrBuilder getEmojiCountInfosOrBuilder(int i) {
            return (EmojiCountInfoOrBuilder) this.emojiCountInfos_.get(i);
        }

        public boolean hasXmsReqId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getXmsReqId() {
            Object obj = this.xmsReqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.xmsReqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getXmsReqIdBytes() {
            Object obj = this.xmsReqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.xmsReqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.emojiCountInfos_ = Collections.emptyList();
            this.xmsReqId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasXmsReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getEmojiCountInfosCount(); i++) {
                    if (!getEmojiCountInfos(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.emojiCountInfos_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.emojiCountInfos_.get(i));
            }
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(2, getXmsReqIdBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.emojiCountInfos_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.emojiCountInfos_.get(i3));
            }
            if ((this.bitField0_ & 1) == 1) {
                i2 += CodedOutputStream.computeBytesSize(2, getXmsReqIdBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EmojiCountMap parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EmojiCountMap parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EmojiCountMap parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EmojiCountMap parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EmojiCountMap parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EmojiCountMap parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EmojiCountMap parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiCountMap parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiCountMap parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EmojiCountMap parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EmojiCountMap emojiCountMap) {
            return newBuilder().mergeFrom(emojiCountMap);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EmojiCountMapOrBuilder extends MessageLiteOrBuilder {
        EmojiCountInfo getEmojiCountInfos(int i);

        int getEmojiCountInfosCount();

        List<EmojiCountInfo> getEmojiCountInfosList();

        String getXmsReqId();

        boolean hasXmsReqId();
    }

    public static final class EmojiDetailInfo extends GeneratedMessageLite implements EmojiDetailInfoOrBuilder {
        public static final int COMMENTS_FIELD_NUMBER = 1;
        public static final int XMS_REQ_ID_FIELD_NUMBER = 2;
        private static final EmojiDetailInfo defaultInstance = new EmojiDetailInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<EmojiComment> comments_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object xmsReqId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EmojiDetailInfo, Builder> implements EmojiDetailInfoOrBuilder {
            private int bitField0_;
            private List<EmojiComment> comments_ = Collections.emptyList();
            private Object xmsReqId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.comments_ = Collections.emptyList();
                this.bitField0_ &= -2;
                this.xmsReqId_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EmojiDetailInfo getDefaultInstanceForType() {
                return EmojiDetailInfo.getDefaultInstance();
            }

            public EmojiDetailInfo build() {
                EmojiDetailInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EmojiDetailInfo buildParsed() throws InvalidProtocolBufferException {
                EmojiDetailInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EmojiDetailInfo buildPartial() {
                EmojiDetailInfo emojiDetailInfo = new EmojiDetailInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) == 1) {
                    this.comments_ = Collections.unmodifiableList(this.comments_);
                    this.bitField0_ &= -2;
                }
                emojiDetailInfo.comments_ = this.comments_;
                if ((i & 2) != 2) {
                    i2 = 0;
                }
                emojiDetailInfo.xmsReqId_ = this.xmsReqId_;
                emojiDetailInfo.bitField0_ = i2;
                return emojiDetailInfo;
            }

            public Builder mergeFrom(EmojiDetailInfo emojiDetailInfo) {
                if (emojiDetailInfo == EmojiDetailInfo.getDefaultInstance()) {
                    return this;
                }
                if (!emojiDetailInfo.comments_.isEmpty()) {
                    if (this.comments_.isEmpty()) {
                        this.comments_ = emojiDetailInfo.comments_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureCommentsIsMutable();
                        this.comments_.addAll(emojiDetailInfo.comments_);
                    }
                }
                if (emojiDetailInfo.hasXmsReqId()) {
                    setXmsReqId(emojiDetailInfo.getXmsReqId());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasXmsReqId()) {
                    return false;
                }
                for (int i = 0; i < getCommentsCount(); i++) {
                    if (!getComments(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = EmojiComment.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addComments(newBuilder.buildPartial());
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.xmsReqId_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureCommentsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.comments_ = new ArrayList(this.comments_);
                    this.bitField0_ |= 1;
                }
            }

            public List<EmojiComment> getCommentsList() {
                return Collections.unmodifiableList(this.comments_);
            }

            public int getCommentsCount() {
                return this.comments_.size();
            }

            public EmojiComment getComments(int i) {
                return (EmojiComment) this.comments_.get(i);
            }

            public Builder setComments(int i, EmojiComment emojiComment) {
                if (emojiComment != null) {
                    ensureCommentsIsMutable();
                    this.comments_.set(i, emojiComment);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setComments(int i, Builder builder) {
                ensureCommentsIsMutable();
                this.comments_.set(i, builder.build());
                return this;
            }

            public Builder addComments(EmojiComment emojiComment) {
                if (emojiComment != null) {
                    ensureCommentsIsMutable();
                    this.comments_.add(emojiComment);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addComments(int i, EmojiComment emojiComment) {
                if (emojiComment != null) {
                    ensureCommentsIsMutable();
                    this.comments_.add(i, emojiComment);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addComments(Builder builder) {
                ensureCommentsIsMutable();
                this.comments_.add(builder.build());
                return this;
            }

            public Builder addComments(int i, Builder builder) {
                ensureCommentsIsMutable();
                this.comments_.add(i, builder.build());
                return this;
            }

            public Builder addAllComments(Iterable<? extends EmojiComment> iterable) {
                ensureCommentsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.comments_);
                return this;
            }

            public Builder clearComments() {
                this.comments_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeComments(int i) {
                ensureCommentsIsMutable();
                this.comments_.remove(i);
                return this;
            }

            public boolean hasXmsReqId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getXmsReqId() {
                Object obj = this.xmsReqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.xmsReqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setXmsReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.xmsReqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearXmsReqId() {
                this.bitField0_ &= -3;
                this.xmsReqId_ = EmojiDetailInfo.getDefaultInstance().getXmsReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setXmsReqId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.xmsReqId_ = byteString;
            }
        }

        private EmojiDetailInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EmojiDetailInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EmojiDetailInfo getDefaultInstance() {
            return defaultInstance;
        }

        public EmojiDetailInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<EmojiComment> getCommentsList() {
            return this.comments_;
        }

        public List<? extends EmojiCommentOrBuilder> getCommentsOrBuilderList() {
            return this.comments_;
        }

        public int getCommentsCount() {
            return this.comments_.size();
        }

        public EmojiComment getComments(int i) {
            return (EmojiComment) this.comments_.get(i);
        }

        public EmojiCommentOrBuilder getCommentsOrBuilder(int i) {
            return (EmojiCommentOrBuilder) this.comments_.get(i);
        }

        public boolean hasXmsReqId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getXmsReqId() {
            Object obj = this.xmsReqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.xmsReqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getXmsReqIdBytes() {
            Object obj = this.xmsReqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.xmsReqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.comments_ = Collections.emptyList();
            this.xmsReqId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasXmsReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getCommentsCount(); i++) {
                    if (!getComments(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.comments_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.comments_.get(i));
            }
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(2, getXmsReqIdBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.comments_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.comments_.get(i3));
            }
            if ((this.bitField0_ & 1) == 1) {
                i2 += CodedOutputStream.computeBytesSize(2, getXmsReqIdBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EmojiDetailInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EmojiDetailInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EmojiDetailInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EmojiDetailInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EmojiDetailInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EmojiDetailInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EmojiDetailInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiDetailInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiDetailInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EmojiDetailInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EmojiDetailInfo emojiDetailInfo) {
            return newBuilder().mergeFrom(emojiDetailInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EmojiDetailInfoOrBuilder extends MessageLiteOrBuilder {
        EmojiComment getComments(int i);

        int getCommentsCount();

        List<EmojiComment> getCommentsList();

        String getXmsReqId();

        boolean hasXmsReqId();
    }

    public static final class EmojiItem extends GeneratedMessageLite implements EmojiItemOrBuilder {
        public static final int INDEX_FIELD_NUMBER = 4;
        public static final int POSITIONEND_FIELD_NUMBER = 2;
        public static final int POSITIONSTART_FIELD_NUMBER = 1;
        public static final int REPSTR_FIELD_NUMBER = 6;
        public static final int SHORTCUT_FIELD_NUMBER = 5;
        public static final int TYPE_FIELD_NUMBER = 3;
        private static final EmojiItem defaultInstance = new EmojiItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int index_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int positionEnd_;
        /* access modifiers changed from: private */
        public int positionStart_;
        /* access modifiers changed from: private */
        public Object repstr_;
        /* access modifiers changed from: private */
        public Object shortcut_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EmojiItem, Builder> implements EmojiItemOrBuilder {
            private int bitField0_;
            private int index_;
            private int positionEnd_;
            private int positionStart_;
            private Object repstr_ = "";
            private Object shortcut_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.positionStart_ = 0;
                this.bitField0_ &= -2;
                this.positionEnd_ = 0;
                this.bitField0_ &= -3;
                this.type_ = 0;
                this.bitField0_ &= -5;
                this.index_ = 0;
                this.bitField0_ &= -9;
                this.shortcut_ = "";
                this.bitField0_ &= -17;
                this.repstr_ = "";
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EmojiItem getDefaultInstanceForType() {
                return EmojiItem.getDefaultInstance();
            }

            public EmojiItem build() {
                EmojiItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EmojiItem buildParsed() throws InvalidProtocolBufferException {
                EmojiItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EmojiItem buildPartial() {
                EmojiItem emojiItem = new EmojiItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                emojiItem.positionStart_ = this.positionStart_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                emojiItem.positionEnd_ = this.positionEnd_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                emojiItem.type_ = this.type_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                emojiItem.index_ = this.index_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                emojiItem.shortcut_ = this.shortcut_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                emojiItem.repstr_ = this.repstr_;
                emojiItem.bitField0_ = i2;
                return emojiItem;
            }

            public Builder mergeFrom(EmojiItem emojiItem) {
                if (emojiItem == EmojiItem.getDefaultInstance()) {
                    return this;
                }
                if (emojiItem.hasPositionStart()) {
                    setPositionStart(emojiItem.getPositionStart());
                }
                if (emojiItem.hasPositionEnd()) {
                    setPositionEnd(emojiItem.getPositionEnd());
                }
                if (emojiItem.hasType()) {
                    setType(emojiItem.getType());
                }
                if (emojiItem.hasIndex()) {
                    setIndex(emojiItem.getIndex());
                }
                if (emojiItem.hasShortcut()) {
                    setShortcut(emojiItem.getShortcut());
                }
                if (emojiItem.hasRepstr()) {
                    setRepstr(emojiItem.getRepstr());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasPositionStart() && hasPositionEnd() && hasType() && hasIndex() && hasShortcut() && hasRepstr()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.positionStart_ = codedInputStream.readInt32();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.positionEnd_ = codedInputStream.readInt32();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.index_ = codedInputStream.readInt32();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.shortcut_ = codedInputStream.readBytes();
                    } else if (readTag == 50) {
                        this.bitField0_ |= 32;
                        this.repstr_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasPositionStart() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getPositionStart() {
                return this.positionStart_;
            }

            public Builder setPositionStart(int i) {
                this.bitField0_ |= 1;
                this.positionStart_ = i;
                return this;
            }

            public Builder clearPositionStart() {
                this.bitField0_ &= -2;
                this.positionStart_ = 0;
                return this;
            }

            public boolean hasPositionEnd() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getPositionEnd() {
                return this.positionEnd_;
            }

            public Builder setPositionEnd(int i) {
                this.bitField0_ |= 2;
                this.positionEnd_ = i;
                return this;
            }

            public Builder clearPositionEnd() {
                this.bitField0_ &= -3;
                this.positionEnd_ = 0;
                return this;
            }

            public boolean hasType() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 4;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -5;
                this.type_ = 0;
                return this;
            }

            public boolean hasIndex() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getIndex() {
                return this.index_;
            }

            public Builder setIndex(int i) {
                this.bitField0_ |= 8;
                this.index_ = i;
                return this;
            }

            public Builder clearIndex() {
                this.bitField0_ &= -9;
                this.index_ = 0;
                return this;
            }

            public boolean hasShortcut() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getShortcut() {
                Object obj = this.shortcut_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.shortcut_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setShortcut(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.shortcut_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearShortcut() {
                this.bitField0_ &= -17;
                this.shortcut_ = EmojiItem.getDefaultInstance().getShortcut();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setShortcut(ByteString byteString) {
                this.bitField0_ |= 16;
                this.shortcut_ = byteString;
            }

            public boolean hasRepstr() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getRepstr() {
                Object obj = this.repstr_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.repstr_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setRepstr(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.repstr_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearRepstr() {
                this.bitField0_ &= -33;
                this.repstr_ = EmojiItem.getDefaultInstance().getRepstr();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setRepstr(ByteString byteString) {
                this.bitField0_ |= 32;
                this.repstr_ = byteString;
            }
        }

        private EmojiItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EmojiItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EmojiItem getDefaultInstance() {
            return defaultInstance;
        }

        public EmojiItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasPositionStart() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getPositionStart() {
            return this.positionStart_;
        }

        public boolean hasPositionEnd() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getPositionEnd() {
            return this.positionEnd_;
        }

        public boolean hasType() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasIndex() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getIndex() {
            return this.index_;
        }

        public boolean hasShortcut() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getShortcut() {
            Object obj = this.shortcut_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.shortcut_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getShortcutBytes() {
            Object obj = this.shortcut_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.shortcut_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasRepstr() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getRepstr() {
            Object obj = this.repstr_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.repstr_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getRepstrBytes() {
            Object obj = this.repstr_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.repstr_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.positionStart_ = 0;
            this.positionEnd_ = 0;
            this.type_ = 0;
            this.index_ = 0;
            this.shortcut_ = "";
            this.repstr_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasPositionStart()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPositionEnd()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIndex()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasShortcut()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasRepstr()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.positionStart_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.positionEnd_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.type_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.index_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getShortcutBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getRepstrBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.positionStart_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.positionEnd_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.type_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt32Size(4, this.index_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getShortcutBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getRepstrBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EmojiItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EmojiItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EmojiItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EmojiItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EmojiItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EmojiItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EmojiItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EmojiItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EmojiItem emojiItem) {
            return newBuilder().mergeFrom(emojiItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EmojiItemOrBuilder extends MessageLiteOrBuilder {
        int getIndex();

        int getPositionEnd();

        int getPositionStart();

        String getRepstr();

        String getShortcut();

        int getType();

        boolean hasIndex();

        boolean hasPositionEnd();

        boolean hasPositionStart();

        boolean hasRepstr();

        boolean hasShortcut();

        boolean hasType();
    }

    public static final class EmojiList extends GeneratedMessageLite implements EmojiListOrBuilder {
        public static final int EMOJIITEM_FIELD_NUMBER = 1;
        private static final EmojiList defaultInstance = new EmojiList(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<EmojiItem> emojiItem_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<EmojiList, Builder> implements EmojiListOrBuilder {
            private int bitField0_;
            private List<EmojiItem> emojiItem_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.emojiItem_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public EmojiList getDefaultInstanceForType() {
                return EmojiList.getDefaultInstance();
            }

            public EmojiList build() {
                EmojiList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public EmojiList buildParsed() throws InvalidProtocolBufferException {
                EmojiList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public EmojiList buildPartial() {
                EmojiList emojiList = new EmojiList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.emojiItem_ = Collections.unmodifiableList(this.emojiItem_);
                    this.bitField0_ &= -2;
                }
                emojiList.emojiItem_ = this.emojiItem_;
                return emojiList;
            }

            public Builder mergeFrom(EmojiList emojiList) {
                if (emojiList != EmojiList.getDefaultInstance() && !emojiList.emojiItem_.isEmpty()) {
                    if (this.emojiItem_.isEmpty()) {
                        this.emojiItem_ = emojiList.emojiItem_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureEmojiItemIsMutable();
                        this.emojiItem_.addAll(emojiList.emojiItem_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getEmojiItemCount(); i++) {
                    if (!getEmojiItem(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = EmojiItem.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addEmojiItem(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureEmojiItemIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.emojiItem_ = new ArrayList(this.emojiItem_);
                    this.bitField0_ |= 1;
                }
            }

            public List<EmojiItem> getEmojiItemList() {
                return Collections.unmodifiableList(this.emojiItem_);
            }

            public int getEmojiItemCount() {
                return this.emojiItem_.size();
            }

            public EmojiItem getEmojiItem(int i) {
                return (EmojiItem) this.emojiItem_.get(i);
            }

            public Builder setEmojiItem(int i, EmojiItem emojiItem) {
                if (emojiItem != null) {
                    ensureEmojiItemIsMutable();
                    this.emojiItem_.set(i, emojiItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setEmojiItem(int i, Builder builder) {
                ensureEmojiItemIsMutable();
                this.emojiItem_.set(i, builder.build());
                return this;
            }

            public Builder addEmojiItem(EmojiItem emojiItem) {
                if (emojiItem != null) {
                    ensureEmojiItemIsMutable();
                    this.emojiItem_.add(emojiItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addEmojiItem(int i, EmojiItem emojiItem) {
                if (emojiItem != null) {
                    ensureEmojiItemIsMutable();
                    this.emojiItem_.add(i, emojiItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addEmojiItem(Builder builder) {
                ensureEmojiItemIsMutable();
                this.emojiItem_.add(builder.build());
                return this;
            }

            public Builder addEmojiItem(int i, Builder builder) {
                ensureEmojiItemIsMutable();
                this.emojiItem_.add(i, builder.build());
                return this;
            }

            public Builder addAllEmojiItem(Iterable<? extends EmojiItem> iterable) {
                ensureEmojiItemIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.emojiItem_);
                return this;
            }

            public Builder clearEmojiItem() {
                this.emojiItem_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeEmojiItem(int i) {
                ensureEmojiItemIsMutable();
                this.emojiItem_.remove(i);
                return this;
            }
        }

        private EmojiList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private EmojiList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static EmojiList getDefaultInstance() {
            return defaultInstance;
        }

        public EmojiList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<EmojiItem> getEmojiItemList() {
            return this.emojiItem_;
        }

        public List<? extends EmojiItemOrBuilder> getEmojiItemOrBuilderList() {
            return this.emojiItem_;
        }

        public int getEmojiItemCount() {
            return this.emojiItem_.size();
        }

        public EmojiItem getEmojiItem(int i) {
            return (EmojiItem) this.emojiItem_.get(i);
        }

        public EmojiItemOrBuilder getEmojiItemOrBuilder(int i) {
            return (EmojiItemOrBuilder) this.emojiItem_.get(i);
        }

        private void initFields() {
            this.emojiItem_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getEmojiItemCount(); i++) {
                if (!getEmojiItem(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.emojiItem_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.emojiItem_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.emojiItem_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.emojiItem_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EmojiList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static EmojiList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static EmojiList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static EmojiList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static EmojiList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static EmojiList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static EmojiList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static EmojiList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static EmojiList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EmojiList emojiList) {
            return newBuilder().mergeFrom(emojiList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface EmojiListOrBuilder extends MessageLiteOrBuilder {
        EmojiItem getEmojiItem(int i);

        int getEmojiItemCount();

        List<EmojiItem> getEmojiItemList();
    }

    public static final class FieldsEditParam extends GeneratedMessageLite implements FieldsEditParamOrBuilder {
        public static final int EVENT_ID_FIELD_NUMBER = 3;
        public static final int KEY_FIELD_NUMBER = 4;
        public static final int MESSAGE_ID_FIELD_NUMBER = 2;
        public static final int REQ_ID_FIELD_NUMBER = 7;
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        public static final int VALUE_NEW_FIELD_NUMBER = 6;
        public static final int VALUE_OLD_FIELD_NUMBER = 5;
        private static final FieldsEditParam defaultInstance = new FieldsEditParam(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object eventId_;
        /* access modifiers changed from: private */
        public Object key_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object messageId_;
        /* access modifiers changed from: private */
        public Object reqId_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public Object valueNew_;
        /* access modifiers changed from: private */
        public Object valueOld_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FieldsEditParam, Builder> implements FieldsEditParamOrBuilder {
            private int bitField0_;
            private Object eventId_ = "";
            private Object key_ = "";
            private Object messageId_ = "";
            private Object reqId_ = "";
            private Object sessionId_ = "";
            private Object valueNew_ = "";
            private Object valueOld_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.messageId_ = "";
                this.bitField0_ &= -3;
                this.eventId_ = "";
                this.bitField0_ &= -5;
                this.key_ = "";
                this.bitField0_ &= -9;
                this.valueOld_ = "";
                this.bitField0_ &= -17;
                this.valueNew_ = "";
                this.bitField0_ &= -33;
                this.reqId_ = "";
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FieldsEditParam getDefaultInstanceForType() {
                return FieldsEditParam.getDefaultInstance();
            }

            public FieldsEditParam build() {
                FieldsEditParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FieldsEditParam buildParsed() throws InvalidProtocolBufferException {
                FieldsEditParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FieldsEditParam buildPartial() {
                FieldsEditParam fieldsEditParam = new FieldsEditParam(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fieldsEditParam.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fieldsEditParam.messageId_ = this.messageId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                fieldsEditParam.eventId_ = this.eventId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                fieldsEditParam.key_ = this.key_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                fieldsEditParam.valueOld_ = this.valueOld_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                fieldsEditParam.valueNew_ = this.valueNew_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                fieldsEditParam.reqId_ = this.reqId_;
                fieldsEditParam.bitField0_ = i2;
                return fieldsEditParam;
            }

            public Builder mergeFrom(FieldsEditParam fieldsEditParam) {
                if (fieldsEditParam == FieldsEditParam.getDefaultInstance()) {
                    return this;
                }
                if (fieldsEditParam.hasSessionId()) {
                    setSessionId(fieldsEditParam.getSessionId());
                }
                if (fieldsEditParam.hasMessageId()) {
                    setMessageId(fieldsEditParam.getMessageId());
                }
                if (fieldsEditParam.hasEventId()) {
                    setEventId(fieldsEditParam.getEventId());
                }
                if (fieldsEditParam.hasKey()) {
                    setKey(fieldsEditParam.getKey());
                }
                if (fieldsEditParam.hasValueOld()) {
                    setValueOld(fieldsEditParam.getValueOld());
                }
                if (fieldsEditParam.hasValueNew()) {
                    setValueNew(fieldsEditParam.getValueNew());
                }
                if (fieldsEditParam.hasReqId()) {
                    setReqId(fieldsEditParam.getReqId());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasMessageId() && hasEventId() && hasKey() && hasValueOld() && hasValueNew()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.messageId_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.eventId_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.key_ = codedInputStream.readBytes();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.valueOld_ = codedInputStream.readBytes();
                    } else if (readTag == 50) {
                        this.bitField0_ |= 32;
                        this.valueNew_ = codedInputStream.readBytes();
                    } else if (readTag == 58) {
                        this.bitField0_ |= 64;
                        this.reqId_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = FieldsEditParam.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasMessageId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getMessageId() {
                Object obj = this.messageId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.messageId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMessageId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.messageId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMessageId() {
                this.bitField0_ &= -3;
                this.messageId_ = FieldsEditParam.getDefaultInstance().getMessageId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMessageId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.messageId_ = byteString;
            }

            public boolean hasEventId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getEventId() {
                Object obj = this.eventId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.eventId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setEventId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.eventId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearEventId() {
                this.bitField0_ &= -5;
                this.eventId_ = FieldsEditParam.getDefaultInstance().getEventId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setEventId(ByteString byteString) {
                this.bitField0_ |= 4;
                this.eventId_ = byteString;
            }

            public boolean hasKey() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getKey() {
                Object obj = this.key_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.key_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKey(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.key_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKey() {
                this.bitField0_ &= -9;
                this.key_ = FieldsEditParam.getDefaultInstance().getKey();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKey(ByteString byteString) {
                this.bitField0_ |= 8;
                this.key_ = byteString;
            }

            public boolean hasValueOld() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getValueOld() {
                Object obj = this.valueOld_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.valueOld_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setValueOld(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.valueOld_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearValueOld() {
                this.bitField0_ &= -17;
                this.valueOld_ = FieldsEditParam.getDefaultInstance().getValueOld();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setValueOld(ByteString byteString) {
                this.bitField0_ |= 16;
                this.valueOld_ = byteString;
            }

            public boolean hasValueNew() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getValueNew() {
                Object obj = this.valueNew_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.valueNew_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setValueNew(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.valueNew_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearValueNew() {
                this.bitField0_ &= -33;
                this.valueNew_ = FieldsEditParam.getDefaultInstance().getValueNew();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setValueNew(ByteString byteString) {
                this.bitField0_ |= 32;
                this.valueNew_ = byteString;
            }

            public boolean hasReqId() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getReqId() {
                Object obj = this.reqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.reqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.reqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReqId() {
                this.bitField0_ &= -65;
                this.reqId_ = FieldsEditParam.getDefaultInstance().getReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReqId(ByteString byteString) {
                this.bitField0_ |= 64;
                this.reqId_ = byteString;
            }
        }

        private FieldsEditParam(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FieldsEditParam(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FieldsEditParam getDefaultInstance() {
            return defaultInstance;
        }

        public FieldsEditParam getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessageId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getMessageId() {
            Object obj = this.messageId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.messageId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMessageIdBytes() {
            Object obj = this.messageId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.messageId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasEventId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getEventId() {
            Object obj = this.eventId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.eventId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getEventIdBytes() {
            Object obj = this.eventId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.eventId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasKey() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getKey() {
            Object obj = this.key_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.key_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyBytes() {
            Object obj = this.key_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.key_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasValueOld() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getValueOld() {
            Object obj = this.valueOld_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.valueOld_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getValueOldBytes() {
            Object obj = this.valueOld_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.valueOld_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasValueNew() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getValueNew() {
            Object obj = this.valueNew_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.valueNew_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getValueNewBytes() {
            Object obj = this.valueNew_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.valueNew_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasReqId() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getReqId() {
            Object obj = this.reqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.reqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqIdBytes() {
            Object obj = this.reqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.messageId_ = "";
            this.eventId_ = "";
            this.key_ = "";
            this.valueOld_ = "";
            this.valueNew_ = "";
            this.reqId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEventId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasKey()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasValueOld()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasValueNew()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getKeyBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getValueOldBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getValueNewBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getReqIdBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getKeyBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getValueOldBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getValueNewBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getReqIdBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FieldsEditParam parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FieldsEditParam parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FieldsEditParam parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FieldsEditParam parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FieldsEditParam parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FieldsEditParam parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FieldsEditParam parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FieldsEditParam parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FieldsEditParam parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FieldsEditParam parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FieldsEditParam fieldsEditParam) {
            return newBuilder().mergeFrom(fieldsEditParam);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FieldsEditParamOrBuilder extends MessageLiteOrBuilder {
        String getEventId();

        String getKey();

        String getMessageId();

        String getReqId();

        String getSessionId();

        String getValueNew();

        String getValueOld();

        boolean hasEventId();

        boolean hasKey();

        boolean hasMessageId();

        boolean hasReqId();

        boolean hasSessionId();

        boolean hasValueNew();

        boolean hasValueOld();
    }

    public static final class FileFilterSearchResult extends GeneratedMessageLite implements FileFilterSearchResultOrBuilder {
        public static final int FILEID_FIELD_NUMBER = 1;
        public static final int KEYWORD_FIELD_NUMBER = 2;
        public static final int MATCHINFOS_FIELD_NUMBER = 3;
        private static final FileFilterSearchResult defaultInstance = new FileFilterSearchResult(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object fileId_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        /* access modifiers changed from: private */
        public List<FileMatchInfo> matchInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileFilterSearchResult, Builder> implements FileFilterSearchResultOrBuilder {
            private int bitField0_;
            private Object fileId_ = "";
            private Object keyWord_ = "";
            private List<FileMatchInfo> matchInfos_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.fileId_ = "";
                this.bitField0_ &= -2;
                this.keyWord_ = "";
                this.bitField0_ &= -3;
                this.matchInfos_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileFilterSearchResult getDefaultInstanceForType() {
                return FileFilterSearchResult.getDefaultInstance();
            }

            public FileFilterSearchResult build() {
                FileFilterSearchResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileFilterSearchResult buildParsed() throws InvalidProtocolBufferException {
                FileFilterSearchResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileFilterSearchResult buildPartial() {
                FileFilterSearchResult fileFilterSearchResult = new FileFilterSearchResult(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fileFilterSearchResult.fileId_ = this.fileId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fileFilterSearchResult.keyWord_ = this.keyWord_;
                if ((this.bitField0_ & 4) == 4) {
                    this.matchInfos_ = Collections.unmodifiableList(this.matchInfos_);
                    this.bitField0_ &= -5;
                }
                fileFilterSearchResult.matchInfos_ = this.matchInfos_;
                fileFilterSearchResult.bitField0_ = i2;
                return fileFilterSearchResult;
            }

            public Builder mergeFrom(FileFilterSearchResult fileFilterSearchResult) {
                if (fileFilterSearchResult == FileFilterSearchResult.getDefaultInstance()) {
                    return this;
                }
                if (fileFilterSearchResult.hasFileId()) {
                    setFileId(fileFilterSearchResult.getFileId());
                }
                if (fileFilterSearchResult.hasKeyWord()) {
                    setKeyWord(fileFilterSearchResult.getKeyWord());
                }
                if (!fileFilterSearchResult.matchInfos_.isEmpty()) {
                    if (this.matchInfos_.isEmpty()) {
                        this.matchInfos_ = fileFilterSearchResult.matchInfos_;
                        this.bitField0_ &= -5;
                    } else {
                        ensureMatchInfosIsMutable();
                        this.matchInfos_.addAll(fileFilterSearchResult.matchInfos_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasFileId() || !hasKeyWord()) {
                    return false;
                }
                for (int i = 0; i < getMatchInfosCount(); i++) {
                    if (!getMatchInfos(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.fileId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.keyWord_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        Builder newBuilder = FileMatchInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addMatchInfos(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasFileId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getFileId() {
                Object obj = this.fileId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fileId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFileId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.fileId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFileId() {
                this.bitField0_ &= -2;
                this.fileId_ = FileFilterSearchResult.getDefaultInstance().getFileId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFileId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.fileId_ = byteString;
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -3;
                this.keyWord_ = FileFilterSearchResult.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 2;
                this.keyWord_ = byteString;
            }

            private void ensureMatchInfosIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.matchInfos_ = new ArrayList(this.matchInfos_);
                    this.bitField0_ |= 4;
                }
            }

            public List<FileMatchInfo> getMatchInfosList() {
                return Collections.unmodifiableList(this.matchInfos_);
            }

            public int getMatchInfosCount() {
                return this.matchInfos_.size();
            }

            public FileMatchInfo getMatchInfos(int i) {
                return (FileMatchInfo) this.matchInfos_.get(i);
            }

            public Builder setMatchInfos(int i, FileMatchInfo fileMatchInfo) {
                if (fileMatchInfo != null) {
                    ensureMatchInfosIsMutable();
                    this.matchInfos_.set(i, fileMatchInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setMatchInfos(int i, Builder builder) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.set(i, builder.build());
                return this;
            }

            public Builder addMatchInfos(FileMatchInfo fileMatchInfo) {
                if (fileMatchInfo != null) {
                    ensureMatchInfosIsMutable();
                    this.matchInfos_.add(fileMatchInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMatchInfos(int i, FileMatchInfo fileMatchInfo) {
                if (fileMatchInfo != null) {
                    ensureMatchInfosIsMutable();
                    this.matchInfos_.add(i, fileMatchInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMatchInfos(Builder builder) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.add(builder.build());
                return this;
            }

            public Builder addMatchInfos(int i, Builder builder) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.add(i, builder.build());
                return this;
            }

            public Builder addAllMatchInfos(Iterable<? extends FileMatchInfo> iterable) {
                ensureMatchInfosIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.matchInfos_);
                return this;
            }

            public Builder clearMatchInfos() {
                this.matchInfos_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder removeMatchInfos(int i) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.remove(i);
                return this;
            }
        }

        private FileFilterSearchResult(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileFilterSearchResult(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileFilterSearchResult getDefaultInstance() {
            return defaultInstance;
        }

        public FileFilterSearchResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasFileId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getFileId() {
            Object obj = this.fileId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fileId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFileIdBytes() {
            Object obj = this.fileId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fileId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<FileMatchInfo> getMatchInfosList() {
            return this.matchInfos_;
        }

        public List<? extends FileMatchInfoOrBuilder> getMatchInfosOrBuilderList() {
            return this.matchInfos_;
        }

        public int getMatchInfosCount() {
            return this.matchInfos_.size();
        }

        public FileMatchInfo getMatchInfos(int i) {
            return (FileMatchInfo) this.matchInfos_.get(i);
        }

        public FileMatchInfoOrBuilder getMatchInfosOrBuilder(int i) {
            return (FileMatchInfoOrBuilder) this.matchInfos_.get(i);
        }

        private void initFields() {
            this.fileId_ = "";
            this.keyWord_ = "";
            this.matchInfos_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasFileId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getMatchInfosCount(); i++) {
                    if (!getMatchInfos(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getFileIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getKeyWordBytes());
            }
            for (int i = 0; i < this.matchInfos_.size(); i++) {
                codedOutputStream.writeMessage(3, (MessageLite) this.matchInfos_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getFileIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getKeyWordBytes());
            }
            for (int i2 = 0; i2 < this.matchInfos_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(3, (MessageLite) this.matchInfos_.get(i2));
            }
            this.memoizedSerializedSize = computeBytesSize;
            return computeBytesSize;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileFilterSearchResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileFilterSearchResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileFilterSearchResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileFilterSearchResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileFilterSearchResult parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileFilterSearchResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileFilterSearchResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileFilterSearchResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileFilterSearchResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileFilterSearchResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileFilterSearchResult fileFilterSearchResult) {
            return newBuilder().mergeFrom(fileFilterSearchResult);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileFilterSearchResultOrBuilder extends MessageLiteOrBuilder {
        String getFileId();

        String getKeyWord();

        FileMatchInfo getMatchInfos(int i);

        int getMatchInfosCount();

        List<FileMatchInfo> getMatchInfosList();

        boolean hasFileId();

        boolean hasKeyWord();
    }

    public static final class FileFilterSearchResults extends GeneratedMessageLite implements FileFilterSearchResultsOrBuilder {
        public static final int SEARCHRESULT_FIELD_NUMBER = 1;
        public static final int _HAS_MORE_MY_NOTES_FIELD_NUMBER = 3;
        public static final int _TOTAL_SIZE_FIELD_NUMBER = 2;
        private static final FileFilterSearchResults defaultInstance = new FileFilterSearchResults(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public boolean HasMoreMyNotes_;
        /* access modifiers changed from: private */
        public long TotalSize_;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<FileFilterSearchResult> searchResult_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileFilterSearchResults, Builder> implements FileFilterSearchResultsOrBuilder {
            private boolean HasMoreMyNotes_;
            private long TotalSize_;
            private int bitField0_;
            private List<FileFilterSearchResult> searchResult_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.searchResult_ = Collections.emptyList();
                this.bitField0_ &= -2;
                this.TotalSize_ = 0;
                this.bitField0_ &= -3;
                this.HasMoreMyNotes_ = false;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileFilterSearchResults getDefaultInstanceForType() {
                return FileFilterSearchResults.getDefaultInstance();
            }

            public FileFilterSearchResults build() {
                FileFilterSearchResults buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileFilterSearchResults buildParsed() throws InvalidProtocolBufferException {
                FileFilterSearchResults buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileFilterSearchResults buildPartial() {
                FileFilterSearchResults fileFilterSearchResults = new FileFilterSearchResults(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) == 1) {
                    this.searchResult_ = Collections.unmodifiableList(this.searchResult_);
                    this.bitField0_ &= -2;
                }
                fileFilterSearchResults.searchResult_ = this.searchResult_;
                if ((i & 2) != 2) {
                    i2 = 0;
                }
                fileFilterSearchResults.TotalSize_ = this.TotalSize_;
                if ((i & 4) == 4) {
                    i2 |= 2;
                }
                fileFilterSearchResults.HasMoreMyNotes_ = this.HasMoreMyNotes_;
                fileFilterSearchResults.bitField0_ = i2;
                return fileFilterSearchResults;
            }

            public Builder mergeFrom(FileFilterSearchResults fileFilterSearchResults) {
                if (fileFilterSearchResults == FileFilterSearchResults.getDefaultInstance()) {
                    return this;
                }
                if (!fileFilterSearchResults.searchResult_.isEmpty()) {
                    if (this.searchResult_.isEmpty()) {
                        this.searchResult_ = fileFilterSearchResults.searchResult_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureSearchResultIsMutable();
                        this.searchResult_.addAll(fileFilterSearchResults.searchResult_);
                    }
                }
                if (fileFilterSearchResults.hasTotalSize()) {
                    setTotalSize(fileFilterSearchResults.getTotalSize());
                }
                if (fileFilterSearchResults.hasHasMoreMyNotes()) {
                    setHasMoreMyNotes(fileFilterSearchResults.getHasMoreMyNotes());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasTotalSize() || !hasHasMoreMyNotes()) {
                    return false;
                }
                for (int i = 0; i < getSearchResultCount(); i++) {
                    if (!getSearchResult(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = FileFilterSearchResult.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addSearchResult(newBuilder.buildPartial());
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.TotalSize_ = codedInputStream.readInt64();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.HasMoreMyNotes_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureSearchResultIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.searchResult_ = new ArrayList(this.searchResult_);
                    this.bitField0_ |= 1;
                }
            }

            public List<FileFilterSearchResult> getSearchResultList() {
                return Collections.unmodifiableList(this.searchResult_);
            }

            public int getSearchResultCount() {
                return this.searchResult_.size();
            }

            public FileFilterSearchResult getSearchResult(int i) {
                return (FileFilterSearchResult) this.searchResult_.get(i);
            }

            public Builder setSearchResult(int i, FileFilterSearchResult fileFilterSearchResult) {
                if (fileFilterSearchResult != null) {
                    ensureSearchResultIsMutable();
                    this.searchResult_.set(i, fileFilterSearchResult);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setSearchResult(int i, Builder builder) {
                ensureSearchResultIsMutable();
                this.searchResult_.set(i, builder.build());
                return this;
            }

            public Builder addSearchResult(FileFilterSearchResult fileFilterSearchResult) {
                if (fileFilterSearchResult != null) {
                    ensureSearchResultIsMutable();
                    this.searchResult_.add(fileFilterSearchResult);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSearchResult(int i, FileFilterSearchResult fileFilterSearchResult) {
                if (fileFilterSearchResult != null) {
                    ensureSearchResultIsMutable();
                    this.searchResult_.add(i, fileFilterSearchResult);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSearchResult(Builder builder) {
                ensureSearchResultIsMutable();
                this.searchResult_.add(builder.build());
                return this;
            }

            public Builder addSearchResult(int i, Builder builder) {
                ensureSearchResultIsMutable();
                this.searchResult_.add(i, builder.build());
                return this;
            }

            public Builder addAllSearchResult(Iterable<? extends FileFilterSearchResult> iterable) {
                ensureSearchResultIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.searchResult_);
                return this;
            }

            public Builder clearSearchResult() {
                this.searchResult_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeSearchResult(int i) {
                ensureSearchResultIsMutable();
                this.searchResult_.remove(i);
                return this;
            }

            public boolean hasTotalSize() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getTotalSize() {
                return this.TotalSize_;
            }

            public Builder setTotalSize(long j) {
                this.bitField0_ |= 2;
                this.TotalSize_ = j;
                return this;
            }

            public Builder clearTotalSize() {
                this.bitField0_ &= -3;
                this.TotalSize_ = 0;
                return this;
            }

            public boolean hasHasMoreMyNotes() {
                return (this.bitField0_ & 4) == 4;
            }

            public boolean getHasMoreMyNotes() {
                return this.HasMoreMyNotes_;
            }

            public Builder setHasMoreMyNotes(boolean z) {
                this.bitField0_ |= 4;
                this.HasMoreMyNotes_ = z;
                return this;
            }

            public Builder clearHasMoreMyNotes() {
                this.bitField0_ &= -5;
                this.HasMoreMyNotes_ = false;
                return this;
            }
        }

        private FileFilterSearchResults(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileFilterSearchResults(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileFilterSearchResults getDefaultInstance() {
            return defaultInstance;
        }

        public FileFilterSearchResults getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<FileFilterSearchResult> getSearchResultList() {
            return this.searchResult_;
        }

        public List<? extends FileFilterSearchResultOrBuilder> getSearchResultOrBuilderList() {
            return this.searchResult_;
        }

        public int getSearchResultCount() {
            return this.searchResult_.size();
        }

        public FileFilterSearchResult getSearchResult(int i) {
            return (FileFilterSearchResult) this.searchResult_.get(i);
        }

        public FileFilterSearchResultOrBuilder getSearchResultOrBuilder(int i) {
            return (FileFilterSearchResultOrBuilder) this.searchResult_.get(i);
        }

        public boolean hasTotalSize() {
            return (this.bitField0_ & 1) == 1;
        }

        public long getTotalSize() {
            return this.TotalSize_;
        }

        public boolean hasHasMoreMyNotes() {
            return (this.bitField0_ & 2) == 2;
        }

        public boolean getHasMoreMyNotes() {
            return this.HasMoreMyNotes_;
        }

        private void initFields() {
            this.searchResult_ = Collections.emptyList();
            this.TotalSize_ = 0;
            this.HasMoreMyNotes_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasTotalSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasHasMoreMyNotes()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getSearchResultCount(); i++) {
                    if (!getSearchResult(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.searchResult_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.searchResult_.get(i));
            }
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt64(2, this.TotalSize_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBool(3, this.HasMoreMyNotes_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.searchResult_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.searchResult_.get(i3));
            }
            if ((this.bitField0_ & 1) == 1) {
                i2 += CodedOutputStream.computeInt64Size(2, this.TotalSize_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBoolSize(3, this.HasMoreMyNotes_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileFilterSearchResults parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileFilterSearchResults parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileFilterSearchResults parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileFilterSearchResults parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileFilterSearchResults parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileFilterSearchResults parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileFilterSearchResults parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileFilterSearchResults parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileFilterSearchResults parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileFilterSearchResults parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileFilterSearchResults fileFilterSearchResults) {
            return newBuilder().mergeFrom(fileFilterSearchResults);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileFilterSearchResultsOrBuilder extends MessageLiteOrBuilder {
        boolean getHasMoreMyNotes();

        FileFilterSearchResult getSearchResult(int i);

        int getSearchResultCount();

        List<FileFilterSearchResult> getSearchResultList();

        long getTotalSize();

        boolean hasHasMoreMyNotes();

        boolean hasTotalSize();
    }

    public static final class FileIntegrationData extends GeneratedMessageLite implements FileIntegrationDataOrBuilder {
        public static final int ICONURL_FIELD_NUMBER = 3;
        public static final int NAME_FIELD_NUMBER = 2;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final FileIntegrationData defaultInstance = new FileIntegrationData(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object iconUrl_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object name_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileIntegrationData, Builder> implements FileIntegrationDataOrBuilder {
            private int bitField0_;
            private Object iconUrl_ = "";
            private Object name_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.type_ = 0;
                this.bitField0_ &= -2;
                this.name_ = "";
                this.bitField0_ &= -3;
                this.iconUrl_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileIntegrationData getDefaultInstanceForType() {
                return FileIntegrationData.getDefaultInstance();
            }

            public FileIntegrationData build() {
                FileIntegrationData buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileIntegrationData buildParsed() throws InvalidProtocolBufferException {
                FileIntegrationData buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileIntegrationData buildPartial() {
                FileIntegrationData fileIntegrationData = new FileIntegrationData(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fileIntegrationData.type_ = this.type_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fileIntegrationData.name_ = this.name_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                fileIntegrationData.iconUrl_ = this.iconUrl_;
                fileIntegrationData.bitField0_ = i2;
                return fileIntegrationData;
            }

            public Builder mergeFrom(FileIntegrationData fileIntegrationData) {
                if (fileIntegrationData == FileIntegrationData.getDefaultInstance()) {
                    return this;
                }
                if (fileIntegrationData.hasType()) {
                    setType(fileIntegrationData.getType());
                }
                if (fileIntegrationData.hasName()) {
                    setName(fileIntegrationData.getName());
                }
                if (fileIntegrationData.hasIconUrl()) {
                    setIconUrl(fileIntegrationData.getIconUrl());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasType() && hasName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.name_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.iconUrl_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasType() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 1;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -2;
                this.type_ = 0;
                return this;
            }

            public boolean hasName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.name_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearName() {
                this.bitField0_ &= -3;
                this.name_ = FileIntegrationData.getDefaultInstance().getName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.name_ = byteString;
            }

            public boolean hasIconUrl() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getIconUrl() {
                Object obj = this.iconUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.iconUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setIconUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.iconUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearIconUrl() {
                this.bitField0_ &= -5;
                this.iconUrl_ = FileIntegrationData.getDefaultInstance().getIconUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setIconUrl(ByteString byteString) {
                this.bitField0_ |= 4;
                this.iconUrl_ = byteString;
            }
        }

        private FileIntegrationData(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileIntegrationData(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileIntegrationData getDefaultInstance() {
            return defaultInstance;
        }

        public FileIntegrationData getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasType() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIconUrl() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getIconUrl() {
            Object obj = this.iconUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.iconUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getIconUrlBytes() {
            Object obj = this.iconUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.iconUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.type_ = 0;
            this.name_ = "";
            this.iconUrl_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.type_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getIconUrlBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.type_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getIconUrlBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileIntegrationData parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileIntegrationData parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrationData parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileIntegrationData parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrationData parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileIntegrationData parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrationData parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileIntegrationData parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileIntegrationData parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileIntegrationData parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileIntegrationData fileIntegrationData) {
            return newBuilder().mergeFrom(fileIntegrationData);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileIntegrationDataOrBuilder extends MessageLiteOrBuilder {
        String getIconUrl();

        String getName();

        int getType();

        boolean hasIconUrl();

        boolean hasName();

        boolean hasType();
    }

    public static final class FileIntegrationInfo extends GeneratedMessageLite implements FileIntegrationInfoOrBuilder {
        public static final int DOWNLOADURL_FIELD_NUMBER = 6;
        public static final int FILENAME_FIELD_NUMBER = 4;
        public static final int FILESIZE_FIELD_NUMBER = 3;
        public static final int ID_FIELD_NUMBER = 1;
        public static final int PREVIEWURL_FIELD_NUMBER = 5;
        public static final int THUMBNAILURL_FIELD_NUMBER = 7;
        public static final int TYPE_FIELD_NUMBER = 2;
        private static final FileIntegrationInfo defaultInstance = new FileIntegrationInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object downloadUrl_;
        /* access modifiers changed from: private */
        public Object fileName_;
        /* access modifiers changed from: private */
        public long fileSize_;
        /* access modifiers changed from: private */
        public Object id_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object previewUrl_;
        /* access modifiers changed from: private */
        public Object thumbnailUrl_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileIntegrationInfo, Builder> implements FileIntegrationInfoOrBuilder {
            private int bitField0_;
            private Object downloadUrl_ = "";
            private Object fileName_ = "";
            private long fileSize_;
            private Object id_ = "";
            private Object previewUrl_ = "";
            private Object thumbnailUrl_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= -2;
                this.type_ = 0;
                this.bitField0_ &= -3;
                this.fileSize_ = 0;
                this.bitField0_ &= -5;
                this.fileName_ = "";
                this.bitField0_ &= -9;
                this.previewUrl_ = "";
                this.bitField0_ &= -17;
                this.downloadUrl_ = "";
                this.bitField0_ &= -33;
                this.thumbnailUrl_ = "";
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileIntegrationInfo getDefaultInstanceForType() {
                return FileIntegrationInfo.getDefaultInstance();
            }

            public FileIntegrationInfo build() {
                FileIntegrationInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileIntegrationInfo buildParsed() throws InvalidProtocolBufferException {
                FileIntegrationInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileIntegrationInfo buildPartial() {
                FileIntegrationInfo fileIntegrationInfo = new FileIntegrationInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fileIntegrationInfo.id_ = this.id_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fileIntegrationInfo.type_ = this.type_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                fileIntegrationInfo.fileSize_ = this.fileSize_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                fileIntegrationInfo.fileName_ = this.fileName_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                fileIntegrationInfo.previewUrl_ = this.previewUrl_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                fileIntegrationInfo.downloadUrl_ = this.downloadUrl_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                fileIntegrationInfo.thumbnailUrl_ = this.thumbnailUrl_;
                fileIntegrationInfo.bitField0_ = i2;
                return fileIntegrationInfo;
            }

            public Builder mergeFrom(FileIntegrationInfo fileIntegrationInfo) {
                if (fileIntegrationInfo == FileIntegrationInfo.getDefaultInstance()) {
                    return this;
                }
                if (fileIntegrationInfo.hasId()) {
                    setId(fileIntegrationInfo.getId());
                }
                if (fileIntegrationInfo.hasType()) {
                    setType(fileIntegrationInfo.getType());
                }
                if (fileIntegrationInfo.hasFileSize()) {
                    setFileSize(fileIntegrationInfo.getFileSize());
                }
                if (fileIntegrationInfo.hasFileName()) {
                    setFileName(fileIntegrationInfo.getFileName());
                }
                if (fileIntegrationInfo.hasPreviewUrl()) {
                    setPreviewUrl(fileIntegrationInfo.getPreviewUrl());
                }
                if (fileIntegrationInfo.hasDownloadUrl()) {
                    setDownloadUrl(fileIntegrationInfo.getDownloadUrl());
                }
                if (fileIntegrationInfo.hasThumbnailUrl()) {
                    setThumbnailUrl(fileIntegrationInfo.getThumbnailUrl());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasId() && hasType() && hasFileSize() && hasFileName() && hasPreviewUrl()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.id_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.fileSize_ = codedInputStream.readInt64();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.fileName_ = codedInputStream.readBytes();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.previewUrl_ = codedInputStream.readBytes();
                    } else if (readTag == 50) {
                        this.bitField0_ |= 32;
                        this.downloadUrl_ = codedInputStream.readBytes();
                    } else if (readTag == 58) {
                        this.bitField0_ |= 64;
                        this.thumbnailUrl_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getId() {
                Object obj = this.id_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.id_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.id_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearId() {
                this.bitField0_ &= -2;
                this.id_ = FileIntegrationInfo.getDefaultInstance().getId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.id_ = byteString;
            }

            public boolean hasType() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 2;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -3;
                this.type_ = 0;
                return this;
            }

            public boolean hasFileSize() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getFileSize() {
                return this.fileSize_;
            }

            public Builder setFileSize(long j) {
                this.bitField0_ |= 4;
                this.fileSize_ = j;
                return this;
            }

            public Builder clearFileSize() {
                this.bitField0_ &= -5;
                this.fileSize_ = 0;
                return this;
            }

            public boolean hasFileName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getFileName() {
                Object obj = this.fileName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fileName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFileName(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.fileName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFileName() {
                this.bitField0_ &= -9;
                this.fileName_ = FileIntegrationInfo.getDefaultInstance().getFileName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFileName(ByteString byteString) {
                this.bitField0_ |= 8;
                this.fileName_ = byteString;
            }

            public boolean hasPreviewUrl() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getPreviewUrl() {
                Object obj = this.previewUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.previewUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setPreviewUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.previewUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearPreviewUrl() {
                this.bitField0_ &= -17;
                this.previewUrl_ = FileIntegrationInfo.getDefaultInstance().getPreviewUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setPreviewUrl(ByteString byteString) {
                this.bitField0_ |= 16;
                this.previewUrl_ = byteString;
            }

            public boolean hasDownloadUrl() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getDownloadUrl() {
                Object obj = this.downloadUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.downloadUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setDownloadUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.downloadUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearDownloadUrl() {
                this.bitField0_ &= -33;
                this.downloadUrl_ = FileIntegrationInfo.getDefaultInstance().getDownloadUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setDownloadUrl(ByteString byteString) {
                this.bitField0_ |= 32;
                this.downloadUrl_ = byteString;
            }

            public boolean hasThumbnailUrl() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getThumbnailUrl() {
                Object obj = this.thumbnailUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.thumbnailUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setThumbnailUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.thumbnailUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearThumbnailUrl() {
                this.bitField0_ &= -65;
                this.thumbnailUrl_ = FileIntegrationInfo.getDefaultInstance().getThumbnailUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setThumbnailUrl(ByteString byteString) {
                this.bitField0_ |= 64;
                this.thumbnailUrl_ = byteString;
            }
        }

        private FileIntegrationInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileIntegrationInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileIntegrationInfo getDefaultInstance() {
            return defaultInstance;
        }

        public FileIntegrationInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getId() {
            Object obj = this.id_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.id_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getIdBytes() {
            Object obj = this.id_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.id_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasType() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasFileSize() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getFileSize() {
            return this.fileSize_;
        }

        public boolean hasFileName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getFileName() {
            Object obj = this.fileName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fileName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFileNameBytes() {
            Object obj = this.fileName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fileName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPreviewUrl() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getPreviewUrl() {
            Object obj = this.previewUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.previewUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getPreviewUrlBytes() {
            Object obj = this.previewUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.previewUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasDownloadUrl() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getDownloadUrl() {
            Object obj = this.downloadUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.downloadUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getDownloadUrlBytes() {
            Object obj = this.downloadUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.downloadUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThumbnailUrl() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getThumbnailUrl() {
            Object obj = this.thumbnailUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.thumbnailUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getThumbnailUrlBytes() {
            Object obj = this.thumbnailUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.thumbnailUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.id_ = "";
            this.type_ = 0;
            this.fileSize_ = 0;
            this.fileName_ = "";
            this.previewUrl_ = "";
            this.downloadUrl_ = "";
            this.thumbnailUrl_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFileSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFileName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPreviewUrl()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.type_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.fileSize_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getFileNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getPreviewUrlBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getDownloadUrlBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getThumbnailUrlBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.type_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt64Size(3, this.fileSize_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getFileNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getPreviewUrlBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getDownloadUrlBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getThumbnailUrlBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileIntegrationInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileIntegrationInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrationInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileIntegrationInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrationInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileIntegrationInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrationInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileIntegrationInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileIntegrationInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileIntegrationInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileIntegrationInfo fileIntegrationInfo) {
            return newBuilder().mergeFrom(fileIntegrationInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileIntegrationInfoOrBuilder extends MessageLiteOrBuilder {
        String getDownloadUrl();

        String getFileName();

        long getFileSize();

        String getId();

        String getPreviewUrl();

        String getThumbnailUrl();

        int getType();

        boolean hasDownloadUrl();

        boolean hasFileName();

        boolean hasFileSize();

        boolean hasId();

        boolean hasPreviewUrl();

        boolean hasThumbnailUrl();

        boolean hasType();
    }

    public static final class FileIntegrations extends GeneratedMessageLite implements FileIntegrationsOrBuilder {
        public static final int DATA_FIELD_NUMBER = 1;
        private static final FileIntegrations defaultInstance = new FileIntegrations(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<FileIntegrationData> data_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileIntegrations, Builder> implements FileIntegrationsOrBuilder {
            private int bitField0_;
            private List<FileIntegrationData> data_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.data_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileIntegrations getDefaultInstanceForType() {
                return FileIntegrations.getDefaultInstance();
            }

            public FileIntegrations build() {
                FileIntegrations buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileIntegrations buildParsed() throws InvalidProtocolBufferException {
                FileIntegrations buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileIntegrations buildPartial() {
                FileIntegrations fileIntegrations = new FileIntegrations(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.data_ = Collections.unmodifiableList(this.data_);
                    this.bitField0_ &= -2;
                }
                fileIntegrations.data_ = this.data_;
                return fileIntegrations;
            }

            public Builder mergeFrom(FileIntegrations fileIntegrations) {
                if (fileIntegrations != FileIntegrations.getDefaultInstance() && !fileIntegrations.data_.isEmpty()) {
                    if (this.data_.isEmpty()) {
                        this.data_ = fileIntegrations.data_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureDataIsMutable();
                        this.data_.addAll(fileIntegrations.data_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getDataCount(); i++) {
                    if (!getData(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = FileIntegrationData.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addData(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureDataIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.data_ = new ArrayList(this.data_);
                    this.bitField0_ |= 1;
                }
            }

            public List<FileIntegrationData> getDataList() {
                return Collections.unmodifiableList(this.data_);
            }

            public int getDataCount() {
                return this.data_.size();
            }

            public FileIntegrationData getData(int i) {
                return (FileIntegrationData) this.data_.get(i);
            }

            public Builder setData(int i, FileIntegrationData fileIntegrationData) {
                if (fileIntegrationData != null) {
                    ensureDataIsMutable();
                    this.data_.set(i, fileIntegrationData);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setData(int i, Builder builder) {
                ensureDataIsMutable();
                this.data_.set(i, builder.build());
                return this;
            }

            public Builder addData(FileIntegrationData fileIntegrationData) {
                if (fileIntegrationData != null) {
                    ensureDataIsMutable();
                    this.data_.add(fileIntegrationData);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addData(int i, FileIntegrationData fileIntegrationData) {
                if (fileIntegrationData != null) {
                    ensureDataIsMutable();
                    this.data_.add(i, fileIntegrationData);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addData(Builder builder) {
                ensureDataIsMutable();
                this.data_.add(builder.build());
                return this;
            }

            public Builder addData(int i, Builder builder) {
                ensureDataIsMutable();
                this.data_.add(i, builder.build());
                return this;
            }

            public Builder addAllData(Iterable<? extends FileIntegrationData> iterable) {
                ensureDataIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.data_);
                return this;
            }

            public Builder clearData() {
                this.data_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeData(int i) {
                ensureDataIsMutable();
                this.data_.remove(i);
                return this;
            }
        }

        private FileIntegrations(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileIntegrations(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileIntegrations getDefaultInstance() {
            return defaultInstance;
        }

        public FileIntegrations getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<FileIntegrationData> getDataList() {
            return this.data_;
        }

        public List<? extends FileIntegrationDataOrBuilder> getDataOrBuilderList() {
            return this.data_;
        }

        public int getDataCount() {
            return this.data_.size();
        }

        public FileIntegrationData getData(int i) {
            return (FileIntegrationData) this.data_.get(i);
        }

        public FileIntegrationDataOrBuilder getDataOrBuilder(int i) {
            return (FileIntegrationDataOrBuilder) this.data_.get(i);
        }

        private void initFields() {
            this.data_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getDataCount(); i++) {
                if (!getData(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.data_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.data_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.data_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.data_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileIntegrations parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileIntegrations parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrations parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileIntegrations parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrations parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileIntegrations parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileIntegrations parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileIntegrations parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileIntegrations parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileIntegrations parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileIntegrations fileIntegrations) {
            return newBuilder().mergeFrom(fileIntegrations);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileIntegrationsOrBuilder extends MessageLiteOrBuilder {
        FileIntegrationData getData(int i);

        int getDataCount();

        List<FileIntegrationData> getDataList();
    }

    public static final class FileMatchInfo extends GeneratedMessageLite implements FileMatchInfoOrBuilder {
        public static final int CONTENT_FIELD_NUMBER = 2;
        public static final int HIGHLIGHTTYPE_FIELD_NUMBER = 4;
        public static final int MATCHINFOS_FIELD_NUMBER = 3;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final FileMatchInfo defaultInstance = new FileMatchInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object content_;
        /* access modifiers changed from: private */
        public int highlightType_;
        /* access modifiers changed from: private */
        public List<HighlightPositionItem> matchInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileMatchInfo, Builder> implements FileMatchInfoOrBuilder {
            private int bitField0_;
            private Object content_ = "";
            private int highlightType_;
            private List<HighlightPositionItem> matchInfos_ = Collections.emptyList();
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.type_ = 0;
                this.bitField0_ &= -2;
                this.content_ = "";
                this.bitField0_ &= -3;
                this.matchInfos_ = Collections.emptyList();
                this.bitField0_ &= -5;
                this.highlightType_ = 0;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileMatchInfo getDefaultInstanceForType() {
                return FileMatchInfo.getDefaultInstance();
            }

            public FileMatchInfo build() {
                FileMatchInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileMatchInfo buildParsed() throws InvalidProtocolBufferException {
                FileMatchInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileMatchInfo buildPartial() {
                FileMatchInfo fileMatchInfo = new FileMatchInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fileMatchInfo.type_ = this.type_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fileMatchInfo.content_ = this.content_;
                if ((this.bitField0_ & 4) == 4) {
                    this.matchInfos_ = Collections.unmodifiableList(this.matchInfos_);
                    this.bitField0_ &= -5;
                }
                fileMatchInfo.matchInfos_ = this.matchInfos_;
                if ((i & 8) == 8) {
                    i2 |= 4;
                }
                fileMatchInfo.highlightType_ = this.highlightType_;
                fileMatchInfo.bitField0_ = i2;
                return fileMatchInfo;
            }

            public Builder mergeFrom(FileMatchInfo fileMatchInfo) {
                if (fileMatchInfo == FileMatchInfo.getDefaultInstance()) {
                    return this;
                }
                if (fileMatchInfo.hasType()) {
                    setType(fileMatchInfo.getType());
                }
                if (fileMatchInfo.hasContent()) {
                    setContent(fileMatchInfo.getContent());
                }
                if (!fileMatchInfo.matchInfos_.isEmpty()) {
                    if (this.matchInfos_.isEmpty()) {
                        this.matchInfos_ = fileMatchInfo.matchInfos_;
                        this.bitField0_ &= -5;
                    } else {
                        ensureMatchInfosIsMutable();
                        this.matchInfos_.addAll(fileMatchInfo.matchInfos_);
                    }
                }
                if (fileMatchInfo.hasHighlightType()) {
                    setHighlightType(fileMatchInfo.getHighlightType());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasType() || !hasContent()) {
                    return false;
                }
                for (int i = 0; i < getMatchInfosCount(); i++) {
                    if (!getMatchInfos(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.content_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        Builder newBuilder = HighlightPositionItem.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addMatchInfos(newBuilder.buildPartial());
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.highlightType_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasType() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 1;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -2;
                this.type_ = 0;
                return this;
            }

            public boolean hasContent() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getContent() {
                Object obj = this.content_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.content_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setContent(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.content_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearContent() {
                this.bitField0_ &= -3;
                this.content_ = FileMatchInfo.getDefaultInstance().getContent();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setContent(ByteString byteString) {
                this.bitField0_ |= 2;
                this.content_ = byteString;
            }

            private void ensureMatchInfosIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.matchInfos_ = new ArrayList(this.matchInfos_);
                    this.bitField0_ |= 4;
                }
            }

            public List<HighlightPositionItem> getMatchInfosList() {
                return Collections.unmodifiableList(this.matchInfos_);
            }

            public int getMatchInfosCount() {
                return this.matchInfos_.size();
            }

            public HighlightPositionItem getMatchInfos(int i) {
                return (HighlightPositionItem) this.matchInfos_.get(i);
            }

            public Builder setMatchInfos(int i, HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem != null) {
                    ensureMatchInfosIsMutable();
                    this.matchInfos_.set(i, highlightPositionItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setMatchInfos(int i, Builder builder) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.set(i, builder.build());
                return this;
            }

            public Builder addMatchInfos(HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem != null) {
                    ensureMatchInfosIsMutable();
                    this.matchInfos_.add(highlightPositionItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMatchInfos(int i, HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem != null) {
                    ensureMatchInfosIsMutable();
                    this.matchInfos_.add(i, highlightPositionItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMatchInfos(Builder builder) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.add(builder.build());
                return this;
            }

            public Builder addMatchInfos(int i, Builder builder) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.add(i, builder.build());
                return this;
            }

            public Builder addAllMatchInfos(Iterable<? extends HighlightPositionItem> iterable) {
                ensureMatchInfosIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.matchInfos_);
                return this;
            }

            public Builder clearMatchInfos() {
                this.matchInfos_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder removeMatchInfos(int i) {
                ensureMatchInfosIsMutable();
                this.matchInfos_.remove(i);
                return this;
            }

            public boolean hasHighlightType() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getHighlightType() {
                return this.highlightType_;
            }

            public Builder setHighlightType(int i) {
                this.bitField0_ |= 8;
                this.highlightType_ = i;
                return this;
            }

            public Builder clearHighlightType() {
                this.bitField0_ &= -9;
                this.highlightType_ = 0;
                return this;
            }
        }

        private FileMatchInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileMatchInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileMatchInfo getDefaultInstance() {
            return defaultInstance;
        }

        public FileMatchInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasType() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasContent() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getContent() {
            Object obj = this.content_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.content_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getContentBytes() {
            Object obj = this.content_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.content_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<HighlightPositionItem> getMatchInfosList() {
            return this.matchInfos_;
        }

        public List<? extends HighlightPositionItemOrBuilder> getMatchInfosOrBuilderList() {
            return this.matchInfos_;
        }

        public int getMatchInfosCount() {
            return this.matchInfos_.size();
        }

        public HighlightPositionItem getMatchInfos(int i) {
            return (HighlightPositionItem) this.matchInfos_.get(i);
        }

        public HighlightPositionItemOrBuilder getMatchInfosOrBuilder(int i) {
            return (HighlightPositionItemOrBuilder) this.matchInfos_.get(i);
        }

        public boolean hasHighlightType() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getHighlightType() {
            return this.highlightType_;
        }

        private void initFields() {
            this.type_ = 0;
            this.content_ = "";
            this.matchInfos_ = Collections.emptyList();
            this.highlightType_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasContent()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getMatchInfosCount(); i++) {
                    if (!getMatchInfos(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.type_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getContentBytes());
            }
            for (int i = 0; i < this.matchInfos_.size(); i++) {
                codedOutputStream.writeMessage(3, (MessageLite) this.matchInfos_.get(i));
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(4, this.highlightType_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.type_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(2, getContentBytes());
            }
            for (int i2 = 0; i2 < this.matchInfos_.size(); i2++) {
                computeInt32Size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.matchInfos_.get(i2));
            }
            if ((this.bitField0_ & 4) == 4) {
                computeInt32Size += CodedOutputStream.computeInt32Size(4, this.highlightType_);
            }
            this.memoizedSerializedSize = computeInt32Size;
            return computeInt32Size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileMatchInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileMatchInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileMatchInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileMatchInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileMatchInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileMatchInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileMatchInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileMatchInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileMatchInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileMatchInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileMatchInfo fileMatchInfo) {
            return newBuilder().mergeFrom(fileMatchInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileMatchInfoOrBuilder extends MessageLiteOrBuilder {
        String getContent();

        int getHighlightType();

        HighlightPositionItem getMatchInfos(int i);

        int getMatchInfosCount();

        List<HighlightPositionItem> getMatchInfosList();

        int getType();

        boolean hasContent();

        boolean hasHighlightType();

        boolean hasType();
    }

    public static final class FileSearchFilter extends GeneratedMessageLite implements FileSearchFilterOrBuilder {
        public static final int KEYWORD_FIELD_NUMBER = 3;
        public static final int ONLYP2P_FIELD_NUMBER = 7;
        public static final int ONLYSEARCHIMG_FIELD_NUMBER = 6;
        public static final int PAGENUM_FIELD_NUMBER = 5;
        public static final int PAGESIZE_FIELD_NUMBER = 4;
        public static final int SENDBY_ID_FIELD_NUMBER = 9;
        public static final int SENDERJID_FIELD_NUMBER = 2;
        public static final int SESSIONID_FIELD_NUMBER = 1;
        public static final int TYPE_FIELD_NUMBER = 8;
        private static final FileSearchFilter defaultInstance = new FileSearchFilter(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public boolean onlyP2P_;
        /* access modifiers changed from: private */
        public boolean onlySearchImg_;
        /* access modifiers changed from: private */
        public int pageNum_;
        /* access modifiers changed from: private */
        public int pageSize_;
        /* access modifiers changed from: private */
        public Object sendbyId_;
        /* access modifiers changed from: private */
        public Object senderJid_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FileSearchFilter, Builder> implements FileSearchFilterOrBuilder {
            private int bitField0_;
            private Object keyWord_ = "";
            private boolean onlyP2P_;
            private boolean onlySearchImg_;
            private int pageNum_;
            private int pageSize_;
            private Object sendbyId_ = "";
            private Object senderJid_ = "";
            private Object sessionId_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.senderJid_ = "";
                this.bitField0_ &= -3;
                this.keyWord_ = "";
                this.bitField0_ &= -5;
                this.pageSize_ = 0;
                this.bitField0_ &= -9;
                this.pageNum_ = 0;
                this.bitField0_ &= -17;
                this.onlySearchImg_ = false;
                this.bitField0_ &= -33;
                this.onlyP2P_ = false;
                this.bitField0_ &= -65;
                this.type_ = 0;
                this.bitField0_ &= -129;
                this.sendbyId_ = "";
                this.bitField0_ &= -257;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FileSearchFilter getDefaultInstanceForType() {
                return FileSearchFilter.getDefaultInstance();
            }

            public FileSearchFilter build() {
                FileSearchFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FileSearchFilter buildParsed() throws InvalidProtocolBufferException {
                FileSearchFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FileSearchFilter buildPartial() {
                FileSearchFilter fileSearchFilter = new FileSearchFilter(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fileSearchFilter.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fileSearchFilter.senderJid_ = this.senderJid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                fileSearchFilter.keyWord_ = this.keyWord_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                fileSearchFilter.pageSize_ = this.pageSize_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                fileSearchFilter.pageNum_ = this.pageNum_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                fileSearchFilter.onlySearchImg_ = this.onlySearchImg_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                fileSearchFilter.onlyP2P_ = this.onlyP2P_;
                if ((i & 128) == 128) {
                    i2 |= 128;
                }
                fileSearchFilter.type_ = this.type_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                fileSearchFilter.sendbyId_ = this.sendbyId_;
                fileSearchFilter.bitField0_ = i2;
                return fileSearchFilter;
            }

            public Builder mergeFrom(FileSearchFilter fileSearchFilter) {
                if (fileSearchFilter == FileSearchFilter.getDefaultInstance()) {
                    return this;
                }
                if (fileSearchFilter.hasSessionId()) {
                    setSessionId(fileSearchFilter.getSessionId());
                }
                if (fileSearchFilter.hasSenderJid()) {
                    setSenderJid(fileSearchFilter.getSenderJid());
                }
                if (fileSearchFilter.hasKeyWord()) {
                    setKeyWord(fileSearchFilter.getKeyWord());
                }
                if (fileSearchFilter.hasPageSize()) {
                    setPageSize(fileSearchFilter.getPageSize());
                }
                if (fileSearchFilter.hasPageNum()) {
                    setPageNum(fileSearchFilter.getPageNum());
                }
                if (fileSearchFilter.hasOnlySearchImg()) {
                    setOnlySearchImg(fileSearchFilter.getOnlySearchImg());
                }
                if (fileSearchFilter.hasOnlyP2P()) {
                    setOnlyP2P(fileSearchFilter.getOnlyP2P());
                }
                if (fileSearchFilter.hasType()) {
                    setType(fileSearchFilter.getType());
                }
                if (fileSearchFilter.hasSendbyId()) {
                    setSendbyId(fileSearchFilter.getSendbyId());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasKeyWord() && hasPageSize() && hasPageNum() && hasType()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.senderJid_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.keyWord_ = codedInputStream.readBytes();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.pageSize_ = codedInputStream.readInt32();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.pageNum_ = codedInputStream.readInt32();
                    } else if (readTag == 48) {
                        this.bitField0_ |= 32;
                        this.onlySearchImg_ = codedInputStream.readBool();
                    } else if (readTag == 56) {
                        this.bitField0_ |= 64;
                        this.onlyP2P_ = codedInputStream.readBool();
                    } else if (readTag == 64) {
                        this.bitField0_ |= 128;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 74) {
                        this.bitField0_ |= 256;
                        this.sendbyId_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = FileSearchFilter.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasSenderJid() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getSenderJid() {
                Object obj = this.senderJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.senderJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSenderJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.senderJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSenderJid() {
                this.bitField0_ &= -3;
                this.senderJid_ = FileSearchFilter.getDefaultInstance().getSenderJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSenderJid(ByteString byteString) {
                this.bitField0_ |= 2;
                this.senderJid_ = byteString;
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -5;
                this.keyWord_ = FileSearchFilter.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 4;
                this.keyWord_ = byteString;
            }

            public boolean hasPageSize() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getPageSize() {
                return this.pageSize_;
            }

            public Builder setPageSize(int i) {
                this.bitField0_ |= 8;
                this.pageSize_ = i;
                return this;
            }

            public Builder clearPageSize() {
                this.bitField0_ &= -9;
                this.pageSize_ = 0;
                return this;
            }

            public boolean hasPageNum() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getPageNum() {
                return this.pageNum_;
            }

            public Builder setPageNum(int i) {
                this.bitField0_ |= 16;
                this.pageNum_ = i;
                return this;
            }

            public Builder clearPageNum() {
                this.bitField0_ &= -17;
                this.pageNum_ = 0;
                return this;
            }

            public boolean hasOnlySearchImg() {
                return (this.bitField0_ & 32) == 32;
            }

            public boolean getOnlySearchImg() {
                return this.onlySearchImg_;
            }

            public Builder setOnlySearchImg(boolean z) {
                this.bitField0_ |= 32;
                this.onlySearchImg_ = z;
                return this;
            }

            public Builder clearOnlySearchImg() {
                this.bitField0_ &= -33;
                this.onlySearchImg_ = false;
                return this;
            }

            public boolean hasOnlyP2P() {
                return (this.bitField0_ & 64) == 64;
            }

            public boolean getOnlyP2P() {
                return this.onlyP2P_;
            }

            public Builder setOnlyP2P(boolean z) {
                this.bitField0_ |= 64;
                this.onlyP2P_ = z;
                return this;
            }

            public Builder clearOnlyP2P() {
                this.bitField0_ &= -65;
                this.onlyP2P_ = false;
                return this;
            }

            public boolean hasType() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 128;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -129;
                this.type_ = 0;
                return this;
            }

            public boolean hasSendbyId() {
                return (this.bitField0_ & 256) == 256;
            }

            public String getSendbyId() {
                Object obj = this.sendbyId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sendbyId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSendbyId(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.sendbyId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSendbyId() {
                this.bitField0_ &= -257;
                this.sendbyId_ = FileSearchFilter.getDefaultInstance().getSendbyId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSendbyId(ByteString byteString) {
                this.bitField0_ |= 256;
                this.sendbyId_ = byteString;
            }
        }

        private FileSearchFilter(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FileSearchFilter(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FileSearchFilter getDefaultInstance() {
            return defaultInstance;
        }

        public FileSearchFilter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSenderJid() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getSenderJid() {
            Object obj = this.senderJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.senderJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSenderJidBytes() {
            Object obj = this.senderJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.senderJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPageSize() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getPageSize() {
            return this.pageSize_;
        }

        public boolean hasPageNum() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getPageNum() {
            return this.pageNum_;
        }

        public boolean hasOnlySearchImg() {
            return (this.bitField0_ & 32) == 32;
        }

        public boolean getOnlySearchImg() {
            return this.onlySearchImg_;
        }

        public boolean hasOnlyP2P() {
            return (this.bitField0_ & 64) == 64;
        }

        public boolean getOnlyP2P() {
            return this.onlyP2P_;
        }

        public boolean hasType() {
            return (this.bitField0_ & 128) == 128;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasSendbyId() {
            return (this.bitField0_ & 256) == 256;
        }

        public String getSendbyId() {
            Object obj = this.sendbyId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sendbyId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSendbyIdBytes() {
            Object obj = this.sendbyId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sendbyId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.senderJid_ = "";
            this.keyWord_ = "";
            this.pageSize_ = 0;
            this.pageNum_ = 0;
            this.onlySearchImg_ = false;
            this.onlyP2P_ = false;
            this.type_ = 0;
            this.sendbyId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPageSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPageNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSenderJidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getKeyWordBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.pageSize_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.pageNum_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBool(6, this.onlySearchImg_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBool(7, this.onlyP2P_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeInt32(8, this.type_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getSendbyIdBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSenderJidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getKeyWordBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt32Size(4, this.pageSize_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.pageNum_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBoolSize(6, this.onlySearchImg_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBoolSize(7, this.onlyP2P_);
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeInt32Size(8, this.type_);
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getSendbyIdBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FileSearchFilter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FileSearchFilter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FileSearchFilter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FileSearchFilter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FileSearchFilter parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FileSearchFilter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FileSearchFilter parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileSearchFilter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FileSearchFilter parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FileSearchFilter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FileSearchFilter fileSearchFilter) {
            return newBuilder().mergeFrom(fileSearchFilter);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FileSearchFilterOrBuilder extends MessageLiteOrBuilder {
        String getKeyWord();

        boolean getOnlyP2P();

        boolean getOnlySearchImg();

        int getPageNum();

        int getPageSize();

        String getSendbyId();

        String getSenderJid();

        String getSessionId();

        int getType();

        boolean hasKeyWord();

        boolean hasOnlyP2P();

        boolean hasOnlySearchImg();

        boolean hasPageNum();

        boolean hasPageSize();

        boolean hasSendbyId();

        boolean hasSenderJid();

        boolean hasSessionId();

        boolean hasType();
    }

    public static final class FontStyte extends GeneratedMessageLite implements FontStyteOrBuilder {
        public static final int ITEM_FIELD_NUMBER = 1;
        private static final FontStyte defaultInstance = new FontStyte(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<FontStyteItem> item_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FontStyte, Builder> implements FontStyteOrBuilder {
            private int bitField0_;
            private List<FontStyteItem> item_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.item_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FontStyte getDefaultInstanceForType() {
                return FontStyte.getDefaultInstance();
            }

            public FontStyte build() {
                FontStyte buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FontStyte buildParsed() throws InvalidProtocolBufferException {
                FontStyte buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FontStyte buildPartial() {
                FontStyte fontStyte = new FontStyte(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.item_ = Collections.unmodifiableList(this.item_);
                    this.bitField0_ &= -2;
                }
                fontStyte.item_ = this.item_;
                return fontStyte;
            }

            public Builder mergeFrom(FontStyte fontStyte) {
                if (fontStyte != FontStyte.getDefaultInstance() && !fontStyte.item_.isEmpty()) {
                    if (this.item_.isEmpty()) {
                        this.item_ = fontStyte.item_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureItemIsMutable();
                        this.item_.addAll(fontStyte.item_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getItemCount(); i++) {
                    if (!getItem(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = FontStyteItem.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addItem(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureItemIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.item_ = new ArrayList(this.item_);
                    this.bitField0_ |= 1;
                }
            }

            public List<FontStyteItem> getItemList() {
                return Collections.unmodifiableList(this.item_);
            }

            public int getItemCount() {
                return this.item_.size();
            }

            public FontStyteItem getItem(int i) {
                return (FontStyteItem) this.item_.get(i);
            }

            public Builder setItem(int i, FontStyteItem fontStyteItem) {
                if (fontStyteItem != null) {
                    ensureItemIsMutable();
                    this.item_.set(i, fontStyteItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setItem(int i, Builder builder) {
                ensureItemIsMutable();
                this.item_.set(i, builder.build());
                return this;
            }

            public Builder addItem(FontStyteItem fontStyteItem) {
                if (fontStyteItem != null) {
                    ensureItemIsMutable();
                    this.item_.add(fontStyteItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addItem(int i, FontStyteItem fontStyteItem) {
                if (fontStyteItem != null) {
                    ensureItemIsMutable();
                    this.item_.add(i, fontStyteItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addItem(Builder builder) {
                ensureItemIsMutable();
                this.item_.add(builder.build());
                return this;
            }

            public Builder addItem(int i, Builder builder) {
                ensureItemIsMutable();
                this.item_.add(i, builder.build());
                return this;
            }

            public Builder addAllItem(Iterable<? extends FontStyteItem> iterable) {
                ensureItemIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.item_);
                return this;
            }

            public Builder clearItem() {
                this.item_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeItem(int i) {
                ensureItemIsMutable();
                this.item_.remove(i);
                return this;
            }
        }

        private FontStyte(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FontStyte(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FontStyte getDefaultInstance() {
            return defaultInstance;
        }

        public FontStyte getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<FontStyteItem> getItemList() {
            return this.item_;
        }

        public List<? extends FontStyteItemOrBuilder> getItemOrBuilderList() {
            return this.item_;
        }

        public int getItemCount() {
            return this.item_.size();
        }

        public FontStyteItem getItem(int i) {
            return (FontStyteItem) this.item_.get(i);
        }

        public FontStyteItemOrBuilder getItemOrBuilder(int i) {
            return (FontStyteItemOrBuilder) this.item_.get(i);
        }

        private void initFields() {
            this.item_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getItemCount(); i++) {
                if (!getItem(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.item_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.item_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.item_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.item_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FontStyte parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FontStyte parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FontStyte parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FontStyte parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FontStyte parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FontStyte parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FontStyte parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FontStyte parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FontStyte parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FontStyte parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FontStyte fontStyte) {
            return newBuilder().mergeFrom(fontStyte);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public static final class FontStyteItem extends GeneratedMessageLite implements FontStyteItemOrBuilder {
        public static final int ENDPOS_FIELD_NUMBER = 3;
        public static final int STARTPOS_FIELD_NUMBER = 2;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final FontStyteItem defaultInstance = new FontStyteItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int endpos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int startpos_;
        /* access modifiers changed from: private */
        public long type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<FontStyteItem, Builder> implements FontStyteItemOrBuilder {
            private int bitField0_;
            private int endpos_;
            private int startpos_;
            private long type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.type_ = 0;
                this.bitField0_ &= -2;
                this.startpos_ = 0;
                this.bitField0_ &= -3;
                this.endpos_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public FontStyteItem getDefaultInstanceForType() {
                return FontStyteItem.getDefaultInstance();
            }

            public FontStyteItem build() {
                FontStyteItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public FontStyteItem buildParsed() throws InvalidProtocolBufferException {
                FontStyteItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public FontStyteItem buildPartial() {
                FontStyteItem fontStyteItem = new FontStyteItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                fontStyteItem.type_ = this.type_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                fontStyteItem.startpos_ = this.startpos_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                fontStyteItem.endpos_ = this.endpos_;
                fontStyteItem.bitField0_ = i2;
                return fontStyteItem;
            }

            public Builder mergeFrom(FontStyteItem fontStyteItem) {
                if (fontStyteItem == FontStyteItem.getDefaultInstance()) {
                    return this;
                }
                if (fontStyteItem.hasType()) {
                    setType(fontStyteItem.getType());
                }
                if (fontStyteItem.hasStartpos()) {
                    setStartpos(fontStyteItem.getStartpos());
                }
                if (fontStyteItem.hasEndpos()) {
                    setEndpos(fontStyteItem.getEndpos());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasType() && hasStartpos() && hasEndpos()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.type_ = codedInputStream.readUInt64();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.startpos_ = codedInputStream.readInt32();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.endpos_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasType() {
                return (this.bitField0_ & 1) == 1;
            }

            public long getType() {
                return this.type_;
            }

            public Builder setType(long j) {
                this.bitField0_ |= 1;
                this.type_ = j;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -2;
                this.type_ = 0;
                return this;
            }

            public boolean hasStartpos() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getStartpos() {
                return this.startpos_;
            }

            public Builder setStartpos(int i) {
                this.bitField0_ |= 2;
                this.startpos_ = i;
                return this;
            }

            public Builder clearStartpos() {
                this.bitField0_ &= -3;
                this.startpos_ = 0;
                return this;
            }

            public boolean hasEndpos() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getEndpos() {
                return this.endpos_;
            }

            public Builder setEndpos(int i) {
                this.bitField0_ |= 4;
                this.endpos_ = i;
                return this;
            }

            public Builder clearEndpos() {
                this.bitField0_ &= -5;
                this.endpos_ = 0;
                return this;
            }
        }

        private FontStyteItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private FontStyteItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static FontStyteItem getDefaultInstance() {
            return defaultInstance;
        }

        public FontStyteItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasType() {
            return (this.bitField0_ & 1) == 1;
        }

        public long getType() {
            return this.type_;
        }

        public boolean hasStartpos() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getStartpos() {
            return this.startpos_;
        }

        public boolean hasEndpos() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getEndpos() {
            return this.endpos_;
        }

        private void initFields() {
            this.type_ = 0;
            this.startpos_ = 0;
            this.endpos_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStartpos()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEndpos()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt64(1, this.type_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.startpos_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.endpos_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt64Size(1, this.type_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.startpos_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.endpos_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FontStyteItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static FontStyteItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static FontStyteItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static FontStyteItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static FontStyteItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static FontStyteItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static FontStyteItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FontStyteItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static FontStyteItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static FontStyteItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FontStyteItem fontStyteItem) {
            return newBuilder().mergeFrom(fontStyteItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface FontStyteItemOrBuilder extends MessageLiteOrBuilder {
        int getEndpos();

        int getStartpos();

        long getType();

        boolean hasEndpos();

        boolean hasStartpos();

        boolean hasType();
    }

    public interface FontStyteOrBuilder extends MessageLiteOrBuilder {
        FontStyteItem getItem(int i);

        int getItemCount();

        List<FontStyteItem> getItemList();
    }

    public static final class GiphyMsgInfo extends GeneratedMessageLite implements GiphyMsgInfoOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int LOCALPATH_FIELD_NUMBER = 2;
        public static final int MOBILESIZE_FIELD_NUMBER = 6;
        public static final int MOBILEURL_FIELD_NUMBER = 5;
        public static final int PCSIZE_FIELD_NUMBER = 4;
        public static final int PCURL_FIELD_NUMBER = 3;
        private static final GiphyMsgInfo defaultInstance = new GiphyMsgInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object id_;
        /* access modifiers changed from: private */
        public Object localPath_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public long mobileSize_;
        /* access modifiers changed from: private */
        public Object mobileUrl_;
        /* access modifiers changed from: private */
        public long pcSize_;
        /* access modifiers changed from: private */
        public Object pcUrl_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<GiphyMsgInfo, Builder> implements GiphyMsgInfoOrBuilder {
            private int bitField0_;
            private Object id_ = "";
            private Object localPath_ = "";
            private long mobileSize_;
            private Object mobileUrl_ = "";
            private long pcSize_;
            private Object pcUrl_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= -2;
                this.localPath_ = "";
                this.bitField0_ &= -3;
                this.pcUrl_ = "";
                this.bitField0_ &= -5;
                this.pcSize_ = 0;
                this.bitField0_ &= -9;
                this.mobileUrl_ = "";
                this.bitField0_ &= -17;
                this.mobileSize_ = 0;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public GiphyMsgInfo getDefaultInstanceForType() {
                return GiphyMsgInfo.getDefaultInstance();
            }

            public GiphyMsgInfo build() {
                GiphyMsgInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public GiphyMsgInfo buildParsed() throws InvalidProtocolBufferException {
                GiphyMsgInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public GiphyMsgInfo buildPartial() {
                GiphyMsgInfo giphyMsgInfo = new GiphyMsgInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                giphyMsgInfo.id_ = this.id_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                giphyMsgInfo.localPath_ = this.localPath_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                giphyMsgInfo.pcUrl_ = this.pcUrl_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                giphyMsgInfo.pcSize_ = this.pcSize_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                giphyMsgInfo.mobileUrl_ = this.mobileUrl_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                giphyMsgInfo.mobileSize_ = this.mobileSize_;
                giphyMsgInfo.bitField0_ = i2;
                return giphyMsgInfo;
            }

            public Builder mergeFrom(GiphyMsgInfo giphyMsgInfo) {
                if (giphyMsgInfo == GiphyMsgInfo.getDefaultInstance()) {
                    return this;
                }
                if (giphyMsgInfo.hasId()) {
                    setId(giphyMsgInfo.getId());
                }
                if (giphyMsgInfo.hasLocalPath()) {
                    setLocalPath(giphyMsgInfo.getLocalPath());
                }
                if (giphyMsgInfo.hasPcUrl()) {
                    setPcUrl(giphyMsgInfo.getPcUrl());
                }
                if (giphyMsgInfo.hasPcSize()) {
                    setPcSize(giphyMsgInfo.getPcSize());
                }
                if (giphyMsgInfo.hasMobileUrl()) {
                    setMobileUrl(giphyMsgInfo.getMobileUrl());
                }
                if (giphyMsgInfo.hasMobileSize()) {
                    setMobileSize(giphyMsgInfo.getMobileSize());
                }
                return this;
            }

            public final boolean isInitialized() {
                return hasId();
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.id_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.localPath_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.pcUrl_ = codedInputStream.readBytes();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.pcSize_ = codedInputStream.readInt64();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.mobileUrl_ = codedInputStream.readBytes();
                    } else if (readTag == 48) {
                        this.bitField0_ |= 32;
                        this.mobileSize_ = codedInputStream.readInt64();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getId() {
                Object obj = this.id_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.id_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.id_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearId() {
                this.bitField0_ &= -2;
                this.id_ = GiphyMsgInfo.getDefaultInstance().getId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.id_ = byteString;
            }

            public boolean hasLocalPath() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getLocalPath() {
                Object obj = this.localPath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.localPath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setLocalPath(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.localPath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearLocalPath() {
                this.bitField0_ &= -3;
                this.localPath_ = GiphyMsgInfo.getDefaultInstance().getLocalPath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setLocalPath(ByteString byteString) {
                this.bitField0_ |= 2;
                this.localPath_ = byteString;
            }

            public boolean hasPcUrl() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getPcUrl() {
                Object obj = this.pcUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pcUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setPcUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.pcUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearPcUrl() {
                this.bitField0_ &= -5;
                this.pcUrl_ = GiphyMsgInfo.getDefaultInstance().getPcUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setPcUrl(ByteString byteString) {
                this.bitField0_ |= 4;
                this.pcUrl_ = byteString;
            }

            public boolean hasPcSize() {
                return (this.bitField0_ & 8) == 8;
            }

            public long getPcSize() {
                return this.pcSize_;
            }

            public Builder setPcSize(long j) {
                this.bitField0_ |= 8;
                this.pcSize_ = j;
                return this;
            }

            public Builder clearPcSize() {
                this.bitField0_ &= -9;
                this.pcSize_ = 0;
                return this;
            }

            public boolean hasMobileUrl() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getMobileUrl() {
                Object obj = this.mobileUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.mobileUrl_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMobileUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.mobileUrl_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMobileUrl() {
                this.bitField0_ &= -17;
                this.mobileUrl_ = GiphyMsgInfo.getDefaultInstance().getMobileUrl();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMobileUrl(ByteString byteString) {
                this.bitField0_ |= 16;
                this.mobileUrl_ = byteString;
            }

            public boolean hasMobileSize() {
                return (this.bitField0_ & 32) == 32;
            }

            public long getMobileSize() {
                return this.mobileSize_;
            }

            public Builder setMobileSize(long j) {
                this.bitField0_ |= 32;
                this.mobileSize_ = j;
                return this;
            }

            public Builder clearMobileSize() {
                this.bitField0_ &= -33;
                this.mobileSize_ = 0;
                return this;
            }
        }

        private GiphyMsgInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private GiphyMsgInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static GiphyMsgInfo getDefaultInstance() {
            return defaultInstance;
        }

        public GiphyMsgInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getId() {
            Object obj = this.id_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.id_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getIdBytes() {
            Object obj = this.id_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.id_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasLocalPath() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getLocalPath() {
            Object obj = this.localPath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.localPath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getLocalPathBytes() {
            Object obj = this.localPath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.localPath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPcUrl() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getPcUrl() {
            Object obj = this.pcUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.pcUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getPcUrlBytes() {
            Object obj = this.pcUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pcUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPcSize() {
            return (this.bitField0_ & 8) == 8;
        }

        public long getPcSize() {
            return this.pcSize_;
        }

        public boolean hasMobileUrl() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getMobileUrl() {
            Object obj = this.mobileUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.mobileUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMobileUrlBytes() {
            Object obj = this.mobileUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.mobileUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMobileSize() {
            return (this.bitField0_ & 32) == 32;
        }

        public long getMobileSize() {
            return this.mobileSize_;
        }

        private void initFields() {
            this.id_ = "";
            this.localPath_ = "";
            this.pcUrl_ = "";
            this.pcSize_ = 0;
            this.mobileUrl_ = "";
            this.mobileSize_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            } else if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getLocalPathBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getPcUrlBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt64(4, this.pcSize_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getMobileUrlBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt64(6, this.mobileSize_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getLocalPathBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getPcUrlBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt64Size(4, this.pcSize_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getMobileUrlBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt64Size(6, this.mobileSize_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GiphyMsgInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static GiphyMsgInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static GiphyMsgInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static GiphyMsgInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static GiphyMsgInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static GiphyMsgInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static GiphyMsgInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static GiphyMsgInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static GiphyMsgInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static GiphyMsgInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GiphyMsgInfo giphyMsgInfo) {
            return newBuilder().mergeFrom(giphyMsgInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface GiphyMsgInfoOrBuilder extends MessageLiteOrBuilder {
        String getId();

        String getLocalPath();

        long getMobileSize();

        String getMobileUrl();

        long getPcSize();

        String getPcUrl();

        boolean hasId();

        boolean hasLocalPath();

        boolean hasMobileSize();

        boolean hasMobileUrl();

        boolean hasPcSize();

        boolean hasPcUrl();
    }

    public static final class GroupCallBackInfo extends GeneratedMessageLite implements GroupCallBackInfoOrBuilder {
        public static final int ACTIONOWNER_FIELD_NUMBER = 2;
        public static final int BUDDIES_FIELD_NUMBER = 8;
        public static final int GROUPID_FIELD_NUMBER = 3;
        public static final int GROUPISEXIST_FIELD_NUMBER = 12;
        public static final int MAXALLOWED_FIELD_NUMBER = 7;
        public static final int MSGID_FIELD_NUMBER = 4;
        public static final int NEWNAME_FIELD_NUMBER = 11;
        public static final int NOTALLOWEDBUDDIES_FIELD_NUMBER = 9;
        public static final int PREVMSGTIME_FIELD_NUMBER = 6;
        public static final int RESULT_FIELD_NUMBER = 1;
        public static final int TMSERVERSIDE_FIELD_NUMBER = 5;
        public static final int TM_FIELD_NUMBER = 10;
        private static final GroupCallBackInfo defaultInstance = new GroupCallBackInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public BuddyUserInfo actionOwner_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<BuddyUserInfo> buddies_;
        /* access modifiers changed from: private */
        public Object groupID_;
        /* access modifiers changed from: private */
        public boolean groupIsExist_;
        /* access modifiers changed from: private */
        public int maxAllowed_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object msgID_;
        /* access modifiers changed from: private */
        public Object newName_;
        /* access modifiers changed from: private */
        public List<BuddyUserInfo> notAllowedBuddies_;
        /* access modifiers changed from: private */
        public long prevMsgtime_;
        /* access modifiers changed from: private */
        public int result_;
        /* access modifiers changed from: private */
        public long tmServerside_;
        /* access modifiers changed from: private */
        public long tm_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<GroupCallBackInfo, Builder> implements GroupCallBackInfoOrBuilder {
            private BuddyUserInfo actionOwner_ = BuddyUserInfo.getDefaultInstance();
            private int bitField0_;
            private List<BuddyUserInfo> buddies_ = Collections.emptyList();
            private Object groupID_ = "";
            private boolean groupIsExist_;
            private int maxAllowed_;
            private Object msgID_ = "";
            private Object newName_ = "";
            private List<BuddyUserInfo> notAllowedBuddies_ = Collections.emptyList();
            private long prevMsgtime_;
            private int result_;
            private long tmServerside_;
            private long tm_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.actionOwner_ = BuddyUserInfo.getDefaultInstance();
                this.bitField0_ &= -3;
                this.groupID_ = "";
                this.bitField0_ &= -5;
                this.msgID_ = "";
                this.bitField0_ &= -9;
                this.tmServerside_ = 0;
                this.bitField0_ &= -17;
                this.prevMsgtime_ = 0;
                this.bitField0_ &= -33;
                this.maxAllowed_ = 0;
                this.bitField0_ &= -65;
                this.buddies_ = Collections.emptyList();
                this.bitField0_ &= -129;
                this.notAllowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -257;
                this.tm_ = 0;
                this.bitField0_ &= -513;
                this.newName_ = "";
                this.bitField0_ &= -1025;
                this.groupIsExist_ = false;
                this.bitField0_ &= -2049;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public GroupCallBackInfo getDefaultInstanceForType() {
                return GroupCallBackInfo.getDefaultInstance();
            }

            public GroupCallBackInfo build() {
                GroupCallBackInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public GroupCallBackInfo buildParsed() throws InvalidProtocolBufferException {
                GroupCallBackInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public GroupCallBackInfo buildPartial() {
                GroupCallBackInfo groupCallBackInfo = new GroupCallBackInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                groupCallBackInfo.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                groupCallBackInfo.actionOwner_ = this.actionOwner_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                groupCallBackInfo.groupID_ = this.groupID_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                groupCallBackInfo.msgID_ = this.msgID_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                groupCallBackInfo.tmServerside_ = this.tmServerside_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                groupCallBackInfo.prevMsgtime_ = this.prevMsgtime_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                groupCallBackInfo.maxAllowed_ = this.maxAllowed_;
                if ((this.bitField0_ & 128) == 128) {
                    this.buddies_ = Collections.unmodifiableList(this.buddies_);
                    this.bitField0_ &= -129;
                }
                groupCallBackInfo.buddies_ = this.buddies_;
                if ((this.bitField0_ & 256) == 256) {
                    this.notAllowedBuddies_ = Collections.unmodifiableList(this.notAllowedBuddies_);
                    this.bitField0_ &= -257;
                }
                groupCallBackInfo.notAllowedBuddies_ = this.notAllowedBuddies_;
                if ((i & 512) == 512) {
                    i2 |= 128;
                }
                groupCallBackInfo.tm_ = this.tm_;
                if ((i & 1024) == 1024) {
                    i2 |= 256;
                }
                groupCallBackInfo.newName_ = this.newName_;
                if ((i & 2048) == 2048) {
                    i2 |= 512;
                }
                groupCallBackInfo.groupIsExist_ = this.groupIsExist_;
                groupCallBackInfo.bitField0_ = i2;
                return groupCallBackInfo;
            }

            public Builder mergeFrom(GroupCallBackInfo groupCallBackInfo) {
                if (groupCallBackInfo == GroupCallBackInfo.getDefaultInstance()) {
                    return this;
                }
                if (groupCallBackInfo.hasResult()) {
                    setResult(groupCallBackInfo.getResult());
                }
                if (groupCallBackInfo.hasActionOwner()) {
                    mergeActionOwner(groupCallBackInfo.getActionOwner());
                }
                if (groupCallBackInfo.hasGroupID()) {
                    setGroupID(groupCallBackInfo.getGroupID());
                }
                if (groupCallBackInfo.hasMsgID()) {
                    setMsgID(groupCallBackInfo.getMsgID());
                }
                if (groupCallBackInfo.hasTmServerside()) {
                    setTmServerside(groupCallBackInfo.getTmServerside());
                }
                if (groupCallBackInfo.hasPrevMsgtime()) {
                    setPrevMsgtime(groupCallBackInfo.getPrevMsgtime());
                }
                if (groupCallBackInfo.hasMaxAllowed()) {
                    setMaxAllowed(groupCallBackInfo.getMaxAllowed());
                }
                if (!groupCallBackInfo.buddies_.isEmpty()) {
                    if (this.buddies_.isEmpty()) {
                        this.buddies_ = groupCallBackInfo.buddies_;
                        this.bitField0_ &= -129;
                    } else {
                        ensureBuddiesIsMutable();
                        this.buddies_.addAll(groupCallBackInfo.buddies_);
                    }
                }
                if (!groupCallBackInfo.notAllowedBuddies_.isEmpty()) {
                    if (this.notAllowedBuddies_.isEmpty()) {
                        this.notAllowedBuddies_ = groupCallBackInfo.notAllowedBuddies_;
                        this.bitField0_ &= -257;
                    } else {
                        ensureNotAllowedBuddiesIsMutable();
                        this.notAllowedBuddies_.addAll(groupCallBackInfo.notAllowedBuddies_);
                    }
                }
                if (groupCallBackInfo.hasTm()) {
                    setTm(groupCallBackInfo.getTm());
                }
                if (groupCallBackInfo.hasNewName()) {
                    setNewName(groupCallBackInfo.getNewName());
                }
                if (groupCallBackInfo.hasGroupIsExist()) {
                    setGroupIsExist(groupCallBackInfo.getGroupIsExist());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResult() || !hasActionOwner() || !hasGroupID() || !hasMsgID() || !hasTmServerside() || !hasPrevMsgtime() || !hasMaxAllowed() || !hasTm() || !hasNewName() || !getActionOwner().isInitialized()) {
                    return false;
                }
                for (int i = 0; i < getBuddiesCount(); i++) {
                    if (!getBuddies(i).isInitialized()) {
                        return false;
                    }
                }
                for (int i2 = 0; i2 < getNotAllowedBuddiesCount(); i2++) {
                    if (!getNotAllowedBuddies(i2).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 8:
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                            break;
                        case 18:
                            Builder newBuilder = BuddyUserInfo.newBuilder();
                            if (hasActionOwner()) {
                                newBuilder.mergeFrom(getActionOwner());
                            }
                            codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                            setActionOwner(newBuilder.buildPartial());
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.groupID_ = codedInputStream.readBytes();
                            break;
                        case 34:
                            this.bitField0_ |= 8;
                            this.msgID_ = codedInputStream.readBytes();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.tmServerside_ = codedInputStream.readInt64();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.prevMsgtime_ = codedInputStream.readInt64();
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.maxAllowed_ = codedInputStream.readInt32();
                            break;
                        case 66:
                            Builder newBuilder2 = BuddyUserInfo.newBuilder();
                            codedInputStream.readMessage(newBuilder2, extensionRegistryLite);
                            addBuddies(newBuilder2.buildPartial());
                            break;
                        case 74:
                            Builder newBuilder3 = BuddyUserInfo.newBuilder();
                            codedInputStream.readMessage(newBuilder3, extensionRegistryLite);
                            addNotAllowedBuddies(newBuilder3.buildPartial());
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.tm_ = codedInputStream.readInt64();
                            break;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.newName_ = codedInputStream.readBytes();
                            break;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.groupIsExist_ = codedInputStream.readBool();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getResult() {
                return this.result_;
            }

            public Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                return this;
            }

            public Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                return this;
            }

            public boolean hasActionOwner() {
                return (this.bitField0_ & 2) == 2;
            }

            public BuddyUserInfo getActionOwner() {
                return this.actionOwner_;
            }

            public Builder setActionOwner(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    this.actionOwner_ = buddyUserInfo;
                    this.bitField0_ |= 2;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setActionOwner(Builder builder) {
                this.actionOwner_ = builder.build();
                this.bitField0_ |= 2;
                return this;
            }

            public Builder mergeActionOwner(BuddyUserInfo buddyUserInfo) {
                if ((this.bitField0_ & 2) != 2 || this.actionOwner_ == BuddyUserInfo.getDefaultInstance()) {
                    this.actionOwner_ = buddyUserInfo;
                } else {
                    this.actionOwner_ = BuddyUserInfo.newBuilder(this.actionOwner_).mergeFrom(buddyUserInfo).buildPartial();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public Builder clearActionOwner() {
                this.actionOwner_ = BuddyUserInfo.getDefaultInstance();
                this.bitField0_ &= -3;
                return this;
            }

            public boolean hasGroupID() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getGroupID() {
                Object obj = this.groupID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.groupID_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setGroupID(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.groupID_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearGroupID() {
                this.bitField0_ &= -5;
                this.groupID_ = GroupCallBackInfo.getDefaultInstance().getGroupID();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setGroupID(ByteString byteString) {
                this.bitField0_ |= 4;
                this.groupID_ = byteString;
            }

            public boolean hasMsgID() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getMsgID() {
                Object obj = this.msgID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.msgID_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMsgID(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.msgID_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMsgID() {
                this.bitField0_ &= -9;
                this.msgID_ = GroupCallBackInfo.getDefaultInstance().getMsgID();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMsgID(ByteString byteString) {
                this.bitField0_ |= 8;
                this.msgID_ = byteString;
            }

            public boolean hasTmServerside() {
                return (this.bitField0_ & 16) == 16;
            }

            public long getTmServerside() {
                return this.tmServerside_;
            }

            public Builder setTmServerside(long j) {
                this.bitField0_ |= 16;
                this.tmServerside_ = j;
                return this;
            }

            public Builder clearTmServerside() {
                this.bitField0_ &= -17;
                this.tmServerside_ = 0;
                return this;
            }

            public boolean hasPrevMsgtime() {
                return (this.bitField0_ & 32) == 32;
            }

            public long getPrevMsgtime() {
                return this.prevMsgtime_;
            }

            public Builder setPrevMsgtime(long j) {
                this.bitField0_ |= 32;
                this.prevMsgtime_ = j;
                return this;
            }

            public Builder clearPrevMsgtime() {
                this.bitField0_ &= -33;
                this.prevMsgtime_ = 0;
                return this;
            }

            public boolean hasMaxAllowed() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getMaxAllowed() {
                return this.maxAllowed_;
            }

            public Builder setMaxAllowed(int i) {
                this.bitField0_ |= 64;
                this.maxAllowed_ = i;
                return this;
            }

            public Builder clearMaxAllowed() {
                this.bitField0_ &= -65;
                this.maxAllowed_ = 0;
                return this;
            }

            private void ensureBuddiesIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.buddies_ = new ArrayList(this.buddies_);
                    this.bitField0_ |= 128;
                }
            }

            public List<BuddyUserInfo> getBuddiesList() {
                return Collections.unmodifiableList(this.buddies_);
            }

            public int getBuddiesCount() {
                return this.buddies_.size();
            }

            public BuddyUserInfo getBuddies(int i) {
                return (BuddyUserInfo) this.buddies_.get(i);
            }

            public Builder setBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureBuddiesIsMutable();
                    this.buddies_.set(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setBuddies(int i, Builder builder) {
                ensureBuddiesIsMutable();
                this.buddies_.set(i, builder.build());
                return this;
            }

            public Builder addBuddies(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureBuddiesIsMutable();
                    this.buddies_.add(buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureBuddiesIsMutable();
                    this.buddies_.add(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addBuddies(Builder builder) {
                ensureBuddiesIsMutable();
                this.buddies_.add(builder.build());
                return this;
            }

            public Builder addBuddies(int i, Builder builder) {
                ensureBuddiesIsMutable();
                this.buddies_.add(i, builder.build());
                return this;
            }

            public Builder addAllBuddies(Iterable<? extends BuddyUserInfo> iterable) {
                ensureBuddiesIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.buddies_);
                return this;
            }

            public Builder clearBuddies() {
                this.buddies_ = Collections.emptyList();
                this.bitField0_ &= -129;
                return this;
            }

            public Builder removeBuddies(int i) {
                ensureBuddiesIsMutable();
                this.buddies_.remove(i);
                return this;
            }

            private void ensureNotAllowedBuddiesIsMutable() {
                if ((this.bitField0_ & 256) != 256) {
                    this.notAllowedBuddies_ = new ArrayList(this.notAllowedBuddies_);
                    this.bitField0_ |= 256;
                }
            }

            public List<BuddyUserInfo> getNotAllowedBuddiesList() {
                return Collections.unmodifiableList(this.notAllowedBuddies_);
            }

            public int getNotAllowedBuddiesCount() {
                return this.notAllowedBuddies_.size();
            }

            public BuddyUserInfo getNotAllowedBuddies(int i) {
                return (BuddyUserInfo) this.notAllowedBuddies_.get(i);
            }

            public Builder setNotAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.set(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setNotAllowedBuddies(int i, Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.set(i, builder.build());
                return this;
            }

            public Builder addNotAllowedBuddies(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.add(buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addNotAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.add(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addNotAllowedBuddies(Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.add(builder.build());
                return this;
            }

            public Builder addNotAllowedBuddies(int i, Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.add(i, builder.build());
                return this;
            }

            public Builder addAllNotAllowedBuddies(Iterable<? extends BuddyUserInfo> iterable) {
                ensureNotAllowedBuddiesIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.notAllowedBuddies_);
                return this;
            }

            public Builder clearNotAllowedBuddies() {
                this.notAllowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -257;
                return this;
            }

            public Builder removeNotAllowedBuddies(int i) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.remove(i);
                return this;
            }

            public boolean hasTm() {
                return (this.bitField0_ & 512) == 512;
            }

            public long getTm() {
                return this.tm_;
            }

            public Builder setTm(long j) {
                this.bitField0_ |= 512;
                this.tm_ = j;
                return this;
            }

            public Builder clearTm() {
                this.bitField0_ &= -513;
                this.tm_ = 0;
                return this;
            }

            public boolean hasNewName() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public String getNewName() {
                Object obj = this.newName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.newName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setNewName(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.newName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearNewName() {
                this.bitField0_ &= -1025;
                this.newName_ = GroupCallBackInfo.getDefaultInstance().getNewName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setNewName(ByteString byteString) {
                this.bitField0_ |= 1024;
                this.newName_ = byteString;
            }

            public boolean hasGroupIsExist() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public boolean getGroupIsExist() {
                return this.groupIsExist_;
            }

            public Builder setGroupIsExist(boolean z) {
                this.bitField0_ |= 2048;
                this.groupIsExist_ = z;
                return this;
            }

            public Builder clearGroupIsExist() {
                this.bitField0_ &= -2049;
                this.groupIsExist_ = false;
                return this;
            }
        }

        private GroupCallBackInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private GroupCallBackInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static GroupCallBackInfo getDefaultInstance() {
            return defaultInstance;
        }

        public GroupCallBackInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getResult() {
            return this.result_;
        }

        public boolean hasActionOwner() {
            return (this.bitField0_ & 2) == 2;
        }

        public BuddyUserInfo getActionOwner() {
            return this.actionOwner_;
        }

        public boolean hasGroupID() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getGroupID() {
            Object obj = this.groupID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.groupID_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getGroupIDBytes() {
            Object obj = this.groupID_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupID_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMsgID() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getMsgID() {
            Object obj = this.msgID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.msgID_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMsgIDBytes() {
            Object obj = this.msgID_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.msgID_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasTmServerside() {
            return (this.bitField0_ & 16) == 16;
        }

        public long getTmServerside() {
            return this.tmServerside_;
        }

        public boolean hasPrevMsgtime() {
            return (this.bitField0_ & 32) == 32;
        }

        public long getPrevMsgtime() {
            return this.prevMsgtime_;
        }

        public boolean hasMaxAllowed() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getMaxAllowed() {
            return this.maxAllowed_;
        }

        public List<BuddyUserInfo> getBuddiesList() {
            return this.buddies_;
        }

        public List<? extends BuddyUserInfoOrBuilder> getBuddiesOrBuilderList() {
            return this.buddies_;
        }

        public int getBuddiesCount() {
            return this.buddies_.size();
        }

        public BuddyUserInfo getBuddies(int i) {
            return (BuddyUserInfo) this.buddies_.get(i);
        }

        public BuddyUserInfoOrBuilder getBuddiesOrBuilder(int i) {
            return (BuddyUserInfoOrBuilder) this.buddies_.get(i);
        }

        public List<BuddyUserInfo> getNotAllowedBuddiesList() {
            return this.notAllowedBuddies_;
        }

        public List<? extends BuddyUserInfoOrBuilder> getNotAllowedBuddiesOrBuilderList() {
            return this.notAllowedBuddies_;
        }

        public int getNotAllowedBuddiesCount() {
            return this.notAllowedBuddies_.size();
        }

        public BuddyUserInfo getNotAllowedBuddies(int i) {
            return (BuddyUserInfo) this.notAllowedBuddies_.get(i);
        }

        public BuddyUserInfoOrBuilder getNotAllowedBuddiesOrBuilder(int i) {
            return (BuddyUserInfoOrBuilder) this.notAllowedBuddies_.get(i);
        }

        public boolean hasTm() {
            return (this.bitField0_ & 128) == 128;
        }

        public long getTm() {
            return this.tm_;
        }

        public boolean hasNewName() {
            return (this.bitField0_ & 256) == 256;
        }

        public String getNewName() {
            Object obj = this.newName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.newName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNewNameBytes() {
            Object obj = this.newName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.newName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupIsExist() {
            return (this.bitField0_ & 512) == 512;
        }

        public boolean getGroupIsExist() {
            return this.groupIsExist_;
        }

        private void initFields() {
            this.result_ = 0;
            this.actionOwner_ = BuddyUserInfo.getDefaultInstance();
            this.groupID_ = "";
            this.msgID_ = "";
            this.tmServerside_ = 0;
            this.prevMsgtime_ = 0;
            this.maxAllowed_ = 0;
            this.buddies_ = Collections.emptyList();
            this.notAllowedBuddies_ = Collections.emptyList();
            this.tm_ = 0;
            this.newName_ = "";
            this.groupIsExist_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasActionOwner()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupID()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMsgID()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasTmServerside()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPrevMsgtime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMaxAllowed()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasTm()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNewName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!getActionOwner().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getBuddiesCount(); i++) {
                    if (!getBuddies(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                for (int i2 = 0; i2 < getNotAllowedBuddiesCount(); i2++) {
                    if (!getNotAllowedBuddies(i2).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(2, this.actionOwner_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getGroupIDBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getMsgIDBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(5, this.tmServerside_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt64(6, this.prevMsgtime_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt32(7, this.maxAllowed_);
            }
            for (int i = 0; i < this.buddies_.size(); i++) {
                codedOutputStream.writeMessage(8, (MessageLite) this.buddies_.get(i));
            }
            for (int i2 = 0; i2 < this.notAllowedBuddies_.size(); i2++) {
                codedOutputStream.writeMessage(9, (MessageLite) this.notAllowedBuddies_.get(i2));
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeInt64(10, this.tm_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(11, getNewNameBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBool(12, this.groupIsExist_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeMessageSize(2, this.actionOwner_);
            }
            if ((this.bitField0_ & 4) == 4) {
                computeInt32Size += CodedOutputStream.computeBytesSize(3, getGroupIDBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                computeInt32Size += CodedOutputStream.computeBytesSize(4, getMsgIDBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                computeInt32Size += CodedOutputStream.computeInt64Size(5, this.tmServerside_);
            }
            if ((this.bitField0_ & 32) == 32) {
                computeInt32Size += CodedOutputStream.computeInt64Size(6, this.prevMsgtime_);
            }
            if ((this.bitField0_ & 64) == 64) {
                computeInt32Size += CodedOutputStream.computeInt32Size(7, this.maxAllowed_);
            }
            int i2 = computeInt32Size;
            for (int i3 = 0; i3 < this.buddies_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(8, (MessageLite) this.buddies_.get(i3));
            }
            for (int i4 = 0; i4 < this.notAllowedBuddies_.size(); i4++) {
                i2 += CodedOutputStream.computeMessageSize(9, (MessageLite) this.notAllowedBuddies_.get(i4));
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeInt64Size(10, this.tm_);
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(11, getNewNameBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBoolSize(12, this.groupIsExist_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GroupCallBackInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static GroupCallBackInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static GroupCallBackInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static GroupCallBackInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static GroupCallBackInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static GroupCallBackInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static GroupCallBackInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static GroupCallBackInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static GroupCallBackInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static GroupCallBackInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GroupCallBackInfo groupCallBackInfo) {
            return newBuilder().mergeFrom(groupCallBackInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface GroupCallBackInfoOrBuilder extends MessageLiteOrBuilder {
        BuddyUserInfo getActionOwner();

        BuddyUserInfo getBuddies(int i);

        int getBuddiesCount();

        List<BuddyUserInfo> getBuddiesList();

        String getGroupID();

        boolean getGroupIsExist();

        int getMaxAllowed();

        String getMsgID();

        String getNewName();

        BuddyUserInfo getNotAllowedBuddies(int i);

        int getNotAllowedBuddiesCount();

        List<BuddyUserInfo> getNotAllowedBuddiesList();

        long getPrevMsgtime();

        int getResult();

        long getTm();

        long getTmServerside();

        boolean hasActionOwner();

        boolean hasGroupID();

        boolean hasGroupIsExist();

        boolean hasMaxAllowed();

        boolean hasMsgID();

        boolean hasNewName();

        boolean hasPrevMsgtime();

        boolean hasResult();

        boolean hasTm();

        boolean hasTmServerside();
    }

    public static final class HighlightPositionItem extends GeneratedMessageLite implements HighlightPositionItemOrBuilder {
        public static final int END_FIELD_NUMBER = 2;
        public static final int START_FIELD_NUMBER = 1;
        private static final HighlightPositionItem defaultInstance = new HighlightPositionItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int end_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int start_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<HighlightPositionItem, Builder> implements HighlightPositionItemOrBuilder {
            private int bitField0_;
            private int end_;
            private int start_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.start_ = 0;
                this.bitField0_ &= -2;
                this.end_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public HighlightPositionItem getDefaultInstanceForType() {
                return HighlightPositionItem.getDefaultInstance();
            }

            public HighlightPositionItem build() {
                HighlightPositionItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public HighlightPositionItem buildParsed() throws InvalidProtocolBufferException {
                HighlightPositionItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public HighlightPositionItem buildPartial() {
                HighlightPositionItem highlightPositionItem = new HighlightPositionItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                highlightPositionItem.start_ = this.start_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                highlightPositionItem.end_ = this.end_;
                highlightPositionItem.bitField0_ = i2;
                return highlightPositionItem;
            }

            public Builder mergeFrom(HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem == HighlightPositionItem.getDefaultInstance()) {
                    return this;
                }
                if (highlightPositionItem.hasStart()) {
                    setStart(highlightPositionItem.getStart());
                }
                if (highlightPositionItem.hasEnd()) {
                    setEnd(highlightPositionItem.getEnd());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasStart() && hasEnd()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.start_ = codedInputStream.readInt32();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.end_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasStart() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getStart() {
                return this.start_;
            }

            public Builder setStart(int i) {
                this.bitField0_ |= 1;
                this.start_ = i;
                return this;
            }

            public Builder clearStart() {
                this.bitField0_ &= -2;
                this.start_ = 0;
                return this;
            }

            public boolean hasEnd() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getEnd() {
                return this.end_;
            }

            public Builder setEnd(int i) {
                this.bitField0_ |= 2;
                this.end_ = i;
                return this;
            }

            public Builder clearEnd() {
                this.bitField0_ &= -3;
                this.end_ = 0;
                return this;
            }
        }

        private HighlightPositionItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private HighlightPositionItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static HighlightPositionItem getDefaultInstance() {
            return defaultInstance;
        }

        public HighlightPositionItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasStart() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getStart() {
            return this.start_;
        }

        public boolean hasEnd() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getEnd() {
            return this.end_;
        }

        private void initFields() {
            this.start_ = 0;
            this.end_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasStart()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEnd()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.start_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.end_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.start_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.end_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static HighlightPositionItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static HighlightPositionItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static HighlightPositionItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static HighlightPositionItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static HighlightPositionItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static HighlightPositionItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static HighlightPositionItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static HighlightPositionItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static HighlightPositionItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static HighlightPositionItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(HighlightPositionItem highlightPositionItem) {
            return newBuilder().mergeFrom(highlightPositionItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface HighlightPositionItemOrBuilder extends MessageLiteOrBuilder {
        int getEnd();

        int getStart();

        boolean hasEnd();

        boolean hasStart();
    }

    public static final class IMMessage extends GeneratedMessageLite implements IMMessageOrBuilder {
        public static final int FROMSCREENNAME_FIELD_NUMBER = 1;
        public static final int MESSAGETIME_FIELD_NUMBER = 4;
        public static final int MESSAGETYPE_FIELD_NUMBER = 5;
        public static final int MESSAGE_FIELD_NUMBER = 3;
        public static final int NATIVEHANDLE_FIELD_NUMBER = 6;
        public static final int TOSCREENNAME_FIELD_NUMBER = 2;
        private static final IMMessage defaultInstance = new IMMessage(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object fromScreenName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public long messageTime_;
        /* access modifiers changed from: private */
        public int messageType_;
        /* access modifiers changed from: private */
        public Object message_;
        /* access modifiers changed from: private */
        public long nativeHandle_;
        /* access modifiers changed from: private */
        public Object toScreenName_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMMessage, Builder> implements IMMessageOrBuilder {
            private int bitField0_;
            private Object fromScreenName_ = "";
            private long messageTime_;
            private int messageType_;
            private Object message_ = "";
            private long nativeHandle_;
            private Object toScreenName_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.fromScreenName_ = "";
                this.bitField0_ &= -2;
                this.toScreenName_ = "";
                this.bitField0_ &= -3;
                this.message_ = "";
                this.bitField0_ &= -5;
                this.messageTime_ = 0;
                this.bitField0_ &= -9;
                this.messageType_ = 0;
                this.bitField0_ &= -17;
                this.nativeHandle_ = 0;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMMessage getDefaultInstanceForType() {
                return IMMessage.getDefaultInstance();
            }

            public IMMessage build() {
                IMMessage buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public IMMessage buildParsed() throws InvalidProtocolBufferException {
                IMMessage buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public IMMessage buildPartial() {
                IMMessage iMMessage = new IMMessage(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                iMMessage.fromScreenName_ = this.fromScreenName_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                iMMessage.toScreenName_ = this.toScreenName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                iMMessage.message_ = this.message_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                iMMessage.messageTime_ = this.messageTime_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                iMMessage.messageType_ = this.messageType_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                iMMessage.nativeHandle_ = this.nativeHandle_;
                iMMessage.bitField0_ = i2;
                return iMMessage;
            }

            public Builder mergeFrom(IMMessage iMMessage) {
                if (iMMessage == IMMessage.getDefaultInstance()) {
                    return this;
                }
                if (iMMessage.hasFromScreenName()) {
                    setFromScreenName(iMMessage.getFromScreenName());
                }
                if (iMMessage.hasToScreenName()) {
                    setToScreenName(iMMessage.getToScreenName());
                }
                if (iMMessage.hasMessage()) {
                    setMessage(iMMessage.getMessage());
                }
                if (iMMessage.hasMessageTime()) {
                    setMessageTime(iMMessage.getMessageTime());
                }
                if (iMMessage.hasMessageType()) {
                    setMessageType(iMMessage.getMessageType());
                }
                if (iMMessage.hasNativeHandle()) {
                    setNativeHandle(iMMessage.getNativeHandle());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasFromScreenName() && hasToScreenName() && hasMessage() && hasMessageTime() && hasMessageType() && hasNativeHandle()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.fromScreenName_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.toScreenName_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.message_ = codedInputStream.readBytes();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.messageTime_ = codedInputStream.readInt64();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.messageType_ = codedInputStream.readInt32();
                    } else if (readTag == 48) {
                        this.bitField0_ |= 32;
                        this.nativeHandle_ = codedInputStream.readInt64();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasFromScreenName() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getFromScreenName() {
                Object obj = this.fromScreenName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fromScreenName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFromScreenName(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.fromScreenName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFromScreenName() {
                this.bitField0_ &= -2;
                this.fromScreenName_ = IMMessage.getDefaultInstance().getFromScreenName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFromScreenName(ByteString byteString) {
                this.bitField0_ |= 1;
                this.fromScreenName_ = byteString;
            }

            public boolean hasToScreenName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getToScreenName() {
                Object obj = this.toScreenName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.toScreenName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setToScreenName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.toScreenName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearToScreenName() {
                this.bitField0_ &= -3;
                this.toScreenName_ = IMMessage.getDefaultInstance().getToScreenName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setToScreenName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.toScreenName_ = byteString;
            }

            public boolean hasMessage() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getMessage() {
                Object obj = this.message_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.message_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMessage(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.message_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMessage() {
                this.bitField0_ &= -5;
                this.message_ = IMMessage.getDefaultInstance().getMessage();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMessage(ByteString byteString) {
                this.bitField0_ |= 4;
                this.message_ = byteString;
            }

            public boolean hasMessageTime() {
                return (this.bitField0_ & 8) == 8;
            }

            public long getMessageTime() {
                return this.messageTime_;
            }

            public Builder setMessageTime(long j) {
                this.bitField0_ |= 8;
                this.messageTime_ = j;
                return this;
            }

            public Builder clearMessageTime() {
                this.bitField0_ &= -9;
                this.messageTime_ = 0;
                return this;
            }

            public boolean hasMessageType() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getMessageType() {
                return this.messageType_;
            }

            public Builder setMessageType(int i) {
                this.bitField0_ |= 16;
                this.messageType_ = i;
                return this;
            }

            public Builder clearMessageType() {
                this.bitField0_ &= -17;
                this.messageType_ = 0;
                return this;
            }

            public boolean hasNativeHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public long getNativeHandle() {
                return this.nativeHandle_;
            }

            public Builder setNativeHandle(long j) {
                this.bitField0_ |= 32;
                this.nativeHandle_ = j;
                return this;
            }

            public Builder clearNativeHandle() {
                this.bitField0_ &= -33;
                this.nativeHandle_ = 0;
                return this;
            }
        }

        private IMMessage(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private IMMessage(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static IMMessage getDefaultInstance() {
            return defaultInstance;
        }

        public IMMessage getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasFromScreenName() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getFromScreenName() {
            Object obj = this.fromScreenName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fromScreenName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFromScreenNameBytes() {
            Object obj = this.fromScreenName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fromScreenName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasToScreenName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getToScreenName() {
            Object obj = this.toScreenName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.toScreenName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getToScreenNameBytes() {
            Object obj = this.toScreenName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.toScreenName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessage() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getMessage() {
            Object obj = this.message_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.message_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMessageBytes() {
            Object obj = this.message_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.message_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessageTime() {
            return (this.bitField0_ & 8) == 8;
        }

        public long getMessageTime() {
            return this.messageTime_;
        }

        public boolean hasMessageType() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getMessageType() {
            return this.messageType_;
        }

        public boolean hasNativeHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public long getNativeHandle() {
            return this.nativeHandle_;
        }

        private void initFields() {
            this.fromScreenName_ = "";
            this.toScreenName_ = "";
            this.message_ = "";
            this.messageTime_ = 0;
            this.messageType_ = 0;
            this.nativeHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasFromScreenName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasToScreenName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessage()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNativeHandle()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getFromScreenNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getToScreenNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getMessageBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt64(4, this.messageTime_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.messageType_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt64(6, this.nativeHandle_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getFromScreenNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getToScreenNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getMessageBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt64Size(4, this.messageTime_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.messageType_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt64Size(6, this.nativeHandle_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMMessage parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static IMMessage parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static IMMessage parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static IMMessage parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static IMMessage parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static IMMessage parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static IMMessage parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static IMMessage parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static IMMessage parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static IMMessage parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMMessage iMMessage) {
            return newBuilder().mergeFrom(iMMessage);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface IMMessageOrBuilder extends MessageLiteOrBuilder {
        String getFromScreenName();

        String getMessage();

        long getMessageTime();

        int getMessageType();

        long getNativeHandle();

        String getToScreenName();

        boolean hasFromScreenName();

        boolean hasMessage();

        boolean hasMessageTime();

        boolean hasMessageType();

        boolean hasNativeHandle();

        boolean hasToScreenName();
    }

    public static final class LocalSearchContactFilter extends GeneratedMessageLite implements LocalSearchContactFilterOrBuilder {
        public static final int KEY_WORD_FIELD_NUMBER = 1;
        public static final int MAX_COUNT_FIELD_NUMBER = 2;
        public static final int MY_NOTE_L10N_FIELD_NUMBER = 5;
        public static final int NEED_SEARCH_BUDDY_FIELD_NUMBER = 3;
        public static final int NEED_SEARCH_CHANNEL_FIELD_NUMBER = 4;
        private static final LocalSearchContactFilter defaultInstance = new LocalSearchContactFilter(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        /* access modifiers changed from: private */
        public long maxCount_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object myNoteL10N_;
        /* access modifiers changed from: private */
        public boolean needSearchBuddy_;
        /* access modifiers changed from: private */
        public boolean needSearchChannel_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<LocalSearchContactFilter, Builder> implements LocalSearchContactFilterOrBuilder {
            private int bitField0_;
            private Object keyWord_ = "";
            private long maxCount_;
            private Object myNoteL10N_ = "";
            private boolean needSearchBuddy_;
            private boolean needSearchChannel_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.keyWord_ = "";
                this.bitField0_ &= -2;
                this.maxCount_ = 0;
                this.bitField0_ &= -3;
                this.needSearchBuddy_ = false;
                this.bitField0_ &= -5;
                this.needSearchChannel_ = false;
                this.bitField0_ &= -9;
                this.myNoteL10N_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public LocalSearchContactFilter getDefaultInstanceForType() {
                return LocalSearchContactFilter.getDefaultInstance();
            }

            public LocalSearchContactFilter build() {
                LocalSearchContactFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public LocalSearchContactFilter buildParsed() throws InvalidProtocolBufferException {
                LocalSearchContactFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public LocalSearchContactFilter buildPartial() {
                LocalSearchContactFilter localSearchContactFilter = new LocalSearchContactFilter(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                localSearchContactFilter.keyWord_ = this.keyWord_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                localSearchContactFilter.maxCount_ = this.maxCount_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                localSearchContactFilter.needSearchBuddy_ = this.needSearchBuddy_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                localSearchContactFilter.needSearchChannel_ = this.needSearchChannel_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                localSearchContactFilter.myNoteL10N_ = this.myNoteL10N_;
                localSearchContactFilter.bitField0_ = i2;
                return localSearchContactFilter;
            }

            public Builder mergeFrom(LocalSearchContactFilter localSearchContactFilter) {
                if (localSearchContactFilter == LocalSearchContactFilter.getDefaultInstance()) {
                    return this;
                }
                if (localSearchContactFilter.hasKeyWord()) {
                    setKeyWord(localSearchContactFilter.getKeyWord());
                }
                if (localSearchContactFilter.hasMaxCount()) {
                    setMaxCount(localSearchContactFilter.getMaxCount());
                }
                if (localSearchContactFilter.hasNeedSearchBuddy()) {
                    setNeedSearchBuddy(localSearchContactFilter.getNeedSearchBuddy());
                }
                if (localSearchContactFilter.hasNeedSearchChannel()) {
                    setNeedSearchChannel(localSearchContactFilter.getNeedSearchChannel());
                }
                if (localSearchContactFilter.hasMyNoteL10N()) {
                    setMyNoteL10N(localSearchContactFilter.getMyNoteL10N());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasKeyWord() && hasMaxCount()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.keyWord_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.maxCount_ = codedInputStream.readInt64();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.needSearchBuddy_ = codedInputStream.readBool();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.needSearchChannel_ = codedInputStream.readBool();
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.myNoteL10N_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -2;
                this.keyWord_ = LocalSearchContactFilter.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 1;
                this.keyWord_ = byteString;
            }

            public boolean hasMaxCount() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getMaxCount() {
                return this.maxCount_;
            }

            public Builder setMaxCount(long j) {
                this.bitField0_ |= 2;
                this.maxCount_ = j;
                return this;
            }

            public Builder clearMaxCount() {
                this.bitField0_ &= -3;
                this.maxCount_ = 0;
                return this;
            }

            public boolean hasNeedSearchBuddy() {
                return (this.bitField0_ & 4) == 4;
            }

            public boolean getNeedSearchBuddy() {
                return this.needSearchBuddy_;
            }

            public Builder setNeedSearchBuddy(boolean z) {
                this.bitField0_ |= 4;
                this.needSearchBuddy_ = z;
                return this;
            }

            public Builder clearNeedSearchBuddy() {
                this.bitField0_ &= -5;
                this.needSearchBuddy_ = false;
                return this;
            }

            public boolean hasNeedSearchChannel() {
                return (this.bitField0_ & 8) == 8;
            }

            public boolean getNeedSearchChannel() {
                return this.needSearchChannel_;
            }

            public Builder setNeedSearchChannel(boolean z) {
                this.bitField0_ |= 8;
                this.needSearchChannel_ = z;
                return this;
            }

            public Builder clearNeedSearchChannel() {
                this.bitField0_ &= -9;
                this.needSearchChannel_ = false;
                return this;
            }

            public boolean hasMyNoteL10N() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getMyNoteL10N() {
                Object obj = this.myNoteL10N_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.myNoteL10N_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMyNoteL10N(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.myNoteL10N_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMyNoteL10N() {
                this.bitField0_ &= -17;
                this.myNoteL10N_ = LocalSearchContactFilter.getDefaultInstance().getMyNoteL10N();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMyNoteL10N(ByteString byteString) {
                this.bitField0_ |= 16;
                this.myNoteL10N_ = byteString;
            }
        }

        private LocalSearchContactFilter(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private LocalSearchContactFilter(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static LocalSearchContactFilter getDefaultInstance() {
            return defaultInstance;
        }

        public LocalSearchContactFilter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMaxCount() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getMaxCount() {
            return this.maxCount_;
        }

        public boolean hasNeedSearchBuddy() {
            return (this.bitField0_ & 4) == 4;
        }

        public boolean getNeedSearchBuddy() {
            return this.needSearchBuddy_;
        }

        public boolean hasNeedSearchChannel() {
            return (this.bitField0_ & 8) == 8;
        }

        public boolean getNeedSearchChannel() {
            return this.needSearchChannel_;
        }

        public boolean hasMyNoteL10N() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getMyNoteL10N() {
            Object obj = this.myNoteL10N_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.myNoteL10N_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMyNoteL10NBytes() {
            Object obj = this.myNoteL10N_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.myNoteL10N_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.keyWord_ = "";
            this.maxCount_ = 0;
            this.needSearchBuddy_ = false;
            this.needSearchChannel_ = false;
            this.myNoteL10N_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMaxCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.maxCount_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBool(3, this.needSearchBuddy_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBool(4, this.needSearchChannel_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getMyNoteL10NBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.maxCount_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBoolSize(3, this.needSearchBuddy_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBoolSize(4, this.needSearchChannel_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getMyNoteL10NBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LocalSearchContactFilter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static LocalSearchContactFilter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchContactFilter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static LocalSearchContactFilter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchContactFilter parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static LocalSearchContactFilter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchContactFilter parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchContactFilter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchContactFilter parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static LocalSearchContactFilter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LocalSearchContactFilter localSearchContactFilter) {
            return newBuilder().mergeFrom(localSearchContactFilter);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface LocalSearchContactFilterOrBuilder extends MessageLiteOrBuilder {
        String getKeyWord();

        long getMaxCount();

        String getMyNoteL10N();

        boolean getNeedSearchBuddy();

        boolean getNeedSearchChannel();

        boolean hasKeyWord();

        boolean hasMaxCount();

        boolean hasMyNoteL10N();

        boolean hasNeedSearchBuddy();

        boolean hasNeedSearchChannel();
    }

    public static final class LocalSearchFileFilter extends GeneratedMessageLite implements LocalSearchFileFilterOrBuilder {
        public static final int FROM_SENDER_JID_FIELD_NUMBER = 4;
        public static final int IN_SESSION_FIELD_NUMBER = 3;
        public static final int KEY_WORD_FIELD_NUMBER = 1;
        public static final int ONLY_IMAGE_FIELD_NUMBER = 5;
        public static final int PAGE_SIZE_FIELD_NUMBER = 2;
        private static final LocalSearchFileFilter defaultInstance = new LocalSearchFileFilter(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object fromSenderJid_;
        /* access modifiers changed from: private */
        public Object inSession_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public boolean onlyImage_;
        /* access modifiers changed from: private */
        public long pageSize_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<LocalSearchFileFilter, Builder> implements LocalSearchFileFilterOrBuilder {
            private int bitField0_;
            private Object fromSenderJid_ = "";
            private Object inSession_ = "";
            private Object keyWord_ = "";
            private boolean onlyImage_;
            private long pageSize_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.keyWord_ = "";
                this.bitField0_ &= -2;
                this.pageSize_ = 0;
                this.bitField0_ &= -3;
                this.inSession_ = "";
                this.bitField0_ &= -5;
                this.fromSenderJid_ = "";
                this.bitField0_ &= -9;
                this.onlyImage_ = false;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public LocalSearchFileFilter getDefaultInstanceForType() {
                return LocalSearchFileFilter.getDefaultInstance();
            }

            public LocalSearchFileFilter build() {
                LocalSearchFileFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public LocalSearchFileFilter buildParsed() throws InvalidProtocolBufferException {
                LocalSearchFileFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public LocalSearchFileFilter buildPartial() {
                LocalSearchFileFilter localSearchFileFilter = new LocalSearchFileFilter(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                localSearchFileFilter.keyWord_ = this.keyWord_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                localSearchFileFilter.pageSize_ = this.pageSize_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                localSearchFileFilter.inSession_ = this.inSession_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                localSearchFileFilter.fromSenderJid_ = this.fromSenderJid_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                localSearchFileFilter.onlyImage_ = this.onlyImage_;
                localSearchFileFilter.bitField0_ = i2;
                return localSearchFileFilter;
            }

            public Builder mergeFrom(LocalSearchFileFilter localSearchFileFilter) {
                if (localSearchFileFilter == LocalSearchFileFilter.getDefaultInstance()) {
                    return this;
                }
                if (localSearchFileFilter.hasKeyWord()) {
                    setKeyWord(localSearchFileFilter.getKeyWord());
                }
                if (localSearchFileFilter.hasPageSize()) {
                    setPageSize(localSearchFileFilter.getPageSize());
                }
                if (localSearchFileFilter.hasInSession()) {
                    setInSession(localSearchFileFilter.getInSession());
                }
                if (localSearchFileFilter.hasFromSenderJid()) {
                    setFromSenderJid(localSearchFileFilter.getFromSenderJid());
                }
                if (localSearchFileFilter.hasOnlyImage()) {
                    setOnlyImage(localSearchFileFilter.getOnlyImage());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasKeyWord() && hasPageSize()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.keyWord_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.pageSize_ = codedInputStream.readInt64();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.inSession_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.fromSenderJid_ = codedInputStream.readBytes();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.onlyImage_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -2;
                this.keyWord_ = LocalSearchFileFilter.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 1;
                this.keyWord_ = byteString;
            }

            public boolean hasPageSize() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getPageSize() {
                return this.pageSize_;
            }

            public Builder setPageSize(long j) {
                this.bitField0_ |= 2;
                this.pageSize_ = j;
                return this;
            }

            public Builder clearPageSize() {
                this.bitField0_ &= -3;
                this.pageSize_ = 0;
                return this;
            }

            public boolean hasInSession() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getInSession() {
                Object obj = this.inSession_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.inSession_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setInSession(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.inSession_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearInSession() {
                this.bitField0_ &= -5;
                this.inSession_ = LocalSearchFileFilter.getDefaultInstance().getInSession();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setInSession(ByteString byteString) {
                this.bitField0_ |= 4;
                this.inSession_ = byteString;
            }

            public boolean hasFromSenderJid() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getFromSenderJid() {
                Object obj = this.fromSenderJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fromSenderJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFromSenderJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.fromSenderJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFromSenderJid() {
                this.bitField0_ &= -9;
                this.fromSenderJid_ = LocalSearchFileFilter.getDefaultInstance().getFromSenderJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFromSenderJid(ByteString byteString) {
                this.bitField0_ |= 8;
                this.fromSenderJid_ = byteString;
            }

            public boolean hasOnlyImage() {
                return (this.bitField0_ & 16) == 16;
            }

            public boolean getOnlyImage() {
                return this.onlyImage_;
            }

            public Builder setOnlyImage(boolean z) {
                this.bitField0_ |= 16;
                this.onlyImage_ = z;
                return this;
            }

            public Builder clearOnlyImage() {
                this.bitField0_ &= -17;
                this.onlyImage_ = false;
                return this;
            }
        }

        private LocalSearchFileFilter(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private LocalSearchFileFilter(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static LocalSearchFileFilter getDefaultInstance() {
            return defaultInstance;
        }

        public LocalSearchFileFilter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPageSize() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getPageSize() {
            return this.pageSize_;
        }

        public boolean hasInSession() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getInSession() {
            Object obj = this.inSession_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.inSession_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getInSessionBytes() {
            Object obj = this.inSession_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.inSession_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasFromSenderJid() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getFromSenderJid() {
            Object obj = this.fromSenderJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fromSenderJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFromSenderJidBytes() {
            Object obj = this.fromSenderJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fromSenderJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasOnlyImage() {
            return (this.bitField0_ & 16) == 16;
        }

        public boolean getOnlyImage() {
            return this.onlyImage_;
        }

        private void initFields() {
            this.keyWord_ = "";
            this.pageSize_ = 0;
            this.inSession_ = "";
            this.fromSenderJid_ = "";
            this.onlyImage_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPageSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.pageSize_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getInSessionBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getFromSenderJidBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBool(5, this.onlyImage_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.pageSize_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getInSessionBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getFromSenderJidBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBoolSize(5, this.onlyImage_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LocalSearchFileFilter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static LocalSearchFileFilter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchFileFilter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static LocalSearchFileFilter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchFileFilter parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static LocalSearchFileFilter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchFileFilter parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchFileFilter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchFileFilter parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static LocalSearchFileFilter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LocalSearchFileFilter localSearchFileFilter) {
            return newBuilder().mergeFrom(localSearchFileFilter);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface LocalSearchFileFilterOrBuilder extends MessageLiteOrBuilder {
        String getFromSenderJid();

        String getInSession();

        String getKeyWord();

        boolean getOnlyImage();

        long getPageSize();

        boolean hasFromSenderJid();

        boolean hasInSession();

        boolean hasKeyWord();

        boolean hasOnlyImage();

        boolean hasPageSize();
    }

    public static final class LocalSearchMSGFilter extends GeneratedMessageLite implements LocalSearchMSGFilterOrBuilder {
        public static final int FROM_SENDER_JID_FIELD_NUMBER = 4;
        public static final int IN_SESSION_FIELD_NUMBER = 3;
        public static final int KEY_WORD_FIELD_NUMBER = 1;
        public static final int PAGE_SIZE_FIELD_NUMBER = 2;
        public static final int SORT_TYPE_FIELD_NUMBER = 5;
        private static final LocalSearchMSGFilter defaultInstance = new LocalSearchMSGFilter(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object fromSenderJid_;
        /* access modifiers changed from: private */
        public Object inSession_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public long pageSize_;
        /* access modifiers changed from: private */
        public int sortType_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<LocalSearchMSGFilter, Builder> implements LocalSearchMSGFilterOrBuilder {
            private int bitField0_;
            private Object fromSenderJid_ = "";
            private Object inSession_ = "";
            private Object keyWord_ = "";
            private long pageSize_;
            private int sortType_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.keyWord_ = "";
                this.bitField0_ &= -2;
                this.pageSize_ = 0;
                this.bitField0_ &= -3;
                this.inSession_ = "";
                this.bitField0_ &= -5;
                this.fromSenderJid_ = "";
                this.bitField0_ &= -9;
                this.sortType_ = 0;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public LocalSearchMSGFilter getDefaultInstanceForType() {
                return LocalSearchMSGFilter.getDefaultInstance();
            }

            public LocalSearchMSGFilter build() {
                LocalSearchMSGFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public LocalSearchMSGFilter buildParsed() throws InvalidProtocolBufferException {
                LocalSearchMSGFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public LocalSearchMSGFilter buildPartial() {
                LocalSearchMSGFilter localSearchMSGFilter = new LocalSearchMSGFilter(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                localSearchMSGFilter.keyWord_ = this.keyWord_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                localSearchMSGFilter.pageSize_ = this.pageSize_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                localSearchMSGFilter.inSession_ = this.inSession_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                localSearchMSGFilter.fromSenderJid_ = this.fromSenderJid_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                localSearchMSGFilter.sortType_ = this.sortType_;
                localSearchMSGFilter.bitField0_ = i2;
                return localSearchMSGFilter;
            }

            public Builder mergeFrom(LocalSearchMSGFilter localSearchMSGFilter) {
                if (localSearchMSGFilter == LocalSearchMSGFilter.getDefaultInstance()) {
                    return this;
                }
                if (localSearchMSGFilter.hasKeyWord()) {
                    setKeyWord(localSearchMSGFilter.getKeyWord());
                }
                if (localSearchMSGFilter.hasPageSize()) {
                    setPageSize(localSearchMSGFilter.getPageSize());
                }
                if (localSearchMSGFilter.hasInSession()) {
                    setInSession(localSearchMSGFilter.getInSession());
                }
                if (localSearchMSGFilter.hasFromSenderJid()) {
                    setFromSenderJid(localSearchMSGFilter.getFromSenderJid());
                }
                if (localSearchMSGFilter.hasSortType()) {
                    setSortType(localSearchMSGFilter.getSortType());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasKeyWord() && hasPageSize()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.keyWord_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.pageSize_ = codedInputStream.readInt64();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.inSession_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.fromSenderJid_ = codedInputStream.readBytes();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.sortType_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -2;
                this.keyWord_ = LocalSearchMSGFilter.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 1;
                this.keyWord_ = byteString;
            }

            public boolean hasPageSize() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getPageSize() {
                return this.pageSize_;
            }

            public Builder setPageSize(long j) {
                this.bitField0_ |= 2;
                this.pageSize_ = j;
                return this;
            }

            public Builder clearPageSize() {
                this.bitField0_ &= -3;
                this.pageSize_ = 0;
                return this;
            }

            public boolean hasInSession() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getInSession() {
                Object obj = this.inSession_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.inSession_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setInSession(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.inSession_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearInSession() {
                this.bitField0_ &= -5;
                this.inSession_ = LocalSearchMSGFilter.getDefaultInstance().getInSession();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setInSession(ByteString byteString) {
                this.bitField0_ |= 4;
                this.inSession_ = byteString;
            }

            public boolean hasFromSenderJid() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getFromSenderJid() {
                Object obj = this.fromSenderJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fromSenderJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFromSenderJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.fromSenderJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFromSenderJid() {
                this.bitField0_ &= -9;
                this.fromSenderJid_ = LocalSearchMSGFilter.getDefaultInstance().getFromSenderJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFromSenderJid(ByteString byteString) {
                this.bitField0_ |= 8;
                this.fromSenderJid_ = byteString;
            }

            public boolean hasSortType() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getSortType() {
                return this.sortType_;
            }

            public Builder setSortType(int i) {
                this.bitField0_ |= 16;
                this.sortType_ = i;
                return this;
            }

            public Builder clearSortType() {
                this.bitField0_ &= -17;
                this.sortType_ = 0;
                return this;
            }
        }

        private LocalSearchMSGFilter(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private LocalSearchMSGFilter(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static LocalSearchMSGFilter getDefaultInstance() {
            return defaultInstance;
        }

        public LocalSearchMSGFilter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPageSize() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getPageSize() {
            return this.pageSize_;
        }

        public boolean hasInSession() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getInSession() {
            Object obj = this.inSession_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.inSession_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getInSessionBytes() {
            Object obj = this.inSession_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.inSession_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasFromSenderJid() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getFromSenderJid() {
            Object obj = this.fromSenderJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fromSenderJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFromSenderJidBytes() {
            Object obj = this.fromSenderJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fromSenderJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSortType() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getSortType() {
            return this.sortType_;
        }

        private void initFields() {
            this.keyWord_ = "";
            this.pageSize_ = 0;
            this.inSession_ = "";
            this.fromSenderJid_ = "";
            this.sortType_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPageSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.pageSize_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getInSessionBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getFromSenderJidBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.sortType_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.pageSize_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getInSessionBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getFromSenderJidBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.sortType_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LocalSearchMSGFilter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static LocalSearchMSGFilter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchMSGFilter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static LocalSearchMSGFilter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchMSGFilter parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static LocalSearchMSGFilter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchMSGFilter parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchMSGFilter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchMSGFilter parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static LocalSearchMSGFilter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LocalSearchMSGFilter localSearchMSGFilter) {
            return newBuilder().mergeFrom(localSearchMSGFilter);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface LocalSearchMSGFilterOrBuilder extends MessageLiteOrBuilder {
        String getFromSenderJid();

        String getInSession();

        String getKeyWord();

        long getPageSize();

        int getSortType();

        boolean hasFromSenderJid();

        boolean hasInSession();

        boolean hasKeyWord();

        boolean hasPageSize();

        boolean hasSortType();
    }

    public static final class LocalSearchMsgCtx extends GeneratedMessageLite implements LocalSearchMsgCtxOrBuilder {
        public static final int SESSIONID_FIELD_NUMBER = 1;
        private static final LocalSearchMsgCtx defaultInstance = new LocalSearchMsgCtx(true);
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public LazyStringList sessionid_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<LocalSearchMsgCtx, Builder> implements LocalSearchMsgCtxOrBuilder {
            private int bitField0_;
            private LazyStringList sessionid_ = LazyStringArrayList.EMPTY;

            private void maybeForceBuilderInitialization() {
            }

            public final boolean isInitialized() {
                return true;
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionid_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public LocalSearchMsgCtx getDefaultInstanceForType() {
                return LocalSearchMsgCtx.getDefaultInstance();
            }

            public LocalSearchMsgCtx build() {
                LocalSearchMsgCtx buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public LocalSearchMsgCtx buildParsed() throws InvalidProtocolBufferException {
                LocalSearchMsgCtx buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public LocalSearchMsgCtx buildPartial() {
                LocalSearchMsgCtx localSearchMsgCtx = new LocalSearchMsgCtx(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.sessionid_ = new UnmodifiableLazyStringList(this.sessionid_);
                    this.bitField0_ &= -2;
                }
                localSearchMsgCtx.sessionid_ = this.sessionid_;
                return localSearchMsgCtx;
            }

            public Builder mergeFrom(LocalSearchMsgCtx localSearchMsgCtx) {
                if (localSearchMsgCtx != LocalSearchMsgCtx.getDefaultInstance() && !localSearchMsgCtx.sessionid_.isEmpty()) {
                    if (this.sessionid_.isEmpty()) {
                        this.sessionid_ = localSearchMsgCtx.sessionid_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureSessionidIsMutable();
                        this.sessionid_.addAll(localSearchMsgCtx.sessionid_);
                    }
                }
                return this;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        ensureSessionidIsMutable();
                        this.sessionid_.add(codedInputStream.readBytes());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureSessionidIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.sessionid_ = new LazyStringArrayList(this.sessionid_);
                    this.bitField0_ |= 1;
                }
            }

            public List<String> getSessionidList() {
                return Collections.unmodifiableList(this.sessionid_);
            }

            public int getSessionidCount() {
                return this.sessionid_.size();
            }

            public String getSessionid(int i) {
                return (String) this.sessionid_.get(i);
            }

            public Builder setSessionid(int i, String str) {
                if (str != null) {
                    ensureSessionidIsMutable();
                    this.sessionid_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSessionid(String str) {
                if (str != null) {
                    ensureSessionidIsMutable();
                    this.sessionid_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllSessionid(Iterable<String> iterable) {
                ensureSessionidIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.sessionid_);
                return this;
            }

            public Builder clearSessionid() {
                this.sessionid_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -2;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addSessionid(ByteString byteString) {
                ensureSessionidIsMutable();
                this.sessionid_.add(byteString);
            }
        }

        private LocalSearchMsgCtx(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private LocalSearchMsgCtx(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static LocalSearchMsgCtx getDefaultInstance() {
            return defaultInstance;
        }

        public LocalSearchMsgCtx getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<String> getSessionidList() {
            return this.sessionid_;
        }

        public int getSessionidCount() {
            return this.sessionid_.size();
        }

        public String getSessionid(int i) {
            return (String) this.sessionid_.get(i);
        }

        private void initFields() {
            this.sessionid_ = LazyStringArrayList.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.sessionid_.size(); i++) {
                codedOutputStream.writeBytes(1, this.sessionid_.getByteString(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.sessionid_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.sessionid_.getByteString(i3));
            }
            int size = 0 + i2 + (getSessionidList().size() * 1);
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LocalSearchMsgCtx parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static LocalSearchMsgCtx parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchMsgCtx parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static LocalSearchMsgCtx parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchMsgCtx parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static LocalSearchMsgCtx parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static LocalSearchMsgCtx parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchMsgCtx parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalSearchMsgCtx parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static LocalSearchMsgCtx parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LocalSearchMsgCtx localSearchMsgCtx) {
            return newBuilder().mergeFrom(localSearchMsgCtx);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface LocalSearchMsgCtxOrBuilder extends MessageLiteOrBuilder {
        String getSessionid(int i);

        int getSessionidCount();

        List<String> getSessionidList();
    }

    public static final class LocalStorageTimeInterval extends GeneratedMessageLite implements LocalStorageTimeIntervalOrBuilder {
        public static final int DAY_FIELD_NUMBER = 3;
        public static final int ERASETIME_FIELD_NUMBER = 4;
        public static final int MONTH_FIELD_NUMBER = 2;
        public static final int YEAR_FIELD_NUMBER = 1;
        private static final LocalStorageTimeInterval defaultInstance = new LocalStorageTimeInterval(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public long day_;
        /* access modifiers changed from: private */
        public long eraseTime_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public long month_;
        /* access modifiers changed from: private */
        public long year_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<LocalStorageTimeInterval, Builder> implements LocalStorageTimeIntervalOrBuilder {
            private int bitField0_;
            private long day_;
            private long eraseTime_;
            private long month_;
            private long year_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.year_ = 0;
                this.bitField0_ &= -2;
                this.month_ = 0;
                this.bitField0_ &= -3;
                this.day_ = 0;
                this.bitField0_ &= -5;
                this.eraseTime_ = 0;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public LocalStorageTimeInterval getDefaultInstanceForType() {
                return LocalStorageTimeInterval.getDefaultInstance();
            }

            public LocalStorageTimeInterval build() {
                LocalStorageTimeInterval buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public LocalStorageTimeInterval buildParsed() throws InvalidProtocolBufferException {
                LocalStorageTimeInterval buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public LocalStorageTimeInterval buildPartial() {
                LocalStorageTimeInterval localStorageTimeInterval = new LocalStorageTimeInterval(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                localStorageTimeInterval.year_ = this.year_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                localStorageTimeInterval.month_ = this.month_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                localStorageTimeInterval.day_ = this.day_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                localStorageTimeInterval.eraseTime_ = this.eraseTime_;
                localStorageTimeInterval.bitField0_ = i2;
                return localStorageTimeInterval;
            }

            public Builder mergeFrom(LocalStorageTimeInterval localStorageTimeInterval) {
                if (localStorageTimeInterval == LocalStorageTimeInterval.getDefaultInstance()) {
                    return this;
                }
                if (localStorageTimeInterval.hasYear()) {
                    setYear(localStorageTimeInterval.getYear());
                }
                if (localStorageTimeInterval.hasMonth()) {
                    setMonth(localStorageTimeInterval.getMonth());
                }
                if (localStorageTimeInterval.hasDay()) {
                    setDay(localStorageTimeInterval.getDay());
                }
                if (localStorageTimeInterval.hasEraseTime()) {
                    setEraseTime(localStorageTimeInterval.getEraseTime());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasYear() && hasMonth() && hasDay() && hasEraseTime()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.year_ = codedInputStream.readInt64();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.month_ = codedInputStream.readInt64();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.day_ = codedInputStream.readInt64();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.eraseTime_ = codedInputStream.readInt64();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasYear() {
                return (this.bitField0_ & 1) == 1;
            }

            public long getYear() {
                return this.year_;
            }

            public Builder setYear(long j) {
                this.bitField0_ |= 1;
                this.year_ = j;
                return this;
            }

            public Builder clearYear() {
                this.bitField0_ &= -2;
                this.year_ = 0;
                return this;
            }

            public boolean hasMonth() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getMonth() {
                return this.month_;
            }

            public Builder setMonth(long j) {
                this.bitField0_ |= 2;
                this.month_ = j;
                return this;
            }

            public Builder clearMonth() {
                this.bitField0_ &= -3;
                this.month_ = 0;
                return this;
            }

            public boolean hasDay() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getDay() {
                return this.day_;
            }

            public Builder setDay(long j) {
                this.bitField0_ |= 4;
                this.day_ = j;
                return this;
            }

            public Builder clearDay() {
                this.bitField0_ &= -5;
                this.day_ = 0;
                return this;
            }

            public boolean hasEraseTime() {
                return (this.bitField0_ & 8) == 8;
            }

            public long getEraseTime() {
                return this.eraseTime_;
            }

            public Builder setEraseTime(long j) {
                this.bitField0_ |= 8;
                this.eraseTime_ = j;
                return this;
            }

            public Builder clearEraseTime() {
                this.bitField0_ &= -9;
                this.eraseTime_ = 0;
                return this;
            }
        }

        private LocalStorageTimeInterval(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private LocalStorageTimeInterval(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static LocalStorageTimeInterval getDefaultInstance() {
            return defaultInstance;
        }

        public LocalStorageTimeInterval getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasYear() {
            return (this.bitField0_ & 1) == 1;
        }

        public long getYear() {
            return this.year_;
        }

        public boolean hasMonth() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getMonth() {
            return this.month_;
        }

        public boolean hasDay() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getDay() {
            return this.day_;
        }

        public boolean hasEraseTime() {
            return (this.bitField0_ & 8) == 8;
        }

        public long getEraseTime() {
            return this.eraseTime_;
        }

        private void initFields() {
            this.year_ = 0;
            this.month_ = 0;
            this.day_ = 0;
            this.eraseTime_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasYear()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMonth()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDay()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEraseTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt64(1, this.year_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.month_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.day_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt64(4, this.eraseTime_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt64Size(1, this.year_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.month_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt64Size(3, this.day_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt64Size(4, this.eraseTime_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LocalStorageTimeInterval parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static LocalStorageTimeInterval parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static LocalStorageTimeInterval parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static LocalStorageTimeInterval parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static LocalStorageTimeInterval parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static LocalStorageTimeInterval parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static LocalStorageTimeInterval parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalStorageTimeInterval parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static LocalStorageTimeInterval parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static LocalStorageTimeInterval parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LocalStorageTimeInterval localStorageTimeInterval) {
            return newBuilder().mergeFrom(localStorageTimeInterval);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface LocalStorageTimeIntervalOrBuilder extends MessageLiteOrBuilder {
        long getDay();

        long getEraseTime();

        long getMonth();

        long getYear();

        boolean hasDay();

        boolean hasEraseTime();

        boolean hasMonth();

        boolean hasYear();
    }

    public static final class MUCNotifySettingItem extends GeneratedMessageLite implements MUCNotifySettingItemOrBuilder {
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        public static final int TYPE_FIELD_NUMBER = 2;
        private static final MUCNotifySettingItem defaultInstance = new MUCNotifySettingItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MUCNotifySettingItem, Builder> implements MUCNotifySettingItemOrBuilder {
            private int bitField0_;
            private Object sessionId_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.type_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MUCNotifySettingItem getDefaultInstanceForType() {
                return MUCNotifySettingItem.getDefaultInstance();
            }

            public MUCNotifySettingItem build() {
                MUCNotifySettingItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MUCNotifySettingItem buildParsed() throws InvalidProtocolBufferException {
                MUCNotifySettingItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MUCNotifySettingItem buildPartial() {
                MUCNotifySettingItem mUCNotifySettingItem = new MUCNotifySettingItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                mUCNotifySettingItem.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                mUCNotifySettingItem.type_ = this.type_;
                mUCNotifySettingItem.bitField0_ = i2;
                return mUCNotifySettingItem;
            }

            public Builder mergeFrom(MUCNotifySettingItem mUCNotifySettingItem) {
                if (mUCNotifySettingItem == MUCNotifySettingItem.getDefaultInstance()) {
                    return this;
                }
                if (mUCNotifySettingItem.hasSessionId()) {
                    setSessionId(mUCNotifySettingItem.getSessionId());
                }
                if (mUCNotifySettingItem.hasType()) {
                    setType(mUCNotifySettingItem.getType());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasType()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.type_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = MUCNotifySettingItem.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasType() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 2;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -3;
                this.type_ = 0;
                return this;
            }
        }

        private MUCNotifySettingItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MUCNotifySettingItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MUCNotifySettingItem getDefaultInstance() {
            return defaultInstance;
        }

        public MUCNotifySettingItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasType() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getType() {
            return this.type_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.type_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.type_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.type_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MUCNotifySettingItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MUCNotifySettingItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MUCNotifySettingItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MUCNotifySettingItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MUCNotifySettingItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MUCNotifySettingItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MUCNotifySettingItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MUCNotifySettingItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MUCNotifySettingItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MUCNotifySettingItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MUCNotifySettingItem mUCNotifySettingItem) {
            return newBuilder().mergeFrom(mUCNotifySettingItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MUCNotifySettingItemOrBuilder extends MessageLiteOrBuilder {
        String getSessionId();

        int getType();

        boolean hasSessionId();

        boolean hasType();
    }

    public static final class MUCNotifySettings extends GeneratedMessageLite implements MUCNotifySettingsOrBuilder {
        public static final int ITEMS_FIELD_NUMBER = 1;
        private static final MUCNotifySettings defaultInstance = new MUCNotifySettings(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<MUCNotifySettingItem> items_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MUCNotifySettings, Builder> implements MUCNotifySettingsOrBuilder {
            private int bitField0_;
            private List<MUCNotifySettingItem> items_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.items_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MUCNotifySettings getDefaultInstanceForType() {
                return MUCNotifySettings.getDefaultInstance();
            }

            public MUCNotifySettings build() {
                MUCNotifySettings buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MUCNotifySettings buildParsed() throws InvalidProtocolBufferException {
                MUCNotifySettings buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MUCNotifySettings buildPartial() {
                MUCNotifySettings mUCNotifySettings = new MUCNotifySettings(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.items_ = Collections.unmodifiableList(this.items_);
                    this.bitField0_ &= -2;
                }
                mUCNotifySettings.items_ = this.items_;
                return mUCNotifySettings;
            }

            public Builder mergeFrom(MUCNotifySettings mUCNotifySettings) {
                if (mUCNotifySettings != MUCNotifySettings.getDefaultInstance() && !mUCNotifySettings.items_.isEmpty()) {
                    if (this.items_.isEmpty()) {
                        this.items_ = mUCNotifySettings.items_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureItemsIsMutable();
                        this.items_.addAll(mUCNotifySettings.items_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getItemsCount(); i++) {
                    if (!getItems(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = MUCNotifySettingItem.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addItems(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureItemsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.items_ = new ArrayList(this.items_);
                    this.bitField0_ |= 1;
                }
            }

            public List<MUCNotifySettingItem> getItemsList() {
                return Collections.unmodifiableList(this.items_);
            }

            public int getItemsCount() {
                return this.items_.size();
            }

            public MUCNotifySettingItem getItems(int i) {
                return (MUCNotifySettingItem) this.items_.get(i);
            }

            public Builder setItems(int i, MUCNotifySettingItem mUCNotifySettingItem) {
                if (mUCNotifySettingItem != null) {
                    ensureItemsIsMutable();
                    this.items_.set(i, mUCNotifySettingItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setItems(int i, Builder builder) {
                ensureItemsIsMutable();
                this.items_.set(i, builder.build());
                return this;
            }

            public Builder addItems(MUCNotifySettingItem mUCNotifySettingItem) {
                if (mUCNotifySettingItem != null) {
                    ensureItemsIsMutable();
                    this.items_.add(mUCNotifySettingItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addItems(int i, MUCNotifySettingItem mUCNotifySettingItem) {
                if (mUCNotifySettingItem != null) {
                    ensureItemsIsMutable();
                    this.items_.add(i, mUCNotifySettingItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addItems(Builder builder) {
                ensureItemsIsMutable();
                this.items_.add(builder.build());
                return this;
            }

            public Builder addItems(int i, Builder builder) {
                ensureItemsIsMutable();
                this.items_.add(i, builder.build());
                return this;
            }

            public Builder addAllItems(Iterable<? extends MUCNotifySettingItem> iterable) {
                ensureItemsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.items_);
                return this;
            }

            public Builder clearItems() {
                this.items_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeItems(int i) {
                ensureItemsIsMutable();
                this.items_.remove(i);
                return this;
            }
        }

        private MUCNotifySettings(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MUCNotifySettings(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MUCNotifySettings getDefaultInstance() {
            return defaultInstance;
        }

        public MUCNotifySettings getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<MUCNotifySettingItem> getItemsList() {
            return this.items_;
        }

        public List<? extends MUCNotifySettingItemOrBuilder> getItemsOrBuilderList() {
            return this.items_;
        }

        public int getItemsCount() {
            return this.items_.size();
        }

        public MUCNotifySettingItem getItems(int i) {
            return (MUCNotifySettingItem) this.items_.get(i);
        }

        public MUCNotifySettingItemOrBuilder getItemsOrBuilder(int i) {
            return (MUCNotifySettingItemOrBuilder) this.items_.get(i);
        }

        private void initFields() {
            this.items_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getItemsCount(); i++) {
                if (!getItems(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.items_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.items_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.items_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.items_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MUCNotifySettings parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MUCNotifySettings parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MUCNotifySettings parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MUCNotifySettings parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MUCNotifySettings parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MUCNotifySettings parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MUCNotifySettings parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MUCNotifySettings parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MUCNotifySettings parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MUCNotifySettings parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MUCNotifySettings mUCNotifySettings) {
            return newBuilder().mergeFrom(mUCNotifySettings);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MUCNotifySettingsOrBuilder extends MessageLiteOrBuilder {
        MUCNotifySettingItem getItems(int i);

        int getItemsCount();

        List<MUCNotifySettingItem> getItemsList();
    }

    public static final class MakeGroupFailedByIBInfo extends GeneratedMessageLite implements MakeGroupFailedByIBInfoOrBuilder {
        public static final int ALLOWEDBUDDIES_FIELD_NUMBER = 3;
        public static final int GROUPNAME_FIELD_NUMBER = 2;
        public static final int MAKEGROUPREQID_FIELD_NUMBER = 1;
        public static final int NOTALLOWEDBUDDIES_FIELD_NUMBER = 4;
        private static final MakeGroupFailedByIBInfo defaultInstance = new MakeGroupFailedByIBInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<BuddyUserInfo> allowedBuddies_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public Object makeGroupReqID_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<BuddyUserInfo> notAllowedBuddies_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MakeGroupFailedByIBInfo, Builder> implements MakeGroupFailedByIBInfoOrBuilder {
            private List<BuddyUserInfo> allowedBuddies_ = Collections.emptyList();
            private int bitField0_;
            private Object groupName_ = "";
            private Object makeGroupReqID_ = "";
            private List<BuddyUserInfo> notAllowedBuddies_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.makeGroupReqID_ = "";
                this.bitField0_ &= -2;
                this.groupName_ = "";
                this.bitField0_ &= -3;
                this.allowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -5;
                this.notAllowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MakeGroupFailedByIBInfo getDefaultInstanceForType() {
                return MakeGroupFailedByIBInfo.getDefaultInstance();
            }

            public MakeGroupFailedByIBInfo build() {
                MakeGroupFailedByIBInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MakeGroupFailedByIBInfo buildParsed() throws InvalidProtocolBufferException {
                MakeGroupFailedByIBInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MakeGroupFailedByIBInfo buildPartial() {
                MakeGroupFailedByIBInfo makeGroupFailedByIBInfo = new MakeGroupFailedByIBInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                makeGroupFailedByIBInfo.makeGroupReqID_ = this.makeGroupReqID_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                makeGroupFailedByIBInfo.groupName_ = this.groupName_;
                if ((this.bitField0_ & 4) == 4) {
                    this.allowedBuddies_ = Collections.unmodifiableList(this.allowedBuddies_);
                    this.bitField0_ &= -5;
                }
                makeGroupFailedByIBInfo.allowedBuddies_ = this.allowedBuddies_;
                if ((this.bitField0_ & 8) == 8) {
                    this.notAllowedBuddies_ = Collections.unmodifiableList(this.notAllowedBuddies_);
                    this.bitField0_ &= -9;
                }
                makeGroupFailedByIBInfo.notAllowedBuddies_ = this.notAllowedBuddies_;
                makeGroupFailedByIBInfo.bitField0_ = i2;
                return makeGroupFailedByIBInfo;
            }

            public Builder mergeFrom(MakeGroupFailedByIBInfo makeGroupFailedByIBInfo) {
                if (makeGroupFailedByIBInfo == MakeGroupFailedByIBInfo.getDefaultInstance()) {
                    return this;
                }
                if (makeGroupFailedByIBInfo.hasMakeGroupReqID()) {
                    setMakeGroupReqID(makeGroupFailedByIBInfo.getMakeGroupReqID());
                }
                if (makeGroupFailedByIBInfo.hasGroupName()) {
                    setGroupName(makeGroupFailedByIBInfo.getGroupName());
                }
                if (!makeGroupFailedByIBInfo.allowedBuddies_.isEmpty()) {
                    if (this.allowedBuddies_.isEmpty()) {
                        this.allowedBuddies_ = makeGroupFailedByIBInfo.allowedBuddies_;
                        this.bitField0_ &= -5;
                    } else {
                        ensureAllowedBuddiesIsMutable();
                        this.allowedBuddies_.addAll(makeGroupFailedByIBInfo.allowedBuddies_);
                    }
                }
                if (!makeGroupFailedByIBInfo.notAllowedBuddies_.isEmpty()) {
                    if (this.notAllowedBuddies_.isEmpty()) {
                        this.notAllowedBuddies_ = makeGroupFailedByIBInfo.notAllowedBuddies_;
                        this.bitField0_ &= -9;
                    } else {
                        ensureNotAllowedBuddiesIsMutable();
                        this.notAllowedBuddies_.addAll(makeGroupFailedByIBInfo.notAllowedBuddies_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMakeGroupReqID() || !hasGroupName()) {
                    return false;
                }
                for (int i = 0; i < getAllowedBuddiesCount(); i++) {
                    if (!getAllowedBuddies(i).isInitialized()) {
                        return false;
                    }
                }
                for (int i2 = 0; i2 < getNotAllowedBuddiesCount(); i2++) {
                    if (!getNotAllowedBuddies(i2).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.makeGroupReqID_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.groupName_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        Builder newBuilder = BuddyUserInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addAllowedBuddies(newBuilder.buildPartial());
                    } else if (readTag == 34) {
                        Builder newBuilder2 = BuddyUserInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder2, extensionRegistryLite);
                        addNotAllowedBuddies(newBuilder2.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasMakeGroupReqID() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getMakeGroupReqID() {
                Object obj = this.makeGroupReqID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.makeGroupReqID_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMakeGroupReqID(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.makeGroupReqID_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMakeGroupReqID() {
                this.bitField0_ &= -2;
                this.makeGroupReqID_ = MakeGroupFailedByIBInfo.getDefaultInstance().getMakeGroupReqID();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMakeGroupReqID(ByteString byteString) {
                this.bitField0_ |= 1;
                this.makeGroupReqID_ = byteString;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.groupName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setGroupName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.groupName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -3;
                this.groupName_ = MakeGroupFailedByIBInfo.getDefaultInstance().getGroupName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setGroupName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.groupName_ = byteString;
            }

            private void ensureAllowedBuddiesIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.allowedBuddies_ = new ArrayList(this.allowedBuddies_);
                    this.bitField0_ |= 4;
                }
            }

            public List<BuddyUserInfo> getAllowedBuddiesList() {
                return Collections.unmodifiableList(this.allowedBuddies_);
            }

            public int getAllowedBuddiesCount() {
                return this.allowedBuddies_.size();
            }

            public BuddyUserInfo getAllowedBuddies(int i) {
                return (BuddyUserInfo) this.allowedBuddies_.get(i);
            }

            public Builder setAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureAllowedBuddiesIsMutable();
                    this.allowedBuddies_.set(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setAllowedBuddies(int i, Builder builder) {
                ensureAllowedBuddiesIsMutable();
                this.allowedBuddies_.set(i, builder.build());
                return this;
            }

            public Builder addAllowedBuddies(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureAllowedBuddiesIsMutable();
                    this.allowedBuddies_.add(buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureAllowedBuddiesIsMutable();
                    this.allowedBuddies_.add(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllowedBuddies(Builder builder) {
                ensureAllowedBuddiesIsMutable();
                this.allowedBuddies_.add(builder.build());
                return this;
            }

            public Builder addAllowedBuddies(int i, Builder builder) {
                ensureAllowedBuddiesIsMutable();
                this.allowedBuddies_.add(i, builder.build());
                return this;
            }

            public Builder addAllAllowedBuddies(Iterable<? extends BuddyUserInfo> iterable) {
                ensureAllowedBuddiesIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.allowedBuddies_);
                return this;
            }

            public Builder clearAllowedBuddies() {
                this.allowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder removeAllowedBuddies(int i) {
                ensureAllowedBuddiesIsMutable();
                this.allowedBuddies_.remove(i);
                return this;
            }

            private void ensureNotAllowedBuddiesIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.notAllowedBuddies_ = new ArrayList(this.notAllowedBuddies_);
                    this.bitField0_ |= 8;
                }
            }

            public List<BuddyUserInfo> getNotAllowedBuddiesList() {
                return Collections.unmodifiableList(this.notAllowedBuddies_);
            }

            public int getNotAllowedBuddiesCount() {
                return this.notAllowedBuddies_.size();
            }

            public BuddyUserInfo getNotAllowedBuddies(int i) {
                return (BuddyUserInfo) this.notAllowedBuddies_.get(i);
            }

            public Builder setNotAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.set(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setNotAllowedBuddies(int i, Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.set(i, builder.build());
                return this;
            }

            public Builder addNotAllowedBuddies(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.add(buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addNotAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.add(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addNotAllowedBuddies(Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.add(builder.build());
                return this;
            }

            public Builder addNotAllowedBuddies(int i, Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.add(i, builder.build());
                return this;
            }

            public Builder addAllNotAllowedBuddies(Iterable<? extends BuddyUserInfo> iterable) {
                ensureNotAllowedBuddiesIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.notAllowedBuddies_);
                return this;
            }

            public Builder clearNotAllowedBuddies() {
                this.notAllowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            public Builder removeNotAllowedBuddies(int i) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.remove(i);
                return this;
            }
        }

        private MakeGroupFailedByIBInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MakeGroupFailedByIBInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MakeGroupFailedByIBInfo getDefaultInstance() {
            return defaultInstance;
        }

        public MakeGroupFailedByIBInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasMakeGroupReqID() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getMakeGroupReqID() {
            Object obj = this.makeGroupReqID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.makeGroupReqID_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMakeGroupReqIDBytes() {
            Object obj = this.makeGroupReqID_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.makeGroupReqID_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<BuddyUserInfo> getAllowedBuddiesList() {
            return this.allowedBuddies_;
        }

        public List<? extends BuddyUserInfoOrBuilder> getAllowedBuddiesOrBuilderList() {
            return this.allowedBuddies_;
        }

        public int getAllowedBuddiesCount() {
            return this.allowedBuddies_.size();
        }

        public BuddyUserInfo getAllowedBuddies(int i) {
            return (BuddyUserInfo) this.allowedBuddies_.get(i);
        }

        public BuddyUserInfoOrBuilder getAllowedBuddiesOrBuilder(int i) {
            return (BuddyUserInfoOrBuilder) this.allowedBuddies_.get(i);
        }

        public List<BuddyUserInfo> getNotAllowedBuddiesList() {
            return this.notAllowedBuddies_;
        }

        public List<? extends BuddyUserInfoOrBuilder> getNotAllowedBuddiesOrBuilderList() {
            return this.notAllowedBuddies_;
        }

        public int getNotAllowedBuddiesCount() {
            return this.notAllowedBuddies_.size();
        }

        public BuddyUserInfo getNotAllowedBuddies(int i) {
            return (BuddyUserInfo) this.notAllowedBuddies_.get(i);
        }

        public BuddyUserInfoOrBuilder getNotAllowedBuddiesOrBuilder(int i) {
            return (BuddyUserInfoOrBuilder) this.notAllowedBuddies_.get(i);
        }

        private void initFields() {
            this.makeGroupReqID_ = "";
            this.groupName_ = "";
            this.allowedBuddies_ = Collections.emptyList();
            this.notAllowedBuddies_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasMakeGroupReqID()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getAllowedBuddiesCount(); i++) {
                    if (!getAllowedBuddies(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                for (int i2 = 0; i2 < getNotAllowedBuddiesCount(); i2++) {
                    if (!getNotAllowedBuddies(i2).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getMakeGroupReqIDBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getGroupNameBytes());
            }
            for (int i = 0; i < this.allowedBuddies_.size(); i++) {
                codedOutputStream.writeMessage(3, (MessageLite) this.allowedBuddies_.get(i));
            }
            for (int i2 = 0; i2 < this.notAllowedBuddies_.size(); i2++) {
                codedOutputStream.writeMessage(4, (MessageLite) this.notAllowedBuddies_.get(i2));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getMakeGroupReqIDBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getGroupNameBytes());
            }
            int i2 = computeBytesSize;
            for (int i3 = 0; i3 < this.allowedBuddies_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(3, (MessageLite) this.allowedBuddies_.get(i3));
            }
            for (int i4 = 0; i4 < this.notAllowedBuddies_.size(); i4++) {
                i2 += CodedOutputStream.computeMessageSize(4, (MessageLite) this.notAllowedBuddies_.get(i4));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MakeGroupFailedByIBInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MakeGroupFailedByIBInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MakeGroupFailedByIBInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MakeGroupFailedByIBInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MakeGroupFailedByIBInfo makeGroupFailedByIBInfo) {
            return newBuilder().mergeFrom(makeGroupFailedByIBInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MakeGroupFailedByIBInfoOrBuilder extends MessageLiteOrBuilder {
        BuddyUserInfo getAllowedBuddies(int i);

        int getAllowedBuddiesCount();

        List<BuddyUserInfo> getAllowedBuddiesList();

        String getGroupName();

        String getMakeGroupReqID();

        BuddyUserInfo getNotAllowedBuddies(int i);

        int getNotAllowedBuddiesCount();

        List<BuddyUserInfo> getNotAllowedBuddiesList();

        boolean hasGroupName();

        boolean hasMakeGroupReqID();
    }

    public static final class MessageContentSearchFilter extends GeneratedMessageLite implements MessageContentSearchFilterOrBuilder {
        public static final int KEYWORD_FIELD_NUMBER = 1;
        public static final int LAST_RECORD_TIME_FIELD_NUMBER = 7;
        public static final int PAGENUM_FIELD_NUMBER = 3;
        public static final int PAGESIZE_FIELD_NUMBER = 2;
        public static final int SCOPE_FIELD_NUMBER = 8;
        public static final int SEARCH_TIME_FIELD_NUMBER = 6;
        public static final int SENDBY_ID_FIELD_NUMBER = 5;
        public static final int SENDERINFO_FIELD_NUMBER = 4;
        public static final int SORT_TYPE_FIELD_NUMBER = 9;
        private static final MessageContentSearchFilter defaultInstance = new MessageContentSearchFilter(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        /* access modifiers changed from: private */
        public long lastRecordTime_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int pageNum_;
        /* access modifiers changed from: private */
        public int pageSize_;
        /* access modifiers changed from: private */
        public int scope_;
        /* access modifiers changed from: private */
        public long searchTime_;
        /* access modifiers changed from: private */
        public Object sendbyId_;
        /* access modifiers changed from: private */
        public List<MessageSenderFilter> senderInfo_;
        /* access modifiers changed from: private */
        public int sortType_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageContentSearchFilter, Builder> implements MessageContentSearchFilterOrBuilder {
            private int bitField0_;
            private Object keyWord_ = "";
            private long lastRecordTime_;
            private int pageNum_;
            private int pageSize_;
            private int scope_;
            private long searchTime_;
            private Object sendbyId_ = "";
            private List<MessageSenderFilter> senderInfo_ = Collections.emptyList();
            private int sortType_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.keyWord_ = "";
                this.bitField0_ &= -2;
                this.pageSize_ = 0;
                this.bitField0_ &= -3;
                this.pageNum_ = 0;
                this.bitField0_ &= -5;
                this.senderInfo_ = Collections.emptyList();
                this.bitField0_ &= -9;
                this.sendbyId_ = "";
                this.bitField0_ &= -17;
                this.searchTime_ = 0;
                this.bitField0_ &= -33;
                this.lastRecordTime_ = 0;
                this.bitField0_ &= -65;
                this.scope_ = 0;
                this.bitField0_ &= -129;
                this.sortType_ = 0;
                this.bitField0_ &= -257;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageContentSearchFilter getDefaultInstanceForType() {
                return MessageContentSearchFilter.getDefaultInstance();
            }

            public MessageContentSearchFilter build() {
                MessageContentSearchFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageContentSearchFilter buildParsed() throws InvalidProtocolBufferException {
                MessageContentSearchFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageContentSearchFilter buildPartial() {
                MessageContentSearchFilter messageContentSearchFilter = new MessageContentSearchFilter(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                messageContentSearchFilter.keyWord_ = this.keyWord_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                messageContentSearchFilter.pageSize_ = this.pageSize_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                messageContentSearchFilter.pageNum_ = this.pageNum_;
                if ((this.bitField0_ & 8) == 8) {
                    this.senderInfo_ = Collections.unmodifiableList(this.senderInfo_);
                    this.bitField0_ &= -9;
                }
                messageContentSearchFilter.senderInfo_ = this.senderInfo_;
                if ((i & 16) == 16) {
                    i2 |= 8;
                }
                messageContentSearchFilter.sendbyId_ = this.sendbyId_;
                if ((i & 32) == 32) {
                    i2 |= 16;
                }
                messageContentSearchFilter.searchTime_ = this.searchTime_;
                if ((i & 64) == 64) {
                    i2 |= 32;
                }
                messageContentSearchFilter.lastRecordTime_ = this.lastRecordTime_;
                if ((i & 128) == 128) {
                    i2 |= 64;
                }
                messageContentSearchFilter.scope_ = this.scope_;
                if ((i & 256) == 256) {
                    i2 |= 128;
                }
                messageContentSearchFilter.sortType_ = this.sortType_;
                messageContentSearchFilter.bitField0_ = i2;
                return messageContentSearchFilter;
            }

            public Builder mergeFrom(MessageContentSearchFilter messageContentSearchFilter) {
                if (messageContentSearchFilter == MessageContentSearchFilter.getDefaultInstance()) {
                    return this;
                }
                if (messageContentSearchFilter.hasKeyWord()) {
                    setKeyWord(messageContentSearchFilter.getKeyWord());
                }
                if (messageContentSearchFilter.hasPageSize()) {
                    setPageSize(messageContentSearchFilter.getPageSize());
                }
                if (messageContentSearchFilter.hasPageNum()) {
                    setPageNum(messageContentSearchFilter.getPageNum());
                }
                if (!messageContentSearchFilter.senderInfo_.isEmpty()) {
                    if (this.senderInfo_.isEmpty()) {
                        this.senderInfo_ = messageContentSearchFilter.senderInfo_;
                        this.bitField0_ &= -9;
                    } else {
                        ensureSenderInfoIsMutable();
                        this.senderInfo_.addAll(messageContentSearchFilter.senderInfo_);
                    }
                }
                if (messageContentSearchFilter.hasSendbyId()) {
                    setSendbyId(messageContentSearchFilter.getSendbyId());
                }
                if (messageContentSearchFilter.hasSearchTime()) {
                    setSearchTime(messageContentSearchFilter.getSearchTime());
                }
                if (messageContentSearchFilter.hasLastRecordTime()) {
                    setLastRecordTime(messageContentSearchFilter.getLastRecordTime());
                }
                if (messageContentSearchFilter.hasScope()) {
                    setScope(messageContentSearchFilter.getScope());
                }
                if (messageContentSearchFilter.hasSortType()) {
                    setSortType(messageContentSearchFilter.getSortType());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasKeyWord() && hasPageSize() && hasPageNum()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.keyWord_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.pageSize_ = codedInputStream.readInt32();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.pageNum_ = codedInputStream.readInt32();
                    } else if (readTag == 34) {
                        Builder newBuilder = MessageSenderFilter.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addSenderInfo(newBuilder.buildPartial());
                    } else if (readTag == 42) {
                        this.bitField0_ |= 16;
                        this.sendbyId_ = codedInputStream.readBytes();
                    } else if (readTag == 48) {
                        this.bitField0_ |= 32;
                        this.searchTime_ = codedInputStream.readInt64();
                    } else if (readTag == 56) {
                        this.bitField0_ |= 64;
                        this.lastRecordTime_ = codedInputStream.readInt64();
                    } else if (readTag == 64) {
                        this.bitField0_ |= 128;
                        this.scope_ = codedInputStream.readInt32();
                    } else if (readTag == 72) {
                        this.bitField0_ |= 256;
                        this.sortType_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -2;
                this.keyWord_ = MessageContentSearchFilter.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 1;
                this.keyWord_ = byteString;
            }

            public boolean hasPageSize() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getPageSize() {
                return this.pageSize_;
            }

            public Builder setPageSize(int i) {
                this.bitField0_ |= 2;
                this.pageSize_ = i;
                return this;
            }

            public Builder clearPageSize() {
                this.bitField0_ &= -3;
                this.pageSize_ = 0;
                return this;
            }

            public boolean hasPageNum() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getPageNum() {
                return this.pageNum_;
            }

            public Builder setPageNum(int i) {
                this.bitField0_ |= 4;
                this.pageNum_ = i;
                return this;
            }

            public Builder clearPageNum() {
                this.bitField0_ &= -5;
                this.pageNum_ = 0;
                return this;
            }

            private void ensureSenderInfoIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.senderInfo_ = new ArrayList(this.senderInfo_);
                    this.bitField0_ |= 8;
                }
            }

            public List<MessageSenderFilter> getSenderInfoList() {
                return Collections.unmodifiableList(this.senderInfo_);
            }

            public int getSenderInfoCount() {
                return this.senderInfo_.size();
            }

            public MessageSenderFilter getSenderInfo(int i) {
                return (MessageSenderFilter) this.senderInfo_.get(i);
            }

            public Builder setSenderInfo(int i, MessageSenderFilter messageSenderFilter) {
                if (messageSenderFilter != null) {
                    ensureSenderInfoIsMutable();
                    this.senderInfo_.set(i, messageSenderFilter);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setSenderInfo(int i, Builder builder) {
                ensureSenderInfoIsMutable();
                this.senderInfo_.set(i, builder.build());
                return this;
            }

            public Builder addSenderInfo(MessageSenderFilter messageSenderFilter) {
                if (messageSenderFilter != null) {
                    ensureSenderInfoIsMutable();
                    this.senderInfo_.add(messageSenderFilter);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSenderInfo(int i, MessageSenderFilter messageSenderFilter) {
                if (messageSenderFilter != null) {
                    ensureSenderInfoIsMutable();
                    this.senderInfo_.add(i, messageSenderFilter);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSenderInfo(Builder builder) {
                ensureSenderInfoIsMutable();
                this.senderInfo_.add(builder.build());
                return this;
            }

            public Builder addSenderInfo(int i, Builder builder) {
                ensureSenderInfoIsMutable();
                this.senderInfo_.add(i, builder.build());
                return this;
            }

            public Builder addAllSenderInfo(Iterable<? extends MessageSenderFilter> iterable) {
                ensureSenderInfoIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.senderInfo_);
                return this;
            }

            public Builder clearSenderInfo() {
                this.senderInfo_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            public Builder removeSenderInfo(int i) {
                ensureSenderInfoIsMutable();
                this.senderInfo_.remove(i);
                return this;
            }

            public boolean hasSendbyId() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getSendbyId() {
                Object obj = this.sendbyId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sendbyId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSendbyId(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.sendbyId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSendbyId() {
                this.bitField0_ &= -17;
                this.sendbyId_ = MessageContentSearchFilter.getDefaultInstance().getSendbyId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSendbyId(ByteString byteString) {
                this.bitField0_ |= 16;
                this.sendbyId_ = byteString;
            }

            public boolean hasSearchTime() {
                return (this.bitField0_ & 32) == 32;
            }

            public long getSearchTime() {
                return this.searchTime_;
            }

            public Builder setSearchTime(long j) {
                this.bitField0_ |= 32;
                this.searchTime_ = j;
                return this;
            }

            public Builder clearSearchTime() {
                this.bitField0_ &= -33;
                this.searchTime_ = 0;
                return this;
            }

            public boolean hasLastRecordTime() {
                return (this.bitField0_ & 64) == 64;
            }

            public long getLastRecordTime() {
                return this.lastRecordTime_;
            }

            public Builder setLastRecordTime(long j) {
                this.bitField0_ |= 64;
                this.lastRecordTime_ = j;
                return this;
            }

            public Builder clearLastRecordTime() {
                this.bitField0_ &= -65;
                this.lastRecordTime_ = 0;
                return this;
            }

            public boolean hasScope() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getScope() {
                return this.scope_;
            }

            public Builder setScope(int i) {
                this.bitField0_ |= 128;
                this.scope_ = i;
                return this;
            }

            public Builder clearScope() {
                this.bitField0_ &= -129;
                this.scope_ = 0;
                return this;
            }

            public boolean hasSortType() {
                return (this.bitField0_ & 256) == 256;
            }

            public int getSortType() {
                return this.sortType_;
            }

            public Builder setSortType(int i) {
                this.bitField0_ |= 256;
                this.sortType_ = i;
                return this;
            }

            public Builder clearSortType() {
                this.bitField0_ &= -257;
                this.sortType_ = 0;
                return this;
            }
        }

        private MessageContentSearchFilter(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageContentSearchFilter(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageContentSearchFilter getDefaultInstance() {
            return defaultInstance;
        }

        public MessageContentSearchFilter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasPageSize() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getPageSize() {
            return this.pageSize_;
        }

        public boolean hasPageNum() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getPageNum() {
            return this.pageNum_;
        }

        public List<MessageSenderFilter> getSenderInfoList() {
            return this.senderInfo_;
        }

        public List<? extends MessageSenderFilterOrBuilder> getSenderInfoOrBuilderList() {
            return this.senderInfo_;
        }

        public int getSenderInfoCount() {
            return this.senderInfo_.size();
        }

        public MessageSenderFilter getSenderInfo(int i) {
            return (MessageSenderFilter) this.senderInfo_.get(i);
        }

        public MessageSenderFilterOrBuilder getSenderInfoOrBuilder(int i) {
            return (MessageSenderFilterOrBuilder) this.senderInfo_.get(i);
        }

        public boolean hasSendbyId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getSendbyId() {
            Object obj = this.sendbyId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sendbyId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSendbyIdBytes() {
            Object obj = this.sendbyId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sendbyId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSearchTime() {
            return (this.bitField0_ & 16) == 16;
        }

        public long getSearchTime() {
            return this.searchTime_;
        }

        public boolean hasLastRecordTime() {
            return (this.bitField0_ & 32) == 32;
        }

        public long getLastRecordTime() {
            return this.lastRecordTime_;
        }

        public boolean hasScope() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getScope() {
            return this.scope_;
        }

        public boolean hasSortType() {
            return (this.bitField0_ & 128) == 128;
        }

        public int getSortType() {
            return this.sortType_;
        }

        private void initFields() {
            this.keyWord_ = "";
            this.pageSize_ = 0;
            this.pageNum_ = 0;
            this.senderInfo_ = Collections.emptyList();
            this.sendbyId_ = "";
            this.searchTime_ = 0;
            this.lastRecordTime_ = 0;
            this.scope_ = 0;
            this.sortType_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPageSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPageNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getKeyWordBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.pageSize_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.pageNum_);
            }
            for (int i = 0; i < this.senderInfo_.size(); i++) {
                codedOutputStream.writeMessage(4, (MessageLite) this.senderInfo_.get(i));
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(5, getSendbyIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(6, this.searchTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt64(7, this.lastRecordTime_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt32(8, this.scope_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeInt32(9, this.sortType_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getKeyWordBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeInt32Size(2, this.pageSize_);
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeInt32Size(3, this.pageNum_);
            }
            for (int i2 = 0; i2 < this.senderInfo_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(4, (MessageLite) this.senderInfo_.get(i2));
            }
            if ((this.bitField0_ & 8) == 8) {
                computeBytesSize += CodedOutputStream.computeBytesSize(5, getSendbyIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                computeBytesSize += CodedOutputStream.computeInt64Size(6, this.searchTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                computeBytesSize += CodedOutputStream.computeInt64Size(7, this.lastRecordTime_);
            }
            if ((this.bitField0_ & 64) == 64) {
                computeBytesSize += CodedOutputStream.computeInt32Size(8, this.scope_);
            }
            if ((this.bitField0_ & 128) == 128) {
                computeBytesSize += CodedOutputStream.computeInt32Size(9, this.sortType_);
            }
            this.memoizedSerializedSize = computeBytesSize;
            return computeBytesSize;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageContentSearchFilter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageContentSearchFilter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageContentSearchFilter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageContentSearchFilter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageContentSearchFilter parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageContentSearchFilter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageContentSearchFilter parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageContentSearchFilter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageContentSearchFilter parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageContentSearchFilter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageContentSearchFilter messageContentSearchFilter) {
            return newBuilder().mergeFrom(messageContentSearchFilter);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MessageContentSearchFilterOrBuilder extends MessageLiteOrBuilder {
        String getKeyWord();

        long getLastRecordTime();

        int getPageNum();

        int getPageSize();

        int getScope();

        long getSearchTime();

        String getSendbyId();

        MessageSenderFilter getSenderInfo(int i);

        int getSenderInfoCount();

        List<MessageSenderFilter> getSenderInfoList();

        int getSortType();

        boolean hasKeyWord();

        boolean hasLastRecordTime();

        boolean hasPageNum();

        boolean hasPageSize();

        boolean hasScope();

        boolean hasSearchTime();

        boolean hasSendbyId();

        boolean hasSortType();
    }

    public static final class MessageContentSearchResponse extends GeneratedMessageLite implements MessageContentSearchResponseOrBuilder {
        public static final int SEARCHRESPONSE_FIELD_NUMBER = 1;
        public static final int _CUT_PREFIX_FIELD_NUMBER = 3;
        public static final int _CUT_SUFFIX_FIELD_NUMBER = 4;
        public static final int _HAS_MORE_FIELD_NUMBER = 7;
        public static final int _HAS_MORE_MY_NOTES_FIELD_NUMBER = 10;
        public static final int _LAST_RECORD_TIME_FIELD_NUMBER = 6;
        public static final int _NEED_REQUEST_IMMEDIATELY_FIELD_NUMBER = 9;
        public static final int _PAGE_NUM_FIELD_NUMBER = 12;
        public static final int _SCOPE_FIELD_NUMBER = 8;
        public static final int _SEARCH_TIME_FIELD_NUMBER = 5;
        public static final int _SORT_TYPE_FIELD_NUMBER = 11;
        public static final int _TOTAL_SIZE_FIELD_NUMBER = 2;
        private static final MessageContentSearchResponse defaultInstance = new MessageContentSearchResponse(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public Object CutPrefix_;
        /* access modifiers changed from: private */
        public Object CutSuffix_;
        /* access modifiers changed from: private */
        public boolean HasMoreMyNotes_;
        /* access modifiers changed from: private */
        public boolean HasMore_;
        /* access modifiers changed from: private */
        public long LastRecordTime_;
        /* access modifiers changed from: private */
        public boolean NeedRequestImmediately_;
        /* access modifiers changed from: private */
        public int PageNum_;
        /* access modifiers changed from: private */
        public int Scope_;
        /* access modifiers changed from: private */
        public long SearchTime_;
        /* access modifiers changed from: private */
        public int SortType_;
        /* access modifiers changed from: private */
        public long TotalSize_;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<MessageSearchResult> searchResponse_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageContentSearchResponse, Builder> implements MessageContentSearchResponseOrBuilder {
            private Object CutPrefix_ = "";
            private Object CutSuffix_ = "";
            private boolean HasMoreMyNotes_;
            private boolean HasMore_;
            private long LastRecordTime_;
            private boolean NeedRequestImmediately_;
            private int PageNum_;
            private int Scope_;
            private long SearchTime_;
            private int SortType_;
            private long TotalSize_;
            private int bitField0_;
            private List<MessageSearchResult> searchResponse_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.searchResponse_ = Collections.emptyList();
                this.bitField0_ &= -2;
                this.TotalSize_ = 0;
                this.bitField0_ &= -3;
                this.CutPrefix_ = "";
                this.bitField0_ &= -5;
                this.CutSuffix_ = "";
                this.bitField0_ &= -9;
                this.SearchTime_ = 0;
                this.bitField0_ &= -17;
                this.LastRecordTime_ = 0;
                this.bitField0_ &= -33;
                this.HasMore_ = false;
                this.bitField0_ &= -65;
                this.Scope_ = 0;
                this.bitField0_ &= -129;
                this.NeedRequestImmediately_ = false;
                this.bitField0_ &= -257;
                this.HasMoreMyNotes_ = false;
                this.bitField0_ &= -513;
                this.SortType_ = 0;
                this.bitField0_ &= -1025;
                this.PageNum_ = 0;
                this.bitField0_ &= -2049;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageContentSearchResponse getDefaultInstanceForType() {
                return MessageContentSearchResponse.getDefaultInstance();
            }

            public MessageContentSearchResponse build() {
                MessageContentSearchResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageContentSearchResponse buildParsed() throws InvalidProtocolBufferException {
                MessageContentSearchResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageContentSearchResponse buildPartial() {
                MessageContentSearchResponse messageContentSearchResponse = new MessageContentSearchResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) == 1) {
                    this.searchResponse_ = Collections.unmodifiableList(this.searchResponse_);
                    this.bitField0_ &= -2;
                }
                messageContentSearchResponse.searchResponse_ = this.searchResponse_;
                if ((i & 2) != 2) {
                    i2 = 0;
                }
                messageContentSearchResponse.TotalSize_ = this.TotalSize_;
                if ((i & 4) == 4) {
                    i2 |= 2;
                }
                messageContentSearchResponse.CutPrefix_ = this.CutPrefix_;
                if ((i & 8) == 8) {
                    i2 |= 4;
                }
                messageContentSearchResponse.CutSuffix_ = this.CutSuffix_;
                if ((i & 16) == 16) {
                    i2 |= 8;
                }
                messageContentSearchResponse.SearchTime_ = this.SearchTime_;
                if ((i & 32) == 32) {
                    i2 |= 16;
                }
                messageContentSearchResponse.LastRecordTime_ = this.LastRecordTime_;
                if ((i & 64) == 64) {
                    i2 |= 32;
                }
                messageContentSearchResponse.HasMore_ = this.HasMore_;
                if ((i & 128) == 128) {
                    i2 |= 64;
                }
                messageContentSearchResponse.Scope_ = this.Scope_;
                if ((i & 256) == 256) {
                    i2 |= 128;
                }
                messageContentSearchResponse.NeedRequestImmediately_ = this.NeedRequestImmediately_;
                if ((i & 512) == 512) {
                    i2 |= 256;
                }
                messageContentSearchResponse.HasMoreMyNotes_ = this.HasMoreMyNotes_;
                if ((i & 1024) == 1024) {
                    i2 |= 512;
                }
                messageContentSearchResponse.SortType_ = this.SortType_;
                if ((i & 2048) == 2048) {
                    i2 |= 1024;
                }
                messageContentSearchResponse.PageNum_ = this.PageNum_;
                messageContentSearchResponse.bitField0_ = i2;
                return messageContentSearchResponse;
            }

            public Builder mergeFrom(MessageContentSearchResponse messageContentSearchResponse) {
                if (messageContentSearchResponse == MessageContentSearchResponse.getDefaultInstance()) {
                    return this;
                }
                if (!messageContentSearchResponse.searchResponse_.isEmpty()) {
                    if (this.searchResponse_.isEmpty()) {
                        this.searchResponse_ = messageContentSearchResponse.searchResponse_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureSearchResponseIsMutable();
                        this.searchResponse_.addAll(messageContentSearchResponse.searchResponse_);
                    }
                }
                if (messageContentSearchResponse.hasTotalSize()) {
                    setTotalSize(messageContentSearchResponse.getTotalSize());
                }
                if (messageContentSearchResponse.hasCutPrefix()) {
                    setCutPrefix(messageContentSearchResponse.getCutPrefix());
                }
                if (messageContentSearchResponse.hasCutSuffix()) {
                    setCutSuffix(messageContentSearchResponse.getCutSuffix());
                }
                if (messageContentSearchResponse.hasSearchTime()) {
                    setSearchTime(messageContentSearchResponse.getSearchTime());
                }
                if (messageContentSearchResponse.hasLastRecordTime()) {
                    setLastRecordTime(messageContentSearchResponse.getLastRecordTime());
                }
                if (messageContentSearchResponse.hasHasMore()) {
                    setHasMore(messageContentSearchResponse.getHasMore());
                }
                if (messageContentSearchResponse.hasScope()) {
                    setScope(messageContentSearchResponse.getScope());
                }
                if (messageContentSearchResponse.hasNeedRequestImmediately()) {
                    setNeedRequestImmediately(messageContentSearchResponse.getNeedRequestImmediately());
                }
                if (messageContentSearchResponse.hasHasMoreMyNotes()) {
                    setHasMoreMyNotes(messageContentSearchResponse.getHasMoreMyNotes());
                }
                if (messageContentSearchResponse.hasSortType()) {
                    setSortType(messageContentSearchResponse.getSortType());
                }
                if (messageContentSearchResponse.hasPageNum()) {
                    setPageNum(messageContentSearchResponse.getPageNum());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasTotalSize() || !hasCutPrefix() || !hasCutSuffix() || !hasSearchTime() || !hasLastRecordTime() || !hasHasMore() || !hasScope() || !hasNeedRequestImmediately() || !hasHasMoreMyNotes()) {
                    return false;
                }
                for (int i = 0; i < getSearchResponseCount(); i++) {
                    if (!getSearchResponse(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            Builder newBuilder = MessageSearchResult.newBuilder();
                            codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                            addSearchResponse(newBuilder.buildPartial());
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.TotalSize_ = codedInputStream.readInt64();
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.CutPrefix_ = codedInputStream.readBytes();
                            break;
                        case 34:
                            this.bitField0_ |= 8;
                            this.CutSuffix_ = codedInputStream.readBytes();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.SearchTime_ = codedInputStream.readInt64();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.LastRecordTime_ = codedInputStream.readInt64();
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.HasMore_ = codedInputStream.readBool();
                            break;
                        case 64:
                            this.bitField0_ |= 128;
                            this.Scope_ = codedInputStream.readInt32();
                            break;
                        case 72:
                            this.bitField0_ |= 256;
                            this.NeedRequestImmediately_ = codedInputStream.readBool();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.HasMoreMyNotes_ = codedInputStream.readBool();
                            break;
                        case 88:
                            this.bitField0_ |= 1024;
                            this.SortType_ = codedInputStream.readInt32();
                            break;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.PageNum_ = codedInputStream.readInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            private void ensureSearchResponseIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.searchResponse_ = new ArrayList(this.searchResponse_);
                    this.bitField0_ |= 1;
                }
            }

            public List<MessageSearchResult> getSearchResponseList() {
                return Collections.unmodifiableList(this.searchResponse_);
            }

            public int getSearchResponseCount() {
                return this.searchResponse_.size();
            }

            public MessageSearchResult getSearchResponse(int i) {
                return (MessageSearchResult) this.searchResponse_.get(i);
            }

            public Builder setSearchResponse(int i, MessageSearchResult messageSearchResult) {
                if (messageSearchResult != null) {
                    ensureSearchResponseIsMutable();
                    this.searchResponse_.set(i, messageSearchResult);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setSearchResponse(int i, Builder builder) {
                ensureSearchResponseIsMutable();
                this.searchResponse_.set(i, builder.build());
                return this;
            }

            public Builder addSearchResponse(MessageSearchResult messageSearchResult) {
                if (messageSearchResult != null) {
                    ensureSearchResponseIsMutable();
                    this.searchResponse_.add(messageSearchResult);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSearchResponse(int i, MessageSearchResult messageSearchResult) {
                if (messageSearchResult != null) {
                    ensureSearchResponseIsMutable();
                    this.searchResponse_.add(i, messageSearchResult);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSearchResponse(Builder builder) {
                ensureSearchResponseIsMutable();
                this.searchResponse_.add(builder.build());
                return this;
            }

            public Builder addSearchResponse(int i, Builder builder) {
                ensureSearchResponseIsMutable();
                this.searchResponse_.add(i, builder.build());
                return this;
            }

            public Builder addAllSearchResponse(Iterable<? extends MessageSearchResult> iterable) {
                ensureSearchResponseIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.searchResponse_);
                return this;
            }

            public Builder clearSearchResponse() {
                this.searchResponse_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeSearchResponse(int i) {
                ensureSearchResponseIsMutable();
                this.searchResponse_.remove(i);
                return this;
            }

            public boolean hasTotalSize() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getTotalSize() {
                return this.TotalSize_;
            }

            public Builder setTotalSize(long j) {
                this.bitField0_ |= 2;
                this.TotalSize_ = j;
                return this;
            }

            public Builder clearTotalSize() {
                this.bitField0_ &= -3;
                this.TotalSize_ = 0;
                return this;
            }

            public boolean hasCutPrefix() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getCutPrefix() {
                Object obj = this.CutPrefix_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.CutPrefix_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setCutPrefix(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.CutPrefix_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearCutPrefix() {
                this.bitField0_ &= -5;
                this.CutPrefix_ = MessageContentSearchResponse.getDefaultInstance().getCutPrefix();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setCutPrefix(ByteString byteString) {
                this.bitField0_ |= 4;
                this.CutPrefix_ = byteString;
            }

            public boolean hasCutSuffix() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getCutSuffix() {
                Object obj = this.CutSuffix_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.CutSuffix_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setCutSuffix(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.CutSuffix_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearCutSuffix() {
                this.bitField0_ &= -9;
                this.CutSuffix_ = MessageContentSearchResponse.getDefaultInstance().getCutSuffix();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setCutSuffix(ByteString byteString) {
                this.bitField0_ |= 8;
                this.CutSuffix_ = byteString;
            }

            public boolean hasSearchTime() {
                return (this.bitField0_ & 16) == 16;
            }

            public long getSearchTime() {
                return this.SearchTime_;
            }

            public Builder setSearchTime(long j) {
                this.bitField0_ |= 16;
                this.SearchTime_ = j;
                return this;
            }

            public Builder clearSearchTime() {
                this.bitField0_ &= -17;
                this.SearchTime_ = 0;
                return this;
            }

            public boolean hasLastRecordTime() {
                return (this.bitField0_ & 32) == 32;
            }

            public long getLastRecordTime() {
                return this.LastRecordTime_;
            }

            public Builder setLastRecordTime(long j) {
                this.bitField0_ |= 32;
                this.LastRecordTime_ = j;
                return this;
            }

            public Builder clearLastRecordTime() {
                this.bitField0_ &= -33;
                this.LastRecordTime_ = 0;
                return this;
            }

            public boolean hasHasMore() {
                return (this.bitField0_ & 64) == 64;
            }

            public boolean getHasMore() {
                return this.HasMore_;
            }

            public Builder setHasMore(boolean z) {
                this.bitField0_ |= 64;
                this.HasMore_ = z;
                return this;
            }

            public Builder clearHasMore() {
                this.bitField0_ &= -65;
                this.HasMore_ = false;
                return this;
            }

            public boolean hasScope() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getScope() {
                return this.Scope_;
            }

            public Builder setScope(int i) {
                this.bitField0_ |= 128;
                this.Scope_ = i;
                return this;
            }

            public Builder clearScope() {
                this.bitField0_ &= -129;
                this.Scope_ = 0;
                return this;
            }

            public boolean hasNeedRequestImmediately() {
                return (this.bitField0_ & 256) == 256;
            }

            public boolean getNeedRequestImmediately() {
                return this.NeedRequestImmediately_;
            }

            public Builder setNeedRequestImmediately(boolean z) {
                this.bitField0_ |= 256;
                this.NeedRequestImmediately_ = z;
                return this;
            }

            public Builder clearNeedRequestImmediately() {
                this.bitField0_ &= -257;
                this.NeedRequestImmediately_ = false;
                return this;
            }

            public boolean hasHasMoreMyNotes() {
                return (this.bitField0_ & 512) == 512;
            }

            public boolean getHasMoreMyNotes() {
                return this.HasMoreMyNotes_;
            }

            public Builder setHasMoreMyNotes(boolean z) {
                this.bitField0_ |= 512;
                this.HasMoreMyNotes_ = z;
                return this;
            }

            public Builder clearHasMoreMyNotes() {
                this.bitField0_ &= -513;
                this.HasMoreMyNotes_ = false;
                return this;
            }

            public boolean hasSortType() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public int getSortType() {
                return this.SortType_;
            }

            public Builder setSortType(int i) {
                this.bitField0_ |= 1024;
                this.SortType_ = i;
                return this;
            }

            public Builder clearSortType() {
                this.bitField0_ &= -1025;
                this.SortType_ = 0;
                return this;
            }

            public boolean hasPageNum() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public int getPageNum() {
                return this.PageNum_;
            }

            public Builder setPageNum(int i) {
                this.bitField0_ |= 2048;
                this.PageNum_ = i;
                return this;
            }

            public Builder clearPageNum() {
                this.bitField0_ &= -2049;
                this.PageNum_ = 0;
                return this;
            }
        }

        private MessageContentSearchResponse(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageContentSearchResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageContentSearchResponse getDefaultInstance() {
            return defaultInstance;
        }

        public MessageContentSearchResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<MessageSearchResult> getSearchResponseList() {
            return this.searchResponse_;
        }

        public List<? extends MessageSearchResultOrBuilder> getSearchResponseOrBuilderList() {
            return this.searchResponse_;
        }

        public int getSearchResponseCount() {
            return this.searchResponse_.size();
        }

        public MessageSearchResult getSearchResponse(int i) {
            return (MessageSearchResult) this.searchResponse_.get(i);
        }

        public MessageSearchResultOrBuilder getSearchResponseOrBuilder(int i) {
            return (MessageSearchResultOrBuilder) this.searchResponse_.get(i);
        }

        public boolean hasTotalSize() {
            return (this.bitField0_ & 1) == 1;
        }

        public long getTotalSize() {
            return this.TotalSize_;
        }

        public boolean hasCutPrefix() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getCutPrefix() {
            Object obj = this.CutPrefix_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.CutPrefix_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getCutPrefixBytes() {
            Object obj = this.CutPrefix_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.CutPrefix_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCutSuffix() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getCutSuffix() {
            Object obj = this.CutSuffix_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.CutSuffix_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getCutSuffixBytes() {
            Object obj = this.CutSuffix_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.CutSuffix_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSearchTime() {
            return (this.bitField0_ & 8) == 8;
        }

        public long getSearchTime() {
            return this.SearchTime_;
        }

        public boolean hasLastRecordTime() {
            return (this.bitField0_ & 16) == 16;
        }

        public long getLastRecordTime() {
            return this.LastRecordTime_;
        }

        public boolean hasHasMore() {
            return (this.bitField0_ & 32) == 32;
        }

        public boolean getHasMore() {
            return this.HasMore_;
        }

        public boolean hasScope() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getScope() {
            return this.Scope_;
        }

        public boolean hasNeedRequestImmediately() {
            return (this.bitField0_ & 128) == 128;
        }

        public boolean getNeedRequestImmediately() {
            return this.NeedRequestImmediately_;
        }

        public boolean hasHasMoreMyNotes() {
            return (this.bitField0_ & 256) == 256;
        }

        public boolean getHasMoreMyNotes() {
            return this.HasMoreMyNotes_;
        }

        public boolean hasSortType() {
            return (this.bitField0_ & 512) == 512;
        }

        public int getSortType() {
            return this.SortType_;
        }

        public boolean hasPageNum() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public int getPageNum() {
            return this.PageNum_;
        }

        private void initFields() {
            this.searchResponse_ = Collections.emptyList();
            this.TotalSize_ = 0;
            this.CutPrefix_ = "";
            this.CutSuffix_ = "";
            this.SearchTime_ = 0;
            this.LastRecordTime_ = 0;
            this.HasMore_ = false;
            this.Scope_ = 0;
            this.NeedRequestImmediately_ = false;
            this.HasMoreMyNotes_ = false;
            this.SortType_ = 0;
            this.PageNum_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasTotalSize()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCutPrefix()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCutSuffix()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSearchTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLastRecordTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasHasMore()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasScope()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNeedRequestImmediately()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasHasMoreMyNotes()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getSearchResponseCount(); i++) {
                    if (!getSearchResponse(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.searchResponse_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.searchResponse_.get(i));
            }
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt64(2, this.TotalSize_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(3, getCutPrefixBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(4, getCutSuffixBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt64(5, this.SearchTime_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(6, this.LastRecordTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBool(7, this.HasMore_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt32(8, this.Scope_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBool(9, this.NeedRequestImmediately_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBool(10, this.HasMoreMyNotes_);
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeInt32(11, this.SortType_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeInt32(12, this.PageNum_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.searchResponse_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.searchResponse_.get(i3));
            }
            if ((this.bitField0_ & 1) == 1) {
                i2 += CodedOutputStream.computeInt64Size(2, this.TotalSize_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(3, getCutPrefixBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(4, getCutSuffixBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt64Size(5, this.SearchTime_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt64Size(6, this.LastRecordTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBoolSize(7, this.HasMore_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeInt32Size(8, this.Scope_);
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeBoolSize(9, this.NeedRequestImmediately_);
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBoolSize(10, this.HasMoreMyNotes_);
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeInt32Size(11, this.SortType_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeInt32Size(12, this.PageNum_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageContentSearchResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageContentSearchResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageContentSearchResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageContentSearchResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageContentSearchResponse parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageContentSearchResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageContentSearchResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageContentSearchResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageContentSearchResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageContentSearchResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageContentSearchResponse messageContentSearchResponse) {
            return newBuilder().mergeFrom(messageContentSearchResponse);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MessageContentSearchResponseOrBuilder extends MessageLiteOrBuilder {
        String getCutPrefix();

        String getCutSuffix();

        boolean getHasMore();

        boolean getHasMoreMyNotes();

        long getLastRecordTime();

        boolean getNeedRequestImmediately();

        int getPageNum();

        int getScope();

        MessageSearchResult getSearchResponse(int i);

        int getSearchResponseCount();

        List<MessageSearchResult> getSearchResponseList();

        long getSearchTime();

        int getSortType();

        long getTotalSize();

        boolean hasCutPrefix();

        boolean hasCutSuffix();

        boolean hasHasMore();

        boolean hasHasMoreMyNotes();

        boolean hasLastRecordTime();

        boolean hasNeedRequestImmediately();

        boolean hasPageNum();

        boolean hasScope();

        boolean hasSearchTime();

        boolean hasSortType();

        boolean hasTotalSize();
    }

    public static final class MessageInfo extends GeneratedMessageLite implements MessageInfoOrBuilder {
        public static final int GUID_FIELD_NUMBER = 2;
        public static final int IS_COMMENT_FIELD_NUMBER = 6;
        public static final int SESSION_FIELD_NUMBER = 1;
        public static final int SVR_TIME_FIELD_NUMBER = 5;
        public static final int THR_FIELD_NUMBER = 3;
        public static final int THR_SVR_T_FIELD_NUMBER = 4;
        private static final MessageInfo defaultInstance = new MessageInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object guid_;
        /* access modifiers changed from: private */
        public boolean isComment_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object session_;
        /* access modifiers changed from: private */
        public long svrTime_;
        /* access modifiers changed from: private */
        public long thrSvrT_;
        /* access modifiers changed from: private */
        public Object thr_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageInfo, Builder> implements MessageInfoOrBuilder {
            private int bitField0_;
            private Object guid_ = "";
            private boolean isComment_;
            private Object session_ = "";
            private long svrTime_;
            private long thrSvrT_;
            private Object thr_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.session_ = "";
                this.bitField0_ &= -2;
                this.guid_ = "";
                this.bitField0_ &= -3;
                this.thr_ = "";
                this.bitField0_ &= -5;
                this.thrSvrT_ = 0;
                this.bitField0_ &= -9;
                this.svrTime_ = 0;
                this.bitField0_ &= -17;
                this.isComment_ = false;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageInfo getDefaultInstanceForType() {
                return MessageInfo.getDefaultInstance();
            }

            public MessageInfo build() {
                MessageInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageInfo buildParsed() throws InvalidProtocolBufferException {
                MessageInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageInfo buildPartial() {
                MessageInfo messageInfo = new MessageInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                messageInfo.session_ = this.session_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                messageInfo.guid_ = this.guid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                messageInfo.thr_ = this.thr_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                messageInfo.thrSvrT_ = this.thrSvrT_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                messageInfo.svrTime_ = this.svrTime_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                messageInfo.isComment_ = this.isComment_;
                messageInfo.bitField0_ = i2;
                return messageInfo;
            }

            public Builder mergeFrom(MessageInfo messageInfo) {
                if (messageInfo == MessageInfo.getDefaultInstance()) {
                    return this;
                }
                if (messageInfo.hasSession()) {
                    setSession(messageInfo.getSession());
                }
                if (messageInfo.hasGuid()) {
                    setGuid(messageInfo.getGuid());
                }
                if (messageInfo.hasThr()) {
                    setThr(messageInfo.getThr());
                }
                if (messageInfo.hasThrSvrT()) {
                    setThrSvrT(messageInfo.getThrSvrT());
                }
                if (messageInfo.hasSvrTime()) {
                    setSvrTime(messageInfo.getSvrTime());
                }
                if (messageInfo.hasIsComment()) {
                    setIsComment(messageInfo.getIsComment());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasSession() && hasGuid() && hasThr() && hasThrSvrT() && hasSvrTime() && hasIsComment()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.session_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.guid_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.thr_ = codedInputStream.readBytes();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.thrSvrT_ = codedInputStream.readInt64();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.svrTime_ = codedInputStream.readInt64();
                    } else if (readTag == 48) {
                        this.bitField0_ |= 32;
                        this.isComment_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSession() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSession() {
                Object obj = this.session_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.session_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSession(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.session_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSession() {
                this.bitField0_ &= -2;
                this.session_ = MessageInfo.getDefaultInstance().getSession();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSession(ByteString byteString) {
                this.bitField0_ |= 1;
                this.session_ = byteString;
            }

            public boolean hasGuid() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getGuid() {
                Object obj = this.guid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.guid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setGuid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.guid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearGuid() {
                this.bitField0_ &= -3;
                this.guid_ = MessageInfo.getDefaultInstance().getGuid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setGuid(ByteString byteString) {
                this.bitField0_ |= 2;
                this.guid_ = byteString;
            }

            public boolean hasThr() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getThr() {
                Object obj = this.thr_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.thr_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setThr(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.thr_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearThr() {
                this.bitField0_ &= -5;
                this.thr_ = MessageInfo.getDefaultInstance().getThr();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setThr(ByteString byteString) {
                this.bitField0_ |= 4;
                this.thr_ = byteString;
            }

            public boolean hasThrSvrT() {
                return (this.bitField0_ & 8) == 8;
            }

            public long getThrSvrT() {
                return this.thrSvrT_;
            }

            public Builder setThrSvrT(long j) {
                this.bitField0_ |= 8;
                this.thrSvrT_ = j;
                return this;
            }

            public Builder clearThrSvrT() {
                this.bitField0_ &= -9;
                this.thrSvrT_ = 0;
                return this;
            }

            public boolean hasSvrTime() {
                return (this.bitField0_ & 16) == 16;
            }

            public long getSvrTime() {
                return this.svrTime_;
            }

            public Builder setSvrTime(long j) {
                this.bitField0_ |= 16;
                this.svrTime_ = j;
                return this;
            }

            public Builder clearSvrTime() {
                this.bitField0_ &= -17;
                this.svrTime_ = 0;
                return this;
            }

            public boolean hasIsComment() {
                return (this.bitField0_ & 32) == 32;
            }

            public boolean getIsComment() {
                return this.isComment_;
            }

            public Builder setIsComment(boolean z) {
                this.bitField0_ |= 32;
                this.isComment_ = z;
                return this;
            }

            public Builder clearIsComment() {
                this.bitField0_ &= -33;
                this.isComment_ = false;
                return this;
            }
        }

        private MessageInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageInfo getDefaultInstance() {
            return defaultInstance;
        }

        public MessageInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSession() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSession() {
            Object obj = this.session_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.session_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionBytes() {
            Object obj = this.session_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.session_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGuid() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getGuid() {
            Object obj = this.guid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.guid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getGuidBytes() {
            Object obj = this.guid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.guid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThr() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getThr() {
            Object obj = this.thr_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.thr_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getThrBytes() {
            Object obj = this.thr_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.thr_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThrSvrT() {
            return (this.bitField0_ & 8) == 8;
        }

        public long getThrSvrT() {
            return this.thrSvrT_;
        }

        public boolean hasSvrTime() {
            return (this.bitField0_ & 16) == 16;
        }

        public long getSvrTime() {
            return this.svrTime_;
        }

        public boolean hasIsComment() {
            return (this.bitField0_ & 32) == 32;
        }

        public boolean getIsComment() {
            return this.isComment_;
        }

        private void initFields() {
            this.session_ = "";
            this.guid_ = "";
            this.thr_ = "";
            this.thrSvrT_ = 0;
            this.svrTime_ = 0;
            this.isComment_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSession()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGuid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasThr()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasThrSvrT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSvrTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsComment()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getGuidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getThrBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt64(4, this.thrSvrT_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(5, this.svrTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBool(6, this.isComment_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getGuidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getThrBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt64Size(4, this.thrSvrT_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt64Size(5, this.svrTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBoolSize(6, this.isComment_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageInfo messageInfo) {
            return newBuilder().mergeFrom(messageInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public static final class MessageInfoList extends GeneratedMessageLite implements MessageInfoListOrBuilder {
        public static final int INFO_LIST_FIELD_NUMBER = 1;
        private static final MessageInfoList defaultInstance = new MessageInfoList(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<MessageInfo> infoList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageInfoList, Builder> implements MessageInfoListOrBuilder {
            private int bitField0_;
            private List<MessageInfo> infoList_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.infoList_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageInfoList getDefaultInstanceForType() {
                return MessageInfoList.getDefaultInstance();
            }

            public MessageInfoList build() {
                MessageInfoList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageInfoList buildParsed() throws InvalidProtocolBufferException {
                MessageInfoList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageInfoList buildPartial() {
                MessageInfoList messageInfoList = new MessageInfoList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.infoList_ = Collections.unmodifiableList(this.infoList_);
                    this.bitField0_ &= -2;
                }
                messageInfoList.infoList_ = this.infoList_;
                return messageInfoList;
            }

            public Builder mergeFrom(MessageInfoList messageInfoList) {
                if (messageInfoList != MessageInfoList.getDefaultInstance() && !messageInfoList.infoList_.isEmpty()) {
                    if (this.infoList_.isEmpty()) {
                        this.infoList_ = messageInfoList.infoList_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureInfoListIsMutable();
                        this.infoList_.addAll(messageInfoList.infoList_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getInfoListCount(); i++) {
                    if (!getInfoList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = MessageInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addInfoList(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureInfoListIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.infoList_ = new ArrayList(this.infoList_);
                    this.bitField0_ |= 1;
                }
            }

            public List<MessageInfo> getInfoListList() {
                return Collections.unmodifiableList(this.infoList_);
            }

            public int getInfoListCount() {
                return this.infoList_.size();
            }

            public MessageInfo getInfoList(int i) {
                return (MessageInfo) this.infoList_.get(i);
            }

            public Builder setInfoList(int i, MessageInfo messageInfo) {
                if (messageInfo != null) {
                    ensureInfoListIsMutable();
                    this.infoList_.set(i, messageInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setInfoList(int i, Builder builder) {
                ensureInfoListIsMutable();
                this.infoList_.set(i, builder.build());
                return this;
            }

            public Builder addInfoList(MessageInfo messageInfo) {
                if (messageInfo != null) {
                    ensureInfoListIsMutable();
                    this.infoList_.add(messageInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addInfoList(int i, MessageInfo messageInfo) {
                if (messageInfo != null) {
                    ensureInfoListIsMutable();
                    this.infoList_.add(i, messageInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addInfoList(Builder builder) {
                ensureInfoListIsMutable();
                this.infoList_.add(builder.build());
                return this;
            }

            public Builder addInfoList(int i, Builder builder) {
                ensureInfoListIsMutable();
                this.infoList_.add(i, builder.build());
                return this;
            }

            public Builder addAllInfoList(Iterable<? extends MessageInfo> iterable) {
                ensureInfoListIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.infoList_);
                return this;
            }

            public Builder clearInfoList() {
                this.infoList_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeInfoList(int i) {
                ensureInfoListIsMutable();
                this.infoList_.remove(i);
                return this;
            }
        }

        private MessageInfoList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageInfoList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageInfoList getDefaultInstance() {
            return defaultInstance;
        }

        public MessageInfoList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<MessageInfo> getInfoListList() {
            return this.infoList_;
        }

        public List<? extends MessageInfoOrBuilder> getInfoListOrBuilderList() {
            return this.infoList_;
        }

        public int getInfoListCount() {
            return this.infoList_.size();
        }

        public MessageInfo getInfoList(int i) {
            return (MessageInfo) this.infoList_.get(i);
        }

        public MessageInfoOrBuilder getInfoListOrBuilder(int i) {
            return (MessageInfoOrBuilder) this.infoList_.get(i);
        }

        private void initFields() {
            this.infoList_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getInfoListCount(); i++) {
                if (!getInfoList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.infoList_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.infoList_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.infoList_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.infoList_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageInfoList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageInfoList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageInfoList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageInfoList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageInfoList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageInfoList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageInfoList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageInfoList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageInfoList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageInfoList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageInfoList messageInfoList) {
            return newBuilder().mergeFrom(messageInfoList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MessageInfoListOrBuilder extends MessageLiteOrBuilder {
        MessageInfo getInfoList(int i);

        int getInfoListCount();

        List<MessageInfo> getInfoListList();
    }

    public interface MessageInfoOrBuilder extends MessageLiteOrBuilder {
        String getGuid();

        boolean getIsComment();

        String getSession();

        long getSvrTime();

        String getThr();

        long getThrSvrT();

        boolean hasGuid();

        boolean hasIsComment();

        boolean hasSession();

        boolean hasSvrTime();

        boolean hasThr();

        boolean hasThrSvrT();
    }

    public static final class MessageInput extends GeneratedMessageLite implements MessageInputOrBuilder {
        public static final int ATINFOLIST_FIELD_NUMBER = 17;
        public static final int BODY_FIELD_NUMBER = 4;
        public static final int COMMENT_INFO_FIELD_NUMBER = 15;
        public static final int E2EMESSAGEFAKEBODY_FIELD_NUMBER = 9;
        public static final int EMOJILIST_FIELD_NUMBER = 6;
        public static final int FILEINTEGRATION_FIELD_NUMBER = 14;
        public static final int FONTSTYTE_FIELD_NUMBER = 18;
        public static final int GIPHYID_FIELD_NUMBER = 12;
        public static final int ISATALLGROUPMEMBERS_FIELD_NUMBER = 11;
        public static final int ISE2EINVITATION_FIELD_NUMBER = 10;
        public static final int ISE2EMESSAGE_FIELD_NUMBER = 3;
        public static final int ISMYNOTE_FIELD_NUMBER = 13;
        public static final int LENINSECONDS_FIELD_NUMBER = 8;
        public static final int LOCALFILEPATH_FIELD_NUMBER = 7;
        public static final int MSGSUBTYPE_FIELD_NUMBER = 16;
        public static final int MSGTYPE_FIELD_NUMBER = 1;
        public static final int SESSIONID_FIELD_NUMBER = 2;
        public static final int VECMESSAGEATLIST_FIELD_NUMBER = 5;
        private static final MessageInput defaultInstance = new MessageInput(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public AtInfoList atInfoList_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object body_;
        /* access modifiers changed from: private */
        public CommentInfo commentInfo_;
        /* access modifiers changed from: private */
        public Object e2EMessageFakeBody_;
        /* access modifiers changed from: private */
        public EmojiList emojiList_;
        /* access modifiers changed from: private */
        public FileIntegrationInfo fileIntegration_;
        /* access modifiers changed from: private */
        public FontStyte fontStyte_;
        /* access modifiers changed from: private */
        public Object giphyID_;
        /* access modifiers changed from: private */
        public boolean isAtAllGroupMembers_;
        /* access modifiers changed from: private */
        public boolean isE2EInvitation_;
        /* access modifiers changed from: private */
        public boolean isE2EMessage_;
        /* access modifiers changed from: private */
        public boolean isMyNote_;
        /* access modifiers changed from: private */
        public int lenInSeconds_;
        /* access modifiers changed from: private */
        public Object localFilePath_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int msgSubType_;
        /* access modifiers changed from: private */
        public int msgType_;
        /* access modifiers changed from: private */
        public Object sessionID_;
        /* access modifiers changed from: private */
        public LazyStringList vecMessageAtList_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageInput, Builder> implements MessageInputOrBuilder {
            private AtInfoList atInfoList_ = AtInfoList.getDefaultInstance();
            private int bitField0_;
            private Object body_ = "";
            private CommentInfo commentInfo_ = CommentInfo.getDefaultInstance();
            private Object e2EMessageFakeBody_ = "";
            private EmojiList emojiList_ = EmojiList.getDefaultInstance();
            private FileIntegrationInfo fileIntegration_ = FileIntegrationInfo.getDefaultInstance();
            private FontStyte fontStyte_ = FontStyte.getDefaultInstance();
            private Object giphyID_ = "";
            private boolean isAtAllGroupMembers_;
            private boolean isE2EInvitation_;
            private boolean isE2EMessage_;
            private boolean isMyNote_;
            private int lenInSeconds_;
            private Object localFilePath_ = "";
            private int msgSubType_;
            private int msgType_;
            private Object sessionID_ = "";
            private LazyStringList vecMessageAtList_ = LazyStringArrayList.EMPTY;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.msgType_ = 0;
                this.bitField0_ &= -2;
                this.sessionID_ = "";
                this.bitField0_ &= -3;
                this.isE2EMessage_ = false;
                this.bitField0_ &= -5;
                this.body_ = "";
                this.bitField0_ &= -9;
                this.vecMessageAtList_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -17;
                this.emojiList_ = EmojiList.getDefaultInstance();
                this.bitField0_ &= -33;
                this.localFilePath_ = "";
                this.bitField0_ &= -65;
                this.lenInSeconds_ = 0;
                this.bitField0_ &= -129;
                this.e2EMessageFakeBody_ = "";
                this.bitField0_ &= -257;
                this.isE2EInvitation_ = false;
                this.bitField0_ &= -513;
                this.isAtAllGroupMembers_ = false;
                this.bitField0_ &= -1025;
                this.giphyID_ = "";
                this.bitField0_ &= -2049;
                this.isMyNote_ = false;
                this.bitField0_ &= -4097;
                this.fileIntegration_ = FileIntegrationInfo.getDefaultInstance();
                this.bitField0_ &= -8193;
                this.commentInfo_ = CommentInfo.getDefaultInstance();
                this.bitField0_ &= -16385;
                this.msgSubType_ = 0;
                this.bitField0_ &= -32769;
                this.atInfoList_ = AtInfoList.getDefaultInstance();
                this.bitField0_ &= -65537;
                this.fontStyte_ = FontStyte.getDefaultInstance();
                this.bitField0_ &= -131073;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageInput getDefaultInstanceForType() {
                return MessageInput.getDefaultInstance();
            }

            public MessageInput build() {
                MessageInput buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageInput buildParsed() throws InvalidProtocolBufferException {
                MessageInput buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageInput buildPartial() {
                MessageInput messageInput = new MessageInput(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                messageInput.msgType_ = this.msgType_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                messageInput.sessionID_ = this.sessionID_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                messageInput.isE2EMessage_ = this.isE2EMessage_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                messageInput.body_ = this.body_;
                if ((this.bitField0_ & 16) == 16) {
                    this.vecMessageAtList_ = new UnmodifiableLazyStringList(this.vecMessageAtList_);
                    this.bitField0_ &= -17;
                }
                messageInput.vecMessageAtList_ = this.vecMessageAtList_;
                if ((i & 32) == 32) {
                    i2 |= 16;
                }
                messageInput.emojiList_ = this.emojiList_;
                if ((i & 64) == 64) {
                    i2 |= 32;
                }
                messageInput.localFilePath_ = this.localFilePath_;
                if ((i & 128) == 128) {
                    i2 |= 64;
                }
                messageInput.lenInSeconds_ = this.lenInSeconds_;
                if ((i & 256) == 256) {
                    i2 |= 128;
                }
                messageInput.e2EMessageFakeBody_ = this.e2EMessageFakeBody_;
                if ((i & 512) == 512) {
                    i2 |= 256;
                }
                messageInput.isE2EInvitation_ = this.isE2EInvitation_;
                if ((i & 1024) == 1024) {
                    i2 |= 512;
                }
                messageInput.isAtAllGroupMembers_ = this.isAtAllGroupMembers_;
                if ((i & 2048) == 2048) {
                    i2 |= 1024;
                }
                messageInput.giphyID_ = this.giphyID_;
                if ((i & 4096) == 4096) {
                    i2 |= 2048;
                }
                messageInput.isMyNote_ = this.isMyNote_;
                if ((i & 8192) == 8192) {
                    i2 |= 4096;
                }
                messageInput.fileIntegration_ = this.fileIntegration_;
                if ((i & 16384) == 16384) {
                    i2 |= 8192;
                }
                messageInput.commentInfo_ = this.commentInfo_;
                if ((32768 & i) == 32768) {
                    i2 |= 16384;
                }
                messageInput.msgSubType_ = this.msgSubType_;
                if ((65536 & i) == 65536) {
                    i2 |= 32768;
                }
                messageInput.atInfoList_ = this.atInfoList_;
                if ((i & 131072) == 131072) {
                    i2 |= 65536;
                }
                messageInput.fontStyte_ = this.fontStyte_;
                messageInput.bitField0_ = i2;
                return messageInput;
            }

            public Builder mergeFrom(MessageInput messageInput) {
                if (messageInput == MessageInput.getDefaultInstance()) {
                    return this;
                }
                if (messageInput.hasMsgType()) {
                    setMsgType(messageInput.getMsgType());
                }
                if (messageInput.hasSessionID()) {
                    setSessionID(messageInput.getSessionID());
                }
                if (messageInput.hasIsE2EMessage()) {
                    setIsE2EMessage(messageInput.getIsE2EMessage());
                }
                if (messageInput.hasBody()) {
                    setBody(messageInput.getBody());
                }
                if (!messageInput.vecMessageAtList_.isEmpty()) {
                    if (this.vecMessageAtList_.isEmpty()) {
                        this.vecMessageAtList_ = messageInput.vecMessageAtList_;
                        this.bitField0_ &= -17;
                    } else {
                        ensureVecMessageAtListIsMutable();
                        this.vecMessageAtList_.addAll(messageInput.vecMessageAtList_);
                    }
                }
                if (messageInput.hasEmojiList()) {
                    mergeEmojiList(messageInput.getEmojiList());
                }
                if (messageInput.hasLocalFilePath()) {
                    setLocalFilePath(messageInput.getLocalFilePath());
                }
                if (messageInput.hasLenInSeconds()) {
                    setLenInSeconds(messageInput.getLenInSeconds());
                }
                if (messageInput.hasE2EMessageFakeBody()) {
                    setE2EMessageFakeBody(messageInput.getE2EMessageFakeBody());
                }
                if (messageInput.hasIsE2EInvitation()) {
                    setIsE2EInvitation(messageInput.getIsE2EInvitation());
                }
                if (messageInput.hasIsAtAllGroupMembers()) {
                    setIsAtAllGroupMembers(messageInput.getIsAtAllGroupMembers());
                }
                if (messageInput.hasGiphyID()) {
                    setGiphyID(messageInput.getGiphyID());
                }
                if (messageInput.hasIsMyNote()) {
                    setIsMyNote(messageInput.getIsMyNote());
                }
                if (messageInput.hasFileIntegration()) {
                    mergeFileIntegration(messageInput.getFileIntegration());
                }
                if (messageInput.hasCommentInfo()) {
                    mergeCommentInfo(messageInput.getCommentInfo());
                }
                if (messageInput.hasMsgSubType()) {
                    setMsgSubType(messageInput.getMsgSubType());
                }
                if (messageInput.hasAtInfoList()) {
                    mergeAtInfoList(messageInput.getAtInfoList());
                }
                if (messageInput.hasFontStyte()) {
                    mergeFontStyte(messageInput.getFontStyte());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMsgType() || !hasSessionID()) {
                    return false;
                }
                if (hasEmojiList() && !getEmojiList().isInitialized()) {
                    return false;
                }
                if (hasFileIntegration() && !getFileIntegration().isInitialized()) {
                    return false;
                }
                if (hasCommentInfo() && !getCommentInfo().isInitialized()) {
                    return false;
                }
                if (hasAtInfoList() && !getAtInfoList().isInitialized()) {
                    return false;
                }
                if (!hasFontStyte() || getFontStyte().isInitialized()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 8:
                            this.bitField0_ |= 1;
                            this.msgType_ = codedInputStream.readInt32();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.sessionID_ = codedInputStream.readBytes();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.isE2EMessage_ = codedInputStream.readBool();
                            break;
                        case 34:
                            this.bitField0_ |= 8;
                            this.body_ = codedInputStream.readBytes();
                            break;
                        case 42:
                            ensureVecMessageAtListIsMutable();
                            this.vecMessageAtList_.add(codedInputStream.readBytes());
                            break;
                        case 50:
                            Builder newBuilder = EmojiList.newBuilder();
                            if (hasEmojiList()) {
                                newBuilder.mergeFrom(getEmojiList());
                            }
                            codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                            setEmojiList(newBuilder.buildPartial());
                            break;
                        case 58:
                            this.bitField0_ |= 64;
                            this.localFilePath_ = codedInputStream.readBytes();
                            break;
                        case 64:
                            this.bitField0_ |= 128;
                            this.lenInSeconds_ = codedInputStream.readInt32();
                            break;
                        case 74:
                            this.bitField0_ |= 256;
                            this.e2EMessageFakeBody_ = codedInputStream.readBytes();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.isE2EInvitation_ = codedInputStream.readBool();
                            break;
                        case 88:
                            this.bitField0_ |= 1024;
                            this.isAtAllGroupMembers_ = codedInputStream.readBool();
                            break;
                        case 98:
                            this.bitField0_ |= 2048;
                            this.giphyID_ = codedInputStream.readBytes();
                            break;
                        case 104:
                            this.bitField0_ |= 4096;
                            this.isMyNote_ = codedInputStream.readBool();
                            break;
                        case 114:
                            Builder newBuilder2 = FileIntegrationInfo.newBuilder();
                            if (hasFileIntegration()) {
                                newBuilder2.mergeFrom(getFileIntegration());
                            }
                            codedInputStream.readMessage(newBuilder2, extensionRegistryLite);
                            setFileIntegration(newBuilder2.buildPartial());
                            break;
                        case 122:
                            Builder newBuilder3 = CommentInfo.newBuilder();
                            if (hasCommentInfo()) {
                                newBuilder3.mergeFrom(getCommentInfo());
                            }
                            codedInputStream.readMessage(newBuilder3, extensionRegistryLite);
                            setCommentInfo(newBuilder3.buildPartial());
                            break;
                        case 128:
                            this.bitField0_ |= 32768;
                            this.msgSubType_ = codedInputStream.readInt32();
                            break;
                        case 138:
                            Builder newBuilder4 = AtInfoList.newBuilder();
                            if (hasAtInfoList()) {
                                newBuilder4.mergeFrom(getAtInfoList());
                            }
                            codedInputStream.readMessage(newBuilder4, extensionRegistryLite);
                            setAtInfoList(newBuilder4.buildPartial());
                            break;
                        case 146:
                            Builder newBuilder5 = FontStyte.newBuilder();
                            if (hasFontStyte()) {
                                newBuilder5.mergeFrom(getFontStyte());
                            }
                            codedInputStream.readMessage(newBuilder5, extensionRegistryLite);
                            setFontStyte(newBuilder5.buildPartial());
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasMsgType() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getMsgType() {
                return this.msgType_;
            }

            public Builder setMsgType(int i) {
                this.bitField0_ |= 1;
                this.msgType_ = i;
                return this;
            }

            public Builder clearMsgType() {
                this.bitField0_ &= -2;
                this.msgType_ = 0;
                return this;
            }

            public boolean hasSessionID() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getSessionID() {
                Object obj = this.sessionID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionID_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionID(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.sessionID_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionID() {
                this.bitField0_ &= -3;
                this.sessionID_ = MessageInput.getDefaultInstance().getSessionID();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionID(ByteString byteString) {
                this.bitField0_ |= 2;
                this.sessionID_ = byteString;
            }

            public boolean hasIsE2EMessage() {
                return (this.bitField0_ & 4) == 4;
            }

            public boolean getIsE2EMessage() {
                return this.isE2EMessage_;
            }

            public Builder setIsE2EMessage(boolean z) {
                this.bitField0_ |= 4;
                this.isE2EMessage_ = z;
                return this;
            }

            public Builder clearIsE2EMessage() {
                this.bitField0_ &= -5;
                this.isE2EMessage_ = false;
                return this;
            }

            public boolean hasBody() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getBody() {
                Object obj = this.body_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.body_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setBody(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.body_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearBody() {
                this.bitField0_ &= -9;
                this.body_ = MessageInput.getDefaultInstance().getBody();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setBody(ByteString byteString) {
                this.bitField0_ |= 8;
                this.body_ = byteString;
            }

            private void ensureVecMessageAtListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.vecMessageAtList_ = new LazyStringArrayList(this.vecMessageAtList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<String> getVecMessageAtListList() {
                return Collections.unmodifiableList(this.vecMessageAtList_);
            }

            public int getVecMessageAtListCount() {
                return this.vecMessageAtList_.size();
            }

            public String getVecMessageAtList(int i) {
                return (String) this.vecMessageAtList_.get(i);
            }

            public Builder setVecMessageAtList(int i, String str) {
                if (str != null) {
                    ensureVecMessageAtListIsMutable();
                    this.vecMessageAtList_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addVecMessageAtList(String str) {
                if (str != null) {
                    ensureVecMessageAtListIsMutable();
                    this.vecMessageAtList_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllVecMessageAtList(Iterable<String> iterable) {
                ensureVecMessageAtListIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.vecMessageAtList_);
                return this;
            }

            public Builder clearVecMessageAtList() {
                this.vecMessageAtList_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addVecMessageAtList(ByteString byteString) {
                ensureVecMessageAtListIsMutable();
                this.vecMessageAtList_.add(byteString);
            }

            public boolean hasEmojiList() {
                return (this.bitField0_ & 32) == 32;
            }

            public EmojiList getEmojiList() {
                return this.emojiList_;
            }

            public Builder setEmojiList(EmojiList emojiList) {
                if (emojiList != null) {
                    this.emojiList_ = emojiList;
                    this.bitField0_ |= 32;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setEmojiList(Builder builder) {
                this.emojiList_ = builder.build();
                this.bitField0_ |= 32;
                return this;
            }

            public Builder mergeEmojiList(EmojiList emojiList) {
                if ((this.bitField0_ & 32) != 32 || this.emojiList_ == EmojiList.getDefaultInstance()) {
                    this.emojiList_ = emojiList;
                } else {
                    this.emojiList_ = EmojiList.newBuilder(this.emojiList_).mergeFrom(emojiList).buildPartial();
                }
                this.bitField0_ |= 32;
                return this;
            }

            public Builder clearEmojiList() {
                this.emojiList_ = EmojiList.getDefaultInstance();
                this.bitField0_ &= -33;
                return this;
            }

            public boolean hasLocalFilePath() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getLocalFilePath() {
                Object obj = this.localFilePath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.localFilePath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setLocalFilePath(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.localFilePath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearLocalFilePath() {
                this.bitField0_ &= -65;
                this.localFilePath_ = MessageInput.getDefaultInstance().getLocalFilePath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setLocalFilePath(ByteString byteString) {
                this.bitField0_ |= 64;
                this.localFilePath_ = byteString;
            }

            public boolean hasLenInSeconds() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getLenInSeconds() {
                return this.lenInSeconds_;
            }

            public Builder setLenInSeconds(int i) {
                this.bitField0_ |= 128;
                this.lenInSeconds_ = i;
                return this;
            }

            public Builder clearLenInSeconds() {
                this.bitField0_ &= -129;
                this.lenInSeconds_ = 0;
                return this;
            }

            public boolean hasE2EMessageFakeBody() {
                return (this.bitField0_ & 256) == 256;
            }

            public String getE2EMessageFakeBody() {
                Object obj = this.e2EMessageFakeBody_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.e2EMessageFakeBody_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setE2EMessageFakeBody(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.e2EMessageFakeBody_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearE2EMessageFakeBody() {
                this.bitField0_ &= -257;
                this.e2EMessageFakeBody_ = MessageInput.getDefaultInstance().getE2EMessageFakeBody();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setE2EMessageFakeBody(ByteString byteString) {
                this.bitField0_ |= 256;
                this.e2EMessageFakeBody_ = byteString;
            }

            public boolean hasIsE2EInvitation() {
                return (this.bitField0_ & 512) == 512;
            }

            public boolean getIsE2EInvitation() {
                return this.isE2EInvitation_;
            }

            public Builder setIsE2EInvitation(boolean z) {
                this.bitField0_ |= 512;
                this.isE2EInvitation_ = z;
                return this;
            }

            public Builder clearIsE2EInvitation() {
                this.bitField0_ &= -513;
                this.isE2EInvitation_ = false;
                return this;
            }

            public boolean hasIsAtAllGroupMembers() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public boolean getIsAtAllGroupMembers() {
                return this.isAtAllGroupMembers_;
            }

            public Builder setIsAtAllGroupMembers(boolean z) {
                this.bitField0_ |= 1024;
                this.isAtAllGroupMembers_ = z;
                return this;
            }

            public Builder clearIsAtAllGroupMembers() {
                this.bitField0_ &= -1025;
                this.isAtAllGroupMembers_ = false;
                return this;
            }

            public boolean hasGiphyID() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public String getGiphyID() {
                Object obj = this.giphyID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.giphyID_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setGiphyID(String str) {
                if (str != null) {
                    this.bitField0_ |= 2048;
                    this.giphyID_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearGiphyID() {
                this.bitField0_ &= -2049;
                this.giphyID_ = MessageInput.getDefaultInstance().getGiphyID();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setGiphyID(ByteString byteString) {
                this.bitField0_ |= 2048;
                this.giphyID_ = byteString;
            }

            public boolean hasIsMyNote() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public boolean getIsMyNote() {
                return this.isMyNote_;
            }

            public Builder setIsMyNote(boolean z) {
                this.bitField0_ |= 4096;
                this.isMyNote_ = z;
                return this;
            }

            public Builder clearIsMyNote() {
                this.bitField0_ &= -4097;
                this.isMyNote_ = false;
                return this;
            }

            public boolean hasFileIntegration() {
                return (this.bitField0_ & 8192) == 8192;
            }

            public FileIntegrationInfo getFileIntegration() {
                return this.fileIntegration_;
            }

            public Builder setFileIntegration(FileIntegrationInfo fileIntegrationInfo) {
                if (fileIntegrationInfo != null) {
                    this.fileIntegration_ = fileIntegrationInfo;
                    this.bitField0_ |= 8192;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setFileIntegration(Builder builder) {
                this.fileIntegration_ = builder.build();
                this.bitField0_ |= 8192;
                return this;
            }

            public Builder mergeFileIntegration(FileIntegrationInfo fileIntegrationInfo) {
                if ((this.bitField0_ & 8192) != 8192 || this.fileIntegration_ == FileIntegrationInfo.getDefaultInstance()) {
                    this.fileIntegration_ = fileIntegrationInfo;
                } else {
                    this.fileIntegration_ = FileIntegrationInfo.newBuilder(this.fileIntegration_).mergeFrom(fileIntegrationInfo).buildPartial();
                }
                this.bitField0_ |= 8192;
                return this;
            }

            public Builder clearFileIntegration() {
                this.fileIntegration_ = FileIntegrationInfo.getDefaultInstance();
                this.bitField0_ &= -8193;
                return this;
            }

            public boolean hasCommentInfo() {
                return (this.bitField0_ & 16384) == 16384;
            }

            public CommentInfo getCommentInfo() {
                return this.commentInfo_;
            }

            public Builder setCommentInfo(CommentInfo commentInfo) {
                if (commentInfo != null) {
                    this.commentInfo_ = commentInfo;
                    this.bitField0_ |= 16384;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setCommentInfo(Builder builder) {
                this.commentInfo_ = builder.build();
                this.bitField0_ |= 16384;
                return this;
            }

            public Builder mergeCommentInfo(CommentInfo commentInfo) {
                if ((this.bitField0_ & 16384) != 16384 || this.commentInfo_ == CommentInfo.getDefaultInstance()) {
                    this.commentInfo_ = commentInfo;
                } else {
                    this.commentInfo_ = CommentInfo.newBuilder(this.commentInfo_).mergeFrom(commentInfo).buildPartial();
                }
                this.bitField0_ |= 16384;
                return this;
            }

            public Builder clearCommentInfo() {
                this.commentInfo_ = CommentInfo.getDefaultInstance();
                this.bitField0_ &= -16385;
                return this;
            }

            public boolean hasMsgSubType() {
                return (this.bitField0_ & 32768) == 32768;
            }

            public int getMsgSubType() {
                return this.msgSubType_;
            }

            public Builder setMsgSubType(int i) {
                this.bitField0_ |= 32768;
                this.msgSubType_ = i;
                return this;
            }

            public Builder clearMsgSubType() {
                this.bitField0_ &= -32769;
                this.msgSubType_ = 0;
                return this;
            }

            public boolean hasAtInfoList() {
                return (this.bitField0_ & 65536) == 65536;
            }

            public AtInfoList getAtInfoList() {
                return this.atInfoList_;
            }

            public Builder setAtInfoList(AtInfoList atInfoList) {
                if (atInfoList != null) {
                    this.atInfoList_ = atInfoList;
                    this.bitField0_ |= 65536;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setAtInfoList(Builder builder) {
                this.atInfoList_ = builder.build();
                this.bitField0_ |= 65536;
                return this;
            }

            public Builder mergeAtInfoList(AtInfoList atInfoList) {
                if ((this.bitField0_ & 65536) != 65536 || this.atInfoList_ == AtInfoList.getDefaultInstance()) {
                    this.atInfoList_ = atInfoList;
                } else {
                    this.atInfoList_ = AtInfoList.newBuilder(this.atInfoList_).mergeFrom(atInfoList).buildPartial();
                }
                this.bitField0_ |= 65536;
                return this;
            }

            public Builder clearAtInfoList() {
                this.atInfoList_ = AtInfoList.getDefaultInstance();
                this.bitField0_ &= -65537;
                return this;
            }

            public boolean hasFontStyte() {
                return (this.bitField0_ & 131072) == 131072;
            }

            public FontStyte getFontStyte() {
                return this.fontStyte_;
            }

            public Builder setFontStyte(FontStyte fontStyte) {
                if (fontStyte != null) {
                    this.fontStyte_ = fontStyte;
                    this.bitField0_ |= 131072;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setFontStyte(Builder builder) {
                this.fontStyte_ = builder.build();
                this.bitField0_ |= 131072;
                return this;
            }

            public Builder mergeFontStyte(FontStyte fontStyte) {
                if ((this.bitField0_ & 131072) != 131072 || this.fontStyte_ == FontStyte.getDefaultInstance()) {
                    this.fontStyte_ = fontStyte;
                } else {
                    this.fontStyte_ = FontStyte.newBuilder(this.fontStyte_).mergeFrom(fontStyte).buildPartial();
                }
                this.bitField0_ |= 131072;
                return this;
            }

            public Builder clearFontStyte() {
                this.fontStyte_ = FontStyte.getDefaultInstance();
                this.bitField0_ &= -131073;
                return this;
            }
        }

        private MessageInput(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageInput(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageInput getDefaultInstance() {
            return defaultInstance;
        }

        public MessageInput getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasMsgType() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getMsgType() {
            return this.msgType_;
        }

        public boolean hasSessionID() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getSessionID() {
            Object obj = this.sessionID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionID_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIDBytes() {
            Object obj = this.sessionID_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionID_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsE2EMessage() {
            return (this.bitField0_ & 4) == 4;
        }

        public boolean getIsE2EMessage() {
            return this.isE2EMessage_;
        }

        public boolean hasBody() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getBody() {
            Object obj = this.body_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.body_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getBodyBytes() {
            Object obj = this.body_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.body_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<String> getVecMessageAtListList() {
            return this.vecMessageAtList_;
        }

        public int getVecMessageAtListCount() {
            return this.vecMessageAtList_.size();
        }

        public String getVecMessageAtList(int i) {
            return (String) this.vecMessageAtList_.get(i);
        }

        public boolean hasEmojiList() {
            return (this.bitField0_ & 16) == 16;
        }

        public EmojiList getEmojiList() {
            return this.emojiList_;
        }

        public boolean hasLocalFilePath() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getLocalFilePath() {
            Object obj = this.localFilePath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.localFilePath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getLocalFilePathBytes() {
            Object obj = this.localFilePath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.localFilePath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasLenInSeconds() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getLenInSeconds() {
            return this.lenInSeconds_;
        }

        public boolean hasE2EMessageFakeBody() {
            return (this.bitField0_ & 128) == 128;
        }

        public String getE2EMessageFakeBody() {
            Object obj = this.e2EMessageFakeBody_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.e2EMessageFakeBody_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getE2EMessageFakeBodyBytes() {
            Object obj = this.e2EMessageFakeBody_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.e2EMessageFakeBody_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsE2EInvitation() {
            return (this.bitField0_ & 256) == 256;
        }

        public boolean getIsE2EInvitation() {
            return this.isE2EInvitation_;
        }

        public boolean hasIsAtAllGroupMembers() {
            return (this.bitField0_ & 512) == 512;
        }

        public boolean getIsAtAllGroupMembers() {
            return this.isAtAllGroupMembers_;
        }

        public boolean hasGiphyID() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public String getGiphyID() {
            Object obj = this.giphyID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.giphyID_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getGiphyIDBytes() {
            Object obj = this.giphyID_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.giphyID_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsMyNote() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public boolean getIsMyNote() {
            return this.isMyNote_;
        }

        public boolean hasFileIntegration() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public FileIntegrationInfo getFileIntegration() {
            return this.fileIntegration_;
        }

        public boolean hasCommentInfo() {
            return (this.bitField0_ & 8192) == 8192;
        }

        public CommentInfo getCommentInfo() {
            return this.commentInfo_;
        }

        public boolean hasMsgSubType() {
            return (this.bitField0_ & 16384) == 16384;
        }

        public int getMsgSubType() {
            return this.msgSubType_;
        }

        public boolean hasAtInfoList() {
            return (this.bitField0_ & 32768) == 32768;
        }

        public AtInfoList getAtInfoList() {
            return this.atInfoList_;
        }

        public boolean hasFontStyte() {
            return (this.bitField0_ & 65536) == 65536;
        }

        public FontStyte getFontStyte() {
            return this.fontStyte_;
        }

        private void initFields() {
            this.msgType_ = 0;
            this.sessionID_ = "";
            this.isE2EMessage_ = false;
            this.body_ = "";
            this.vecMessageAtList_ = LazyStringArrayList.EMPTY;
            this.emojiList_ = EmojiList.getDefaultInstance();
            this.localFilePath_ = "";
            this.lenInSeconds_ = 0;
            this.e2EMessageFakeBody_ = "";
            this.isE2EInvitation_ = false;
            this.isAtAllGroupMembers_ = false;
            this.giphyID_ = "";
            this.isMyNote_ = false;
            this.fileIntegration_ = FileIntegrationInfo.getDefaultInstance();
            this.commentInfo_ = CommentInfo.getDefaultInstance();
            this.msgSubType_ = 0;
            this.atInfoList_ = AtInfoList.getDefaultInstance();
            this.fontStyte_ = FontStyte.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasMsgType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSessionID()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (hasEmojiList() && !getEmojiList().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (hasFileIntegration() && !getFileIntegration().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (hasCommentInfo() && !getCommentInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (hasAtInfoList() && !getAtInfoList().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFontStyte() || getFontStyte().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.msgType_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSessionIDBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBool(3, this.isE2EMessage_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getBodyBytes());
            }
            for (int i = 0; i < this.vecMessageAtList_.size(); i++) {
                codedOutputStream.writeBytes(5, this.vecMessageAtList_.getByteString(i));
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeMessage(6, this.emojiList_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(7, getLocalFilePathBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt32(8, this.lenInSeconds_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(9, getE2EMessageFakeBodyBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBool(10, this.isE2EInvitation_);
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBool(11, this.isAtAllGroupMembers_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(12, getGiphyIDBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeBool(13, this.isMyNote_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeMessage(14, this.fileIntegration_);
            }
            if ((this.bitField0_ & 8192) == 8192) {
                codedOutputStream.writeMessage(15, this.commentInfo_);
            }
            if ((this.bitField0_ & 16384) == 16384) {
                codedOutputStream.writeInt32(16, this.msgSubType_);
            }
            if ((this.bitField0_ & 32768) == 32768) {
                codedOutputStream.writeMessage(17, this.atInfoList_);
            }
            if ((this.bitField0_ & 65536) == 65536) {
                codedOutputStream.writeMessage(18, this.fontStyte_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.msgType_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(2, getSessionIDBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeInt32Size += CodedOutputStream.computeBoolSize(3, this.isE2EMessage_);
            }
            if ((this.bitField0_ & 8) == 8) {
                computeInt32Size += CodedOutputStream.computeBytesSize(4, getBodyBytes());
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.vecMessageAtList_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.vecMessageAtList_.getByteString(i3));
            }
            int size = computeInt32Size + i2 + (getVecMessageAtListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeMessageSize(6, this.emojiList_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeBytesSize(7, getLocalFilePathBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeInt32Size(8, this.lenInSeconds_);
            }
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeBytesSize(9, getE2EMessageFakeBodyBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                size += CodedOutputStream.computeBoolSize(10, this.isE2EInvitation_);
            }
            if ((this.bitField0_ & 512) == 512) {
                size += CodedOutputStream.computeBoolSize(11, this.isAtAllGroupMembers_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                size += CodedOutputStream.computeBytesSize(12, getGiphyIDBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                size += CodedOutputStream.computeBoolSize(13, this.isMyNote_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                size += CodedOutputStream.computeMessageSize(14, this.fileIntegration_);
            }
            if ((this.bitField0_ & 8192) == 8192) {
                size += CodedOutputStream.computeMessageSize(15, this.commentInfo_);
            }
            if ((this.bitField0_ & 16384) == 16384) {
                size += CodedOutputStream.computeInt32Size(16, this.msgSubType_);
            }
            if ((this.bitField0_ & 32768) == 32768) {
                size += CodedOutputStream.computeMessageSize(17, this.atInfoList_);
            }
            if ((this.bitField0_ & 65536) == 65536) {
                size += CodedOutputStream.computeMessageSize(18, this.fontStyte_);
            }
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageInput parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageInput parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageInput parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageInput parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageInput parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageInput parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageInput parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageInput parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageInput parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageInput parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageInput messageInput) {
            return newBuilder().mergeFrom(messageInput);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MessageInputOrBuilder extends MessageLiteOrBuilder {
        AtInfoList getAtInfoList();

        String getBody();

        CommentInfo getCommentInfo();

        String getE2EMessageFakeBody();

        EmojiList getEmojiList();

        FileIntegrationInfo getFileIntegration();

        FontStyte getFontStyte();

        String getGiphyID();

        boolean getIsAtAllGroupMembers();

        boolean getIsE2EInvitation();

        boolean getIsE2EMessage();

        boolean getIsMyNote();

        int getLenInSeconds();

        String getLocalFilePath();

        int getMsgSubType();

        int getMsgType();

        String getSessionID();

        String getVecMessageAtList(int i);

        int getVecMessageAtListCount();

        List<String> getVecMessageAtListList();

        boolean hasAtInfoList();

        boolean hasBody();

        boolean hasCommentInfo();

        boolean hasE2EMessageFakeBody();

        boolean hasEmojiList();

        boolean hasFileIntegration();

        boolean hasFontStyte();

        boolean hasGiphyID();

        boolean hasIsAtAllGroupMembers();

        boolean hasIsE2EInvitation();

        boolean hasIsE2EMessage();

        boolean hasIsMyNote();

        boolean hasLenInSeconds();

        boolean hasLocalFilePath();

        boolean hasMsgSubType();

        boolean hasMsgType();

        boolean hasSessionID();
    }

    public static final class MessageSearchResult extends GeneratedMessageLite implements MessageSearchResultOrBuilder {
        public static final int CONTENT_FIELD_NUMBER = 7;
        public static final int CUTTYPE_FIELD_NUMBER = 10;
        public static final int HIGHLIGHTPOS_FIELD_NUMBER = 8;
        public static final int HIGHLIGHTTYPE_FIELD_NUMBER = 9;
        public static final int IS_COMMENT_FIELD_NUMBER = 11;
        public static final int KEYWORD_FIELD_NUMBER = 6;
        public static final int MSGID_FIELD_NUMBER = 1;
        public static final int SENDERJID_FIELD_NUMBER = 3;
        public static final int SENDERNAME_FIELD_NUMBER = 4;
        public static final int SENDTIME_FIELD_NUMBER = 5;
        public static final int SESSIONID_FIELD_NUMBER = 2;
        public static final int THR_ID_FIELD_NUMBER = 12;
        public static final int THR_SVR_T_FIELD_NUMBER = 13;
        private static final MessageSearchResult defaultInstance = new MessageSearchResult(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object content_;
        /* access modifiers changed from: private */
        public int cutType_;
        /* access modifiers changed from: private */
        public List<HighlightPositionItem> highlightPos_;
        /* access modifiers changed from: private */
        public int highlightType_;
        /* access modifiers changed from: private */
        public boolean isComment_;
        /* access modifiers changed from: private */
        public Object keyWord_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object msgId_;
        /* access modifiers changed from: private */
        public long sendTime_;
        /* access modifiers changed from: private */
        public Object senderJid_;
        /* access modifiers changed from: private */
        public Object senderName_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public Object thrId_;
        /* access modifiers changed from: private */
        public long thrSvrT_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageSearchResult, Builder> implements MessageSearchResultOrBuilder {
            private int bitField0_;
            private Object content_ = "";
            private int cutType_;
            private List<HighlightPositionItem> highlightPos_ = Collections.emptyList();
            private int highlightType_;
            private boolean isComment_;
            private Object keyWord_ = "";
            private Object msgId_ = "";
            private long sendTime_;
            private Object senderJid_ = "";
            private Object senderName_ = "";
            private Object sessionId_ = "";
            private Object thrId_ = "";
            private long thrSvrT_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.msgId_ = "";
                this.bitField0_ &= -2;
                this.sessionId_ = "";
                this.bitField0_ &= -3;
                this.senderJid_ = "";
                this.bitField0_ &= -5;
                this.senderName_ = "";
                this.bitField0_ &= -9;
                this.sendTime_ = 0;
                this.bitField0_ &= -17;
                this.keyWord_ = "";
                this.bitField0_ &= -33;
                this.content_ = "";
                this.bitField0_ &= -65;
                this.highlightPos_ = Collections.emptyList();
                this.bitField0_ &= -129;
                this.highlightType_ = 0;
                this.bitField0_ &= -257;
                this.cutType_ = 0;
                this.bitField0_ &= -513;
                this.isComment_ = false;
                this.bitField0_ &= -1025;
                this.thrId_ = "";
                this.bitField0_ &= -2049;
                this.thrSvrT_ = 0;
                this.bitField0_ &= -4097;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageSearchResult getDefaultInstanceForType() {
                return MessageSearchResult.getDefaultInstance();
            }

            public MessageSearchResult build() {
                MessageSearchResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageSearchResult buildParsed() throws InvalidProtocolBufferException {
                MessageSearchResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageSearchResult buildPartial() {
                MessageSearchResult messageSearchResult = new MessageSearchResult(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                messageSearchResult.msgId_ = this.msgId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                messageSearchResult.sessionId_ = this.sessionId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                messageSearchResult.senderJid_ = this.senderJid_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                messageSearchResult.senderName_ = this.senderName_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                messageSearchResult.sendTime_ = this.sendTime_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                messageSearchResult.keyWord_ = this.keyWord_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                messageSearchResult.content_ = this.content_;
                if ((this.bitField0_ & 128) == 128) {
                    this.highlightPos_ = Collections.unmodifiableList(this.highlightPos_);
                    this.bitField0_ &= -129;
                }
                messageSearchResult.highlightPos_ = this.highlightPos_;
                if ((i & 256) == 256) {
                    i2 |= 128;
                }
                messageSearchResult.highlightType_ = this.highlightType_;
                if ((i & 512) == 512) {
                    i2 |= 256;
                }
                messageSearchResult.cutType_ = this.cutType_;
                if ((i & 1024) == 1024) {
                    i2 |= 512;
                }
                messageSearchResult.isComment_ = this.isComment_;
                if ((i & 2048) == 2048) {
                    i2 |= 1024;
                }
                messageSearchResult.thrId_ = this.thrId_;
                if ((i & 4096) == 4096) {
                    i2 |= 2048;
                }
                messageSearchResult.thrSvrT_ = this.thrSvrT_;
                messageSearchResult.bitField0_ = i2;
                return messageSearchResult;
            }

            public Builder mergeFrom(MessageSearchResult messageSearchResult) {
                if (messageSearchResult == MessageSearchResult.getDefaultInstance()) {
                    return this;
                }
                if (messageSearchResult.hasMsgId()) {
                    setMsgId(messageSearchResult.getMsgId());
                }
                if (messageSearchResult.hasSessionId()) {
                    setSessionId(messageSearchResult.getSessionId());
                }
                if (messageSearchResult.hasSenderJid()) {
                    setSenderJid(messageSearchResult.getSenderJid());
                }
                if (messageSearchResult.hasSenderName()) {
                    setSenderName(messageSearchResult.getSenderName());
                }
                if (messageSearchResult.hasSendTime()) {
                    setSendTime(messageSearchResult.getSendTime());
                }
                if (messageSearchResult.hasKeyWord()) {
                    setKeyWord(messageSearchResult.getKeyWord());
                }
                if (messageSearchResult.hasContent()) {
                    setContent(messageSearchResult.getContent());
                }
                if (!messageSearchResult.highlightPos_.isEmpty()) {
                    if (this.highlightPos_.isEmpty()) {
                        this.highlightPos_ = messageSearchResult.highlightPos_;
                        this.bitField0_ &= -129;
                    } else {
                        ensureHighlightPosIsMutable();
                        this.highlightPos_.addAll(messageSearchResult.highlightPos_);
                    }
                }
                if (messageSearchResult.hasHighlightType()) {
                    setHighlightType(messageSearchResult.getHighlightType());
                }
                if (messageSearchResult.hasCutType()) {
                    setCutType(messageSearchResult.getCutType());
                }
                if (messageSearchResult.hasIsComment()) {
                    setIsComment(messageSearchResult.getIsComment());
                }
                if (messageSearchResult.hasThrId()) {
                    setThrId(messageSearchResult.getThrId());
                }
                if (messageSearchResult.hasThrSvrT()) {
                    setThrSvrT(messageSearchResult.getThrSvrT());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMsgId() || !hasSessionId() || !hasSenderJid() || !hasSenderName() || !hasSendTime() || !hasKeyWord() || !hasContent()) {
                    return false;
                }
                for (int i = 0; i < getHighlightPosCount(); i++) {
                    if (!getHighlightPos(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            this.bitField0_ |= 1;
                            this.msgId_ = codedInputStream.readBytes();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.sessionId_ = codedInputStream.readBytes();
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.senderJid_ = codedInputStream.readBytes();
                            break;
                        case 34:
                            this.bitField0_ |= 8;
                            this.senderName_ = codedInputStream.readBytes();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.sendTime_ = codedInputStream.readInt64();
                            break;
                        case 50:
                            this.bitField0_ |= 32;
                            this.keyWord_ = codedInputStream.readBytes();
                            break;
                        case 58:
                            this.bitField0_ |= 64;
                            this.content_ = codedInputStream.readBytes();
                            break;
                        case 66:
                            Builder newBuilder = HighlightPositionItem.newBuilder();
                            codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                            addHighlightPos(newBuilder.buildPartial());
                            break;
                        case 72:
                            this.bitField0_ |= 256;
                            this.highlightType_ = codedInputStream.readInt32();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.cutType_ = codedInputStream.readInt32();
                            break;
                        case 88:
                            this.bitField0_ |= 1024;
                            this.isComment_ = codedInputStream.readBool();
                            break;
                        case 98:
                            this.bitField0_ |= 2048;
                            this.thrId_ = codedInputStream.readBytes();
                            break;
                        case 104:
                            this.bitField0_ |= 4096;
                            this.thrSvrT_ = codedInputStream.readInt64();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasMsgId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getMsgId() {
                Object obj = this.msgId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.msgId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMsgId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.msgId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMsgId() {
                this.bitField0_ &= -2;
                this.msgId_ = MessageSearchResult.getDefaultInstance().getMsgId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMsgId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.msgId_ = byteString;
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -3;
                this.sessionId_ = MessageSearchResult.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.sessionId_ = byteString;
            }

            public boolean hasSenderJid() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getSenderJid() {
                Object obj = this.senderJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.senderJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSenderJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.senderJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSenderJid() {
                this.bitField0_ &= -5;
                this.senderJid_ = MessageSearchResult.getDefaultInstance().getSenderJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSenderJid(ByteString byteString) {
                this.bitField0_ |= 4;
                this.senderJid_ = byteString;
            }

            public boolean hasSenderName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getSenderName() {
                Object obj = this.senderName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.senderName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSenderName(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.senderName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSenderName() {
                this.bitField0_ &= -9;
                this.senderName_ = MessageSearchResult.getDefaultInstance().getSenderName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSenderName(ByteString byteString) {
                this.bitField0_ |= 8;
                this.senderName_ = byteString;
            }

            public boolean hasSendTime() {
                return (this.bitField0_ & 16) == 16;
            }

            public long getSendTime() {
                return this.sendTime_;
            }

            public Builder setSendTime(long j) {
                this.bitField0_ |= 16;
                this.sendTime_ = j;
                return this;
            }

            public Builder clearSendTime() {
                this.bitField0_ &= -17;
                this.sendTime_ = 0;
                return this;
            }

            public boolean hasKeyWord() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getKeyWord() {
                Object obj = this.keyWord_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyWord_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKeyWord(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.keyWord_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKeyWord() {
                this.bitField0_ &= -33;
                this.keyWord_ = MessageSearchResult.getDefaultInstance().getKeyWord();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKeyWord(ByteString byteString) {
                this.bitField0_ |= 32;
                this.keyWord_ = byteString;
            }

            public boolean hasContent() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getContent() {
                Object obj = this.content_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.content_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setContent(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.content_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearContent() {
                this.bitField0_ &= -65;
                this.content_ = MessageSearchResult.getDefaultInstance().getContent();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setContent(ByteString byteString) {
                this.bitField0_ |= 64;
                this.content_ = byteString;
            }

            private void ensureHighlightPosIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.highlightPos_ = new ArrayList(this.highlightPos_);
                    this.bitField0_ |= 128;
                }
            }

            public List<HighlightPositionItem> getHighlightPosList() {
                return Collections.unmodifiableList(this.highlightPos_);
            }

            public int getHighlightPosCount() {
                return this.highlightPos_.size();
            }

            public HighlightPositionItem getHighlightPos(int i) {
                return (HighlightPositionItem) this.highlightPos_.get(i);
            }

            public Builder setHighlightPos(int i, HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem != null) {
                    ensureHighlightPosIsMutable();
                    this.highlightPos_.set(i, highlightPositionItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setHighlightPos(int i, Builder builder) {
                ensureHighlightPosIsMutable();
                this.highlightPos_.set(i, builder.build());
                return this;
            }

            public Builder addHighlightPos(HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem != null) {
                    ensureHighlightPosIsMutable();
                    this.highlightPos_.add(highlightPositionItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addHighlightPos(int i, HighlightPositionItem highlightPositionItem) {
                if (highlightPositionItem != null) {
                    ensureHighlightPosIsMutable();
                    this.highlightPos_.add(i, highlightPositionItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addHighlightPos(Builder builder) {
                ensureHighlightPosIsMutable();
                this.highlightPos_.add(builder.build());
                return this;
            }

            public Builder addHighlightPos(int i, Builder builder) {
                ensureHighlightPosIsMutable();
                this.highlightPos_.add(i, builder.build());
                return this;
            }

            public Builder addAllHighlightPos(Iterable<? extends HighlightPositionItem> iterable) {
                ensureHighlightPosIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.highlightPos_);
                return this;
            }

            public Builder clearHighlightPos() {
                this.highlightPos_ = Collections.emptyList();
                this.bitField0_ &= -129;
                return this;
            }

            public Builder removeHighlightPos(int i) {
                ensureHighlightPosIsMutable();
                this.highlightPos_.remove(i);
                return this;
            }

            public boolean hasHighlightType() {
                return (this.bitField0_ & 256) == 256;
            }

            public int getHighlightType() {
                return this.highlightType_;
            }

            public Builder setHighlightType(int i) {
                this.bitField0_ |= 256;
                this.highlightType_ = i;
                return this;
            }

            public Builder clearHighlightType() {
                this.bitField0_ &= -257;
                this.highlightType_ = 0;
                return this;
            }

            public boolean hasCutType() {
                return (this.bitField0_ & 512) == 512;
            }

            public int getCutType() {
                return this.cutType_;
            }

            public Builder setCutType(int i) {
                this.bitField0_ |= 512;
                this.cutType_ = i;
                return this;
            }

            public Builder clearCutType() {
                this.bitField0_ &= -513;
                this.cutType_ = 0;
                return this;
            }

            public boolean hasIsComment() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public boolean getIsComment() {
                return this.isComment_;
            }

            public Builder setIsComment(boolean z) {
                this.bitField0_ |= 1024;
                this.isComment_ = z;
                return this;
            }

            public Builder clearIsComment() {
                this.bitField0_ &= -1025;
                this.isComment_ = false;
                return this;
            }

            public boolean hasThrId() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public String getThrId() {
                Object obj = this.thrId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.thrId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setThrId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2048;
                    this.thrId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearThrId() {
                this.bitField0_ &= -2049;
                this.thrId_ = MessageSearchResult.getDefaultInstance().getThrId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setThrId(ByteString byteString) {
                this.bitField0_ |= 2048;
                this.thrId_ = byteString;
            }

            public boolean hasThrSvrT() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public long getThrSvrT() {
                return this.thrSvrT_;
            }

            public Builder setThrSvrT(long j) {
                this.bitField0_ |= 4096;
                this.thrSvrT_ = j;
                return this;
            }

            public Builder clearThrSvrT() {
                this.bitField0_ &= -4097;
                this.thrSvrT_ = 0;
                return this;
            }
        }

        private MessageSearchResult(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageSearchResult(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageSearchResult getDefaultInstance() {
            return defaultInstance;
        }

        public MessageSearchResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasMsgId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getMsgId() {
            Object obj = this.msgId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.msgId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMsgIdBytes() {
            Object obj = this.msgId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.msgId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSenderJid() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getSenderJid() {
            Object obj = this.senderJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.senderJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSenderJidBytes() {
            Object obj = this.senderJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.senderJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSenderName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getSenderName() {
            Object obj = this.senderName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.senderName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSenderNameBytes() {
            Object obj = this.senderName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.senderName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSendTime() {
            return (this.bitField0_ & 16) == 16;
        }

        public long getSendTime() {
            return this.sendTime_;
        }

        public boolean hasKeyWord() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getKeyWord() {
            Object obj = this.keyWord_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.keyWord_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyWordBytes() {
            Object obj = this.keyWord_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyWord_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasContent() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getContent() {
            Object obj = this.content_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.content_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getContentBytes() {
            Object obj = this.content_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.content_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<HighlightPositionItem> getHighlightPosList() {
            return this.highlightPos_;
        }

        public List<? extends HighlightPositionItemOrBuilder> getHighlightPosOrBuilderList() {
            return this.highlightPos_;
        }

        public int getHighlightPosCount() {
            return this.highlightPos_.size();
        }

        public HighlightPositionItem getHighlightPos(int i) {
            return (HighlightPositionItem) this.highlightPos_.get(i);
        }

        public HighlightPositionItemOrBuilder getHighlightPosOrBuilder(int i) {
            return (HighlightPositionItemOrBuilder) this.highlightPos_.get(i);
        }

        public boolean hasHighlightType() {
            return (this.bitField0_ & 128) == 128;
        }

        public int getHighlightType() {
            return this.highlightType_;
        }

        public boolean hasCutType() {
            return (this.bitField0_ & 256) == 256;
        }

        public int getCutType() {
            return this.cutType_;
        }

        public boolean hasIsComment() {
            return (this.bitField0_ & 512) == 512;
        }

        public boolean getIsComment() {
            return this.isComment_;
        }

        public boolean hasThrId() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public String getThrId() {
            Object obj = this.thrId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.thrId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getThrIdBytes() {
            Object obj = this.thrId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.thrId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasThrSvrT() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public long getThrSvrT() {
            return this.thrSvrT_;
        }

        private void initFields() {
            this.msgId_ = "";
            this.sessionId_ = "";
            this.senderJid_ = "";
            this.senderName_ = "";
            this.sendTime_ = 0;
            this.keyWord_ = "";
            this.content_ = "";
            this.highlightPos_ = Collections.emptyList();
            this.highlightType_ = 0;
            this.cutType_ = 0;
            this.isComment_ = false;
            this.thrId_ = "";
            this.thrSvrT_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasMsgId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSenderJid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSenderName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSendTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasKeyWord()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasContent()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getHighlightPosCount(); i++) {
                    if (!getHighlightPos(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getMsgIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getSenderJidBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getSenderNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(5, this.sendTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getKeyWordBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getContentBytes());
            }
            for (int i = 0; i < this.highlightPos_.size(); i++) {
                codedOutputStream.writeMessage(8, (MessageLite) this.highlightPos_.get(i));
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeInt32(9, this.highlightType_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeInt32(10, this.cutType_);
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBool(11, this.isComment_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(12, getThrIdBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeInt64(13, this.thrSvrT_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getMsgIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeBytesSize(3, getSenderJidBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                computeBytesSize += CodedOutputStream.computeBytesSize(4, getSenderNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                computeBytesSize += CodedOutputStream.computeInt64Size(5, this.sendTime_);
            }
            if ((this.bitField0_ & 32) == 32) {
                computeBytesSize += CodedOutputStream.computeBytesSize(6, getKeyWordBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                computeBytesSize += CodedOutputStream.computeBytesSize(7, getContentBytes());
            }
            for (int i2 = 0; i2 < this.highlightPos_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(8, (MessageLite) this.highlightPos_.get(i2));
            }
            if ((this.bitField0_ & 128) == 128) {
                computeBytesSize += CodedOutputStream.computeInt32Size(9, this.highlightType_);
            }
            if ((this.bitField0_ & 256) == 256) {
                computeBytesSize += CodedOutputStream.computeInt32Size(10, this.cutType_);
            }
            if ((this.bitField0_ & 512) == 512) {
                computeBytesSize += CodedOutputStream.computeBoolSize(11, this.isComment_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                computeBytesSize += CodedOutputStream.computeBytesSize(12, getThrIdBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                computeBytesSize += CodedOutputStream.computeInt64Size(13, this.thrSvrT_);
            }
            this.memoizedSerializedSize = computeBytesSize;
            return computeBytesSize;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageSearchResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageSearchResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageSearchResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageSearchResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageSearchResult parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageSearchResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageSearchResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageSearchResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageSearchResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageSearchResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageSearchResult messageSearchResult) {
            return newBuilder().mergeFrom(messageSearchResult);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MessageSearchResultOrBuilder extends MessageLiteOrBuilder {
        String getContent();

        int getCutType();

        HighlightPositionItem getHighlightPos(int i);

        int getHighlightPosCount();

        List<HighlightPositionItem> getHighlightPosList();

        int getHighlightType();

        boolean getIsComment();

        String getKeyWord();

        String getMsgId();

        long getSendTime();

        String getSenderJid();

        String getSenderName();

        String getSessionId();

        String getThrId();

        long getThrSvrT();

        boolean hasContent();

        boolean hasCutType();

        boolean hasHighlightType();

        boolean hasIsComment();

        boolean hasKeyWord();

        boolean hasMsgId();

        boolean hasSendTime();

        boolean hasSenderJid();

        boolean hasSenderName();

        boolean hasSessionId();

        boolean hasThrId();

        boolean hasThrSvrT();
    }

    public static final class MessageSenderFilter extends GeneratedMessageLite implements MessageSenderFilterOrBuilder {
        public static final int ONLYP2P_FIELD_NUMBER = 4;
        public static final int SENDERJID_FIELD_NUMBER = 1;
        public static final int SESSIONID_FIELD_NUMBER = 2;
        public static final int TYPE_FIELD_NUMBER = 3;
        private static final MessageSenderFilter defaultInstance = new MessageSenderFilter(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public boolean onlyP2P_;
        /* access modifiers changed from: private */
        public Object senderJid_;
        /* access modifiers changed from: private */
        public Object sessionId_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<MessageSenderFilter, Builder> implements MessageSenderFilterOrBuilder {
            private int bitField0_;
            private boolean onlyP2P_;
            private Object senderJid_ = "";
            private Object sessionId_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            public final boolean isInitialized() {
                return true;
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.senderJid_ = "";
                this.bitField0_ &= -2;
                this.sessionId_ = "";
                this.bitField0_ &= -3;
                this.type_ = 0;
                this.bitField0_ &= -5;
                this.onlyP2P_ = false;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public MessageSenderFilter getDefaultInstanceForType() {
                return MessageSenderFilter.getDefaultInstance();
            }

            public MessageSenderFilter build() {
                MessageSenderFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public MessageSenderFilter buildParsed() throws InvalidProtocolBufferException {
                MessageSenderFilter buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public MessageSenderFilter buildPartial() {
                MessageSenderFilter messageSenderFilter = new MessageSenderFilter(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                messageSenderFilter.senderJid_ = this.senderJid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                messageSenderFilter.sessionId_ = this.sessionId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                messageSenderFilter.type_ = this.type_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                messageSenderFilter.onlyP2P_ = this.onlyP2P_;
                messageSenderFilter.bitField0_ = i2;
                return messageSenderFilter;
            }

            public Builder mergeFrom(MessageSenderFilter messageSenderFilter) {
                if (messageSenderFilter == MessageSenderFilter.getDefaultInstance()) {
                    return this;
                }
                if (messageSenderFilter.hasSenderJid()) {
                    setSenderJid(messageSenderFilter.getSenderJid());
                }
                if (messageSenderFilter.hasSessionId()) {
                    setSessionId(messageSenderFilter.getSessionId());
                }
                if (messageSenderFilter.hasType()) {
                    setType(messageSenderFilter.getType());
                }
                if (messageSenderFilter.hasOnlyP2P()) {
                    setOnlyP2P(messageSenderFilter.getOnlyP2P());
                }
                return this;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.senderJid_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.onlyP2P_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSenderJid() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSenderJid() {
                Object obj = this.senderJid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.senderJid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSenderJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.senderJid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSenderJid() {
                this.bitField0_ &= -2;
                this.senderJid_ = MessageSenderFilter.getDefaultInstance().getSenderJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSenderJid(ByteString byteString) {
                this.bitField0_ |= 1;
                this.senderJid_ = byteString;
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -3;
                this.sessionId_ = MessageSenderFilter.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.sessionId_ = byteString;
            }

            public boolean hasType() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 4;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -5;
                this.type_ = 0;
                return this;
            }

            public boolean hasOnlyP2P() {
                return (this.bitField0_ & 8) == 8;
            }

            public boolean getOnlyP2P() {
                return this.onlyP2P_;
            }

            public Builder setOnlyP2P(boolean z) {
                this.bitField0_ |= 8;
                this.onlyP2P_ = z;
                return this;
            }

            public Builder clearOnlyP2P() {
                this.bitField0_ &= -9;
                this.onlyP2P_ = false;
                return this;
            }
        }

        private MessageSenderFilter(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private MessageSenderFilter(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static MessageSenderFilter getDefaultInstance() {
            return defaultInstance;
        }

        public MessageSenderFilter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSenderJid() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSenderJid() {
            Object obj = this.senderJid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.senderJid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSenderJidBytes() {
            Object obj = this.senderJid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.senderJid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasType() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasOnlyP2P() {
            return (this.bitField0_ & 8) == 8;
        }

        public boolean getOnlyP2P() {
            return this.onlyP2P_;
        }

        private void initFields() {
            this.senderJid_ = "";
            this.sessionId_ = "";
            this.type_ = 0;
            this.onlyP2P_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSenderJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.type_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBool(4, this.onlyP2P_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSenderJidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.type_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBoolSize(4, this.onlyP2P_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MessageSenderFilter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static MessageSenderFilter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static MessageSenderFilter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static MessageSenderFilter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static MessageSenderFilter parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static MessageSenderFilter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static MessageSenderFilter parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageSenderFilter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static MessageSenderFilter parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static MessageSenderFilter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MessageSenderFilter messageSenderFilter) {
            return newBuilder().mergeFrom(messageSenderFilter);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface MessageSenderFilterOrBuilder extends MessageLiteOrBuilder {
        boolean getOnlyP2P();

        String getSenderJid();

        String getSessionId();

        int getType();

        boolean hasOnlyP2P();

        boolean hasSenderJid();

        boolean hasSessionId();

        boolean hasType();
    }

    public static final class PersonalGroupAtcionResponse extends GeneratedMessageLite implements PersonalGroupAtcionResponseOrBuilder {
        public static final int CHANGE_LIST_FIELD_NUMBER = 5;
        public static final int FROM_GROUP_ID_FIELD_NUMBER = 8;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int MAX_GROUP_COUNT_FIELD_NUMBER = 6;
        public static final int MAX_MEMBER_COUNT_FIELD_NUMBER = 7;
        public static final int NOTALLOWEDBUDDIES_FIELD_NUMBER = 10;
        public static final int REQ_ID_FIELD_NUMBER = 3;
        public static final int RESULT_FIELD_NUMBER = 4;
        public static final int TO_GROUP_ID_FIELD_NUMBER = 9;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final PersonalGroupAtcionResponse defaultInstance = new PersonalGroupAtcionResponse(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public LazyStringList changeList_;
        /* access modifiers changed from: private */
        public Object fromGroupId_;
        /* access modifiers changed from: private */
        public Object groupId_;
        /* access modifiers changed from: private */
        public long maxGroupCount_;
        /* access modifiers changed from: private */
        public long maxMemberCount_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<BuddyUserInfo> notAllowedBuddies_;
        /* access modifiers changed from: private */
        public Object reqId_;
        /* access modifiers changed from: private */
        public int result_;
        /* access modifiers changed from: private */
        public Object toGroupId_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<PersonalGroupAtcionResponse, Builder> implements PersonalGroupAtcionResponseOrBuilder {
            private int bitField0_;
            private LazyStringList changeList_ = LazyStringArrayList.EMPTY;
            private Object fromGroupId_ = "";
            private Object groupId_ = "";
            private long maxGroupCount_;
            private long maxMemberCount_;
            private List<BuddyUserInfo> notAllowedBuddies_ = Collections.emptyList();
            private Object reqId_ = "";
            private int result_;
            private Object toGroupId_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.type_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = "";
                this.bitField0_ &= -3;
                this.reqId_ = "";
                this.bitField0_ &= -5;
                this.result_ = 0;
                this.bitField0_ &= -9;
                this.changeList_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -17;
                this.maxGroupCount_ = 0;
                this.bitField0_ &= -33;
                this.maxMemberCount_ = 0;
                this.bitField0_ &= -65;
                this.fromGroupId_ = "";
                this.bitField0_ &= -129;
                this.toGroupId_ = "";
                this.bitField0_ &= -257;
                this.notAllowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -513;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public PersonalGroupAtcionResponse getDefaultInstanceForType() {
                return PersonalGroupAtcionResponse.getDefaultInstance();
            }

            public PersonalGroupAtcionResponse build() {
                PersonalGroupAtcionResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public PersonalGroupAtcionResponse buildParsed() throws InvalidProtocolBufferException {
                PersonalGroupAtcionResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public PersonalGroupAtcionResponse buildPartial() {
                PersonalGroupAtcionResponse personalGroupAtcionResponse = new PersonalGroupAtcionResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                personalGroupAtcionResponse.type_ = this.type_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                personalGroupAtcionResponse.groupId_ = this.groupId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                personalGroupAtcionResponse.reqId_ = this.reqId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                personalGroupAtcionResponse.result_ = this.result_;
                if ((this.bitField0_ & 16) == 16) {
                    this.changeList_ = new UnmodifiableLazyStringList(this.changeList_);
                    this.bitField0_ &= -17;
                }
                personalGroupAtcionResponse.changeList_ = this.changeList_;
                if ((i & 32) == 32) {
                    i2 |= 16;
                }
                personalGroupAtcionResponse.maxGroupCount_ = this.maxGroupCount_;
                if ((i & 64) == 64) {
                    i2 |= 32;
                }
                personalGroupAtcionResponse.maxMemberCount_ = this.maxMemberCount_;
                if ((i & 128) == 128) {
                    i2 |= 64;
                }
                personalGroupAtcionResponse.fromGroupId_ = this.fromGroupId_;
                if ((i & 256) == 256) {
                    i2 |= 128;
                }
                personalGroupAtcionResponse.toGroupId_ = this.toGroupId_;
                if ((this.bitField0_ & 512) == 512) {
                    this.notAllowedBuddies_ = Collections.unmodifiableList(this.notAllowedBuddies_);
                    this.bitField0_ &= -513;
                }
                personalGroupAtcionResponse.notAllowedBuddies_ = this.notAllowedBuddies_;
                personalGroupAtcionResponse.bitField0_ = i2;
                return personalGroupAtcionResponse;
            }

            public Builder mergeFrom(PersonalGroupAtcionResponse personalGroupAtcionResponse) {
                if (personalGroupAtcionResponse == PersonalGroupAtcionResponse.getDefaultInstance()) {
                    return this;
                }
                if (personalGroupAtcionResponse.hasType()) {
                    setType(personalGroupAtcionResponse.getType());
                }
                if (personalGroupAtcionResponse.hasGroupId()) {
                    setGroupId(personalGroupAtcionResponse.getGroupId());
                }
                if (personalGroupAtcionResponse.hasReqId()) {
                    setReqId(personalGroupAtcionResponse.getReqId());
                }
                if (personalGroupAtcionResponse.hasResult()) {
                    setResult(personalGroupAtcionResponse.getResult());
                }
                if (!personalGroupAtcionResponse.changeList_.isEmpty()) {
                    if (this.changeList_.isEmpty()) {
                        this.changeList_ = personalGroupAtcionResponse.changeList_;
                        this.bitField0_ &= -17;
                    } else {
                        ensureChangeListIsMutable();
                        this.changeList_.addAll(personalGroupAtcionResponse.changeList_);
                    }
                }
                if (personalGroupAtcionResponse.hasMaxGroupCount()) {
                    setMaxGroupCount(personalGroupAtcionResponse.getMaxGroupCount());
                }
                if (personalGroupAtcionResponse.hasMaxMemberCount()) {
                    setMaxMemberCount(personalGroupAtcionResponse.getMaxMemberCount());
                }
                if (personalGroupAtcionResponse.hasFromGroupId()) {
                    setFromGroupId(personalGroupAtcionResponse.getFromGroupId());
                }
                if (personalGroupAtcionResponse.hasToGroupId()) {
                    setToGroupId(personalGroupAtcionResponse.getToGroupId());
                }
                if (!personalGroupAtcionResponse.notAllowedBuddies_.isEmpty()) {
                    if (this.notAllowedBuddies_.isEmpty()) {
                        this.notAllowedBuddies_ = personalGroupAtcionResponse.notAllowedBuddies_;
                        this.bitField0_ &= -513;
                    } else {
                        ensureNotAllowedBuddiesIsMutable();
                        this.notAllowedBuddies_.addAll(personalGroupAtcionResponse.notAllowedBuddies_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasType() || !hasGroupId() || !hasReqId() || !hasResult() || !hasMaxGroupCount() || !hasMaxMemberCount() || !hasFromGroupId() || !hasToGroupId()) {
                    return false;
                }
                for (int i = 0; i < getNotAllowedBuddiesCount(); i++) {
                    if (!getNotAllowedBuddies(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 8:
                            this.bitField0_ |= 1;
                            this.type_ = codedInputStream.readInt32();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readBytes();
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.reqId_ = codedInputStream.readBytes();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.result_ = codedInputStream.readInt32();
                            break;
                        case 42:
                            ensureChangeListIsMutable();
                            this.changeList_.add(codedInputStream.readBytes());
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.maxGroupCount_ = codedInputStream.readInt64();
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.maxMemberCount_ = codedInputStream.readInt64();
                            break;
                        case 66:
                            this.bitField0_ |= 128;
                            this.fromGroupId_ = codedInputStream.readBytes();
                            break;
                        case 74:
                            this.bitField0_ |= 256;
                            this.toGroupId_ = codedInputStream.readBytes();
                            break;
                        case 82:
                            Builder newBuilder = BuddyUserInfo.newBuilder();
                            codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                            addNotAllowedBuddies(newBuilder.buildPartial());
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasType() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 1;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -2;
                this.type_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getGroupId() {
                Object obj = this.groupId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.groupId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setGroupId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.groupId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = PersonalGroupAtcionResponse.getDefaultInstance().getGroupId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setGroupId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.groupId_ = byteString;
            }

            public boolean hasReqId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getReqId() {
                Object obj = this.reqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.reqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.reqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReqId() {
                this.bitField0_ &= -5;
                this.reqId_ = PersonalGroupAtcionResponse.getDefaultInstance().getReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReqId(ByteString byteString) {
                this.bitField0_ |= 4;
                this.reqId_ = byteString;
            }

            public boolean hasResult() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getResult() {
                return this.result_;
            }

            public Builder setResult(int i) {
                this.bitField0_ |= 8;
                this.result_ = i;
                return this;
            }

            public Builder clearResult() {
                this.bitField0_ &= -9;
                this.result_ = 0;
                return this;
            }

            private void ensureChangeListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.changeList_ = new LazyStringArrayList(this.changeList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<String> getChangeListList() {
                return Collections.unmodifiableList(this.changeList_);
            }

            public int getChangeListCount() {
                return this.changeList_.size();
            }

            public String getChangeList(int i) {
                return (String) this.changeList_.get(i);
            }

            public Builder setChangeList(int i, String str) {
                if (str != null) {
                    ensureChangeListIsMutable();
                    this.changeList_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addChangeList(String str) {
                if (str != null) {
                    ensureChangeListIsMutable();
                    this.changeList_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllChangeList(Iterable<String> iterable) {
                ensureChangeListIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.changeList_);
                return this;
            }

            public Builder clearChangeList() {
                this.changeList_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addChangeList(ByteString byteString) {
                ensureChangeListIsMutable();
                this.changeList_.add(byteString);
            }

            public boolean hasMaxGroupCount() {
                return (this.bitField0_ & 32) == 32;
            }

            public long getMaxGroupCount() {
                return this.maxGroupCount_;
            }

            public Builder setMaxGroupCount(long j) {
                this.bitField0_ |= 32;
                this.maxGroupCount_ = j;
                return this;
            }

            public Builder clearMaxGroupCount() {
                this.bitField0_ &= -33;
                this.maxGroupCount_ = 0;
                return this;
            }

            public boolean hasMaxMemberCount() {
                return (this.bitField0_ & 64) == 64;
            }

            public long getMaxMemberCount() {
                return this.maxMemberCount_;
            }

            public Builder setMaxMemberCount(long j) {
                this.bitField0_ |= 64;
                this.maxMemberCount_ = j;
                return this;
            }

            public Builder clearMaxMemberCount() {
                this.bitField0_ &= -65;
                this.maxMemberCount_ = 0;
                return this;
            }

            public boolean hasFromGroupId() {
                return (this.bitField0_ & 128) == 128;
            }

            public String getFromGroupId() {
                Object obj = this.fromGroupId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fromGroupId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFromGroupId(String str) {
                if (str != null) {
                    this.bitField0_ |= 128;
                    this.fromGroupId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFromGroupId() {
                this.bitField0_ &= -129;
                this.fromGroupId_ = PersonalGroupAtcionResponse.getDefaultInstance().getFromGroupId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFromGroupId(ByteString byteString) {
                this.bitField0_ |= 128;
                this.fromGroupId_ = byteString;
            }

            public boolean hasToGroupId() {
                return (this.bitField0_ & 256) == 256;
            }

            public String getToGroupId() {
                Object obj = this.toGroupId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.toGroupId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setToGroupId(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.toGroupId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearToGroupId() {
                this.bitField0_ &= -257;
                this.toGroupId_ = PersonalGroupAtcionResponse.getDefaultInstance().getToGroupId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setToGroupId(ByteString byteString) {
                this.bitField0_ |= 256;
                this.toGroupId_ = byteString;
            }

            private void ensureNotAllowedBuddiesIsMutable() {
                if ((this.bitField0_ & 512) != 512) {
                    this.notAllowedBuddies_ = new ArrayList(this.notAllowedBuddies_);
                    this.bitField0_ |= 512;
                }
            }

            public List<BuddyUserInfo> getNotAllowedBuddiesList() {
                return Collections.unmodifiableList(this.notAllowedBuddies_);
            }

            public int getNotAllowedBuddiesCount() {
                return this.notAllowedBuddies_.size();
            }

            public BuddyUserInfo getNotAllowedBuddies(int i) {
                return (BuddyUserInfo) this.notAllowedBuddies_.get(i);
            }

            public Builder setNotAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.set(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setNotAllowedBuddies(int i, Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.set(i, builder.build());
                return this;
            }

            public Builder addNotAllowedBuddies(BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.add(buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addNotAllowedBuddies(int i, BuddyUserInfo buddyUserInfo) {
                if (buddyUserInfo != null) {
                    ensureNotAllowedBuddiesIsMutable();
                    this.notAllowedBuddies_.add(i, buddyUserInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addNotAllowedBuddies(Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.add(builder.build());
                return this;
            }

            public Builder addNotAllowedBuddies(int i, Builder builder) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.add(i, builder.build());
                return this;
            }

            public Builder addAllNotAllowedBuddies(Iterable<? extends BuddyUserInfo> iterable) {
                ensureNotAllowedBuddiesIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.notAllowedBuddies_);
                return this;
            }

            public Builder clearNotAllowedBuddies() {
                this.notAllowedBuddies_ = Collections.emptyList();
                this.bitField0_ &= -513;
                return this;
            }

            public Builder removeNotAllowedBuddies(int i) {
                ensureNotAllowedBuddiesIsMutable();
                this.notAllowedBuddies_.remove(i);
                return this;
            }
        }

        private PersonalGroupAtcionResponse(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private PersonalGroupAtcionResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static PersonalGroupAtcionResponse getDefaultInstance() {
            return defaultInstance;
        }

        public PersonalGroupAtcionResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasType() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getGroupId() {
            Object obj = this.groupId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.groupId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getGroupIdBytes() {
            Object obj = this.groupId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasReqId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getReqId() {
            Object obj = this.reqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.reqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqIdBytes() {
            Object obj = this.reqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasResult() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getResult() {
            return this.result_;
        }

        public List<String> getChangeListList() {
            return this.changeList_;
        }

        public int getChangeListCount() {
            return this.changeList_.size();
        }

        public String getChangeList(int i) {
            return (String) this.changeList_.get(i);
        }

        public boolean hasMaxGroupCount() {
            return (this.bitField0_ & 16) == 16;
        }

        public long getMaxGroupCount() {
            return this.maxGroupCount_;
        }

        public boolean hasMaxMemberCount() {
            return (this.bitField0_ & 32) == 32;
        }

        public long getMaxMemberCount() {
            return this.maxMemberCount_;
        }

        public boolean hasFromGroupId() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getFromGroupId() {
            Object obj = this.fromGroupId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fromGroupId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFromGroupIdBytes() {
            Object obj = this.fromGroupId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fromGroupId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasToGroupId() {
            return (this.bitField0_ & 128) == 128;
        }

        public String getToGroupId() {
            Object obj = this.toGroupId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.toGroupId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getToGroupIdBytes() {
            Object obj = this.toGroupId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.toGroupId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<BuddyUserInfo> getNotAllowedBuddiesList() {
            return this.notAllowedBuddies_;
        }

        public List<? extends BuddyUserInfoOrBuilder> getNotAllowedBuddiesOrBuilderList() {
            return this.notAllowedBuddies_;
        }

        public int getNotAllowedBuddiesCount() {
            return this.notAllowedBuddies_.size();
        }

        public BuddyUserInfo getNotAllowedBuddies(int i) {
            return (BuddyUserInfo) this.notAllowedBuddies_.get(i);
        }

        public BuddyUserInfoOrBuilder getNotAllowedBuddiesOrBuilder(int i) {
            return (BuddyUserInfoOrBuilder) this.notAllowedBuddies_.get(i);
        }

        private void initFields() {
            this.type_ = 0;
            this.groupId_ = "";
            this.reqId_ = "";
            this.result_ = 0;
            this.changeList_ = LazyStringArrayList.EMPTY;
            this.maxGroupCount_ = 0;
            this.maxMemberCount_ = 0;
            this.fromGroupId_ = "";
            this.toGroupId_ = "";
            this.notAllowedBuddies_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMaxGroupCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMaxMemberCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasFromGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasToGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getNotAllowedBuddiesCount(); i++) {
                    if (!getNotAllowedBuddies(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.type_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getGroupIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getReqIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.result_);
            }
            for (int i = 0; i < this.changeList_.size(); i++) {
                codedOutputStream.writeBytes(5, this.changeList_.getByteString(i));
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(6, this.maxGroupCount_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt64(7, this.maxMemberCount_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(8, getFromGroupIdBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(9, getToGroupIdBytes());
            }
            for (int i2 = 0; i2 < this.notAllowedBuddies_.size(); i2++) {
                codedOutputStream.writeMessage(10, (MessageLite) this.notAllowedBuddies_.get(i2));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.type_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(2, getGroupIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeInt32Size += CodedOutputStream.computeBytesSize(3, getReqIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                computeInt32Size += CodedOutputStream.computeInt32Size(4, this.result_);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.changeList_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.changeList_.getByteString(i3));
            }
            int size = computeInt32Size + i2 + (getChangeListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeInt64Size(6, this.maxGroupCount_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeInt64Size(7, this.maxMemberCount_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeBytesSize(8, getFromGroupIdBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeBytesSize(9, getToGroupIdBytes());
            }
            for (int i4 = 0; i4 < this.notAllowedBuddies_.size(); i4++) {
                size += CodedOutputStream.computeMessageSize(10, (MessageLite) this.notAllowedBuddies_.get(i4));
            }
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PersonalGroupAtcionResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static PersonalGroupAtcionResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static PersonalGroupAtcionResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static PersonalGroupAtcionResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PersonalGroupAtcionResponse personalGroupAtcionResponse) {
            return newBuilder().mergeFrom(personalGroupAtcionResponse);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface PersonalGroupAtcionResponseOrBuilder extends MessageLiteOrBuilder {
        String getChangeList(int i);

        int getChangeListCount();

        List<String> getChangeListList();

        String getFromGroupId();

        String getGroupId();

        long getMaxGroupCount();

        long getMaxMemberCount();

        BuddyUserInfo getNotAllowedBuddies(int i);

        int getNotAllowedBuddiesCount();

        List<BuddyUserInfo> getNotAllowedBuddiesList();

        String getReqId();

        int getResult();

        String getToGroupId();

        int getType();

        boolean hasFromGroupId();

        boolean hasGroupId();

        boolean hasMaxGroupCount();

        boolean hasMaxMemberCount();

        boolean hasReqId();

        boolean hasResult();

        boolean hasToGroupId();

        boolean hasType();
    }

    public static final class RobotCommand extends GeneratedMessageLite implements RobotCommandOrBuilder {
        public static final int COMMAND_FIELD_NUMBER = 1;
        public static final int JID_FIELD_NUMBER = 3;
        public static final int SHORTDESCRIPTION_FIELD_NUMBER = 2;
        private static final RobotCommand defaultInstance = new RobotCommand(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object command_;
        /* access modifiers changed from: private */
        public Object jid_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object shortDescription_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<RobotCommand, Builder> implements RobotCommandOrBuilder {
            private int bitField0_;
            private Object command_ = "";
            private Object jid_ = "";
            private Object shortDescription_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.command_ = "";
                this.bitField0_ &= -2;
                this.shortDescription_ = "";
                this.bitField0_ &= -3;
                this.jid_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public RobotCommand getDefaultInstanceForType() {
                return RobotCommand.getDefaultInstance();
            }

            public RobotCommand build() {
                RobotCommand buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public RobotCommand buildParsed() throws InvalidProtocolBufferException {
                RobotCommand buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public RobotCommand buildPartial() {
                RobotCommand robotCommand = new RobotCommand(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                robotCommand.command_ = this.command_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                robotCommand.shortDescription_ = this.shortDescription_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                robotCommand.jid_ = this.jid_;
                robotCommand.bitField0_ = i2;
                return robotCommand;
            }

            public Builder mergeFrom(RobotCommand robotCommand) {
                if (robotCommand == RobotCommand.getDefaultInstance()) {
                    return this;
                }
                if (robotCommand.hasCommand()) {
                    setCommand(robotCommand.getCommand());
                }
                if (robotCommand.hasShortDescription()) {
                    setShortDescription(robotCommand.getShortDescription());
                }
                if (robotCommand.hasJid()) {
                    setJid(robotCommand.getJid());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasCommand() && hasShortDescription()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.command_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.shortDescription_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.jid_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasCommand() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getCommand() {
                Object obj = this.command_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.command_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setCommand(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.command_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearCommand() {
                this.bitField0_ &= -2;
                this.command_ = RobotCommand.getDefaultInstance().getCommand();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setCommand(ByteString byteString) {
                this.bitField0_ |= 1;
                this.command_ = byteString;
            }

            public boolean hasShortDescription() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getShortDescription() {
                Object obj = this.shortDescription_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.shortDescription_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setShortDescription(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.shortDescription_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearShortDescription() {
                this.bitField0_ &= -3;
                this.shortDescription_ = RobotCommand.getDefaultInstance().getShortDescription();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setShortDescription(ByteString byteString) {
                this.bitField0_ |= 2;
                this.shortDescription_ = byteString;
            }

            public boolean hasJid() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getJid() {
                Object obj = this.jid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.jid_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setJid(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.jid_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearJid() {
                this.bitField0_ &= -5;
                this.jid_ = RobotCommand.getDefaultInstance().getJid();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setJid(ByteString byteString) {
                this.bitField0_ |= 4;
                this.jid_ = byteString;
            }
        }

        private RobotCommand(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private RobotCommand(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static RobotCommand getDefaultInstance() {
            return defaultInstance;
        }

        public RobotCommand getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasCommand() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getCommand() {
            Object obj = this.command_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.command_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getCommandBytes() {
            Object obj = this.command_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.command_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasShortDescription() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getShortDescription() {
            Object obj = this.shortDescription_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.shortDescription_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getShortDescriptionBytes() {
            Object obj = this.shortDescription_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.shortDescription_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasJid() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getJid() {
            Object obj = this.jid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.jid_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getJidBytes() {
            Object obj = this.jid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.jid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.command_ = "";
            this.shortDescription_ = "";
            this.jid_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasCommand()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasShortDescription()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCommandBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getShortDescriptionBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getJidBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCommandBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getShortDescriptionBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getJidBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RobotCommand parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static RobotCommand parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static RobotCommand parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static RobotCommand parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static RobotCommand parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static RobotCommand parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static RobotCommand parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RobotCommand parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RobotCommand parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static RobotCommand parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RobotCommand robotCommand) {
            return newBuilder().mergeFrom(robotCommand);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public static final class RobotCommandList extends GeneratedMessageLite implements RobotCommandListOrBuilder {
        public static final int ROBOTCOMMAND_FIELD_NUMBER = 1;
        private static final RobotCommandList defaultInstance = new RobotCommandList(true);
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<RobotCommand> robotCommand_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<RobotCommandList, Builder> implements RobotCommandListOrBuilder {
            private int bitField0_;
            private List<RobotCommand> robotCommand_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.robotCommand_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public RobotCommandList getDefaultInstanceForType() {
                return RobotCommandList.getDefaultInstance();
            }

            public RobotCommandList build() {
                RobotCommandList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public RobotCommandList buildParsed() throws InvalidProtocolBufferException {
                RobotCommandList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public RobotCommandList buildPartial() {
                RobotCommandList robotCommandList = new RobotCommandList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.robotCommand_ = Collections.unmodifiableList(this.robotCommand_);
                    this.bitField0_ &= -2;
                }
                robotCommandList.robotCommand_ = this.robotCommand_;
                return robotCommandList;
            }

            public Builder mergeFrom(RobotCommandList robotCommandList) {
                if (robotCommandList != RobotCommandList.getDefaultInstance() && !robotCommandList.robotCommand_.isEmpty()) {
                    if (this.robotCommand_.isEmpty()) {
                        this.robotCommand_ = robotCommandList.robotCommand_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureRobotCommandIsMutable();
                        this.robotCommand_.addAll(robotCommandList.robotCommand_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getRobotCommandCount(); i++) {
                    if (!getRobotCommand(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = RobotCommand.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addRobotCommand(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureRobotCommandIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.robotCommand_ = new ArrayList(this.robotCommand_);
                    this.bitField0_ |= 1;
                }
            }

            public List<RobotCommand> getRobotCommandList() {
                return Collections.unmodifiableList(this.robotCommand_);
            }

            public int getRobotCommandCount() {
                return this.robotCommand_.size();
            }

            public RobotCommand getRobotCommand(int i) {
                return (RobotCommand) this.robotCommand_.get(i);
            }

            public Builder setRobotCommand(int i, RobotCommand robotCommand) {
                if (robotCommand != null) {
                    ensureRobotCommandIsMutable();
                    this.robotCommand_.set(i, robotCommand);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setRobotCommand(int i, Builder builder) {
                ensureRobotCommandIsMutable();
                this.robotCommand_.set(i, builder.build());
                return this;
            }

            public Builder addRobotCommand(RobotCommand robotCommand) {
                if (robotCommand != null) {
                    ensureRobotCommandIsMutable();
                    this.robotCommand_.add(robotCommand);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addRobotCommand(int i, RobotCommand robotCommand) {
                if (robotCommand != null) {
                    ensureRobotCommandIsMutable();
                    this.robotCommand_.add(i, robotCommand);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addRobotCommand(Builder builder) {
                ensureRobotCommandIsMutable();
                this.robotCommand_.add(builder.build());
                return this;
            }

            public Builder addRobotCommand(int i, Builder builder) {
                ensureRobotCommandIsMutable();
                this.robotCommand_.add(i, builder.build());
                return this;
            }

            public Builder addAllRobotCommand(Iterable<? extends RobotCommand> iterable) {
                ensureRobotCommandIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.robotCommand_);
                return this;
            }

            public Builder clearRobotCommand() {
                this.robotCommand_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeRobotCommand(int i) {
                ensureRobotCommandIsMutable();
                this.robotCommand_.remove(i);
                return this;
            }
        }

        private RobotCommandList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private RobotCommandList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static RobotCommandList getDefaultInstance() {
            return defaultInstance;
        }

        public RobotCommandList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<RobotCommand> getRobotCommandList() {
            return this.robotCommand_;
        }

        public List<? extends RobotCommandOrBuilder> getRobotCommandOrBuilderList() {
            return this.robotCommand_;
        }

        public int getRobotCommandCount() {
            return this.robotCommand_.size();
        }

        public RobotCommand getRobotCommand(int i) {
            return (RobotCommand) this.robotCommand_.get(i);
        }

        public RobotCommandOrBuilder getRobotCommandOrBuilder(int i) {
            return (RobotCommandOrBuilder) this.robotCommand_.get(i);
        }

        private void initFields() {
            this.robotCommand_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getRobotCommandCount(); i++) {
                if (!getRobotCommand(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.robotCommand_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.robotCommand_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.robotCommand_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.robotCommand_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RobotCommandList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static RobotCommandList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static RobotCommandList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static RobotCommandList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static RobotCommandList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static RobotCommandList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static RobotCommandList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RobotCommandList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RobotCommandList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static RobotCommandList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RobotCommandList robotCommandList) {
            return newBuilder().mergeFrom(robotCommandList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface RobotCommandListOrBuilder extends MessageLiteOrBuilder {
        RobotCommand getRobotCommand(int i);

        int getRobotCommandCount();

        List<RobotCommand> getRobotCommandList();
    }

    public interface RobotCommandOrBuilder extends MessageLiteOrBuilder {
        String getCommand();

        String getJid();

        String getShortDescription();

        boolean hasCommand();

        boolean hasJid();

        boolean hasShortDescription();
    }

    public static final class RobotMsg extends GeneratedMessageLite implements RobotMsgOrBuilder {
        public static final int ISUNSUPPORTROBOTMESSAGE_FIELD_NUMBER = 2;
        public static final int JSONMSG_FIELD_NUMBER = 1;
        private static final RobotMsg defaultInstance = new RobotMsg(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean isUnSupportRobotMessage_;
        /* access modifiers changed from: private */
        public Object jsonMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<RobotMsg, Builder> implements RobotMsgOrBuilder {
            private int bitField0_;
            private boolean isUnSupportRobotMessage_;
            private Object jsonMsg_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.jsonMsg_ = "";
                this.bitField0_ &= -2;
                this.isUnSupportRobotMessage_ = false;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public RobotMsg getDefaultInstanceForType() {
                return RobotMsg.getDefaultInstance();
            }

            public RobotMsg build() {
                RobotMsg buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public RobotMsg buildParsed() throws InvalidProtocolBufferException {
                RobotMsg buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public RobotMsg buildPartial() {
                RobotMsg robotMsg = new RobotMsg(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                robotMsg.jsonMsg_ = this.jsonMsg_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                robotMsg.isUnSupportRobotMessage_ = this.isUnSupportRobotMessage_;
                robotMsg.bitField0_ = i2;
                return robotMsg;
            }

            public Builder mergeFrom(RobotMsg robotMsg) {
                if (robotMsg == RobotMsg.getDefaultInstance()) {
                    return this;
                }
                if (robotMsg.hasJsonMsg()) {
                    setJsonMsg(robotMsg.getJsonMsg());
                }
                if (robotMsg.hasIsUnSupportRobotMessage()) {
                    setIsUnSupportRobotMessage(robotMsg.getIsUnSupportRobotMessage());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasJsonMsg() && hasIsUnSupportRobotMessage()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.jsonMsg_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.isUnSupportRobotMessage_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasJsonMsg() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getJsonMsg() {
                Object obj = this.jsonMsg_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.jsonMsg_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setJsonMsg(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.jsonMsg_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearJsonMsg() {
                this.bitField0_ &= -2;
                this.jsonMsg_ = RobotMsg.getDefaultInstance().getJsonMsg();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setJsonMsg(ByteString byteString) {
                this.bitField0_ |= 1;
                this.jsonMsg_ = byteString;
            }

            public boolean hasIsUnSupportRobotMessage() {
                return (this.bitField0_ & 2) == 2;
            }

            public boolean getIsUnSupportRobotMessage() {
                return this.isUnSupportRobotMessage_;
            }

            public Builder setIsUnSupportRobotMessage(boolean z) {
                this.bitField0_ |= 2;
                this.isUnSupportRobotMessage_ = z;
                return this;
            }

            public Builder clearIsUnSupportRobotMessage() {
                this.bitField0_ &= -3;
                this.isUnSupportRobotMessage_ = false;
                return this;
            }
        }

        private RobotMsg(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private RobotMsg(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static RobotMsg getDefaultInstance() {
            return defaultInstance;
        }

        public RobotMsg getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasJsonMsg() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getJsonMsg() {
            Object obj = this.jsonMsg_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.jsonMsg_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getJsonMsgBytes() {
            Object obj = this.jsonMsg_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.jsonMsg_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsUnSupportRobotMessage() {
            return (this.bitField0_ & 2) == 2;
        }

        public boolean getIsUnSupportRobotMessage() {
            return this.isUnSupportRobotMessage_;
        }

        private void initFields() {
            this.jsonMsg_ = "";
            this.isUnSupportRobotMessage_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasJsonMsg()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsUnSupportRobotMessage()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getJsonMsgBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBool(2, this.isUnSupportRobotMessage_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getJsonMsgBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBoolSize(2, this.isUnSupportRobotMessage_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RobotMsg parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static RobotMsg parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static RobotMsg parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static RobotMsg parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static RobotMsg parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static RobotMsg parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static RobotMsg parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RobotMsg parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RobotMsg parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static RobotMsg parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RobotMsg robotMsg) {
            return newBuilder().mergeFrom(robotMsg);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface RobotMsgOrBuilder extends MessageLiteOrBuilder {
        boolean getIsUnSupportRobotMessage();

        String getJsonMsg();

        boolean hasIsUnSupportRobotMessage();

        boolean hasJsonMsg();
    }

    public static final class RoomDeviceInfo extends GeneratedMessageLite implements RoomDeviceInfoOrBuilder {
        public static final int E164NUM_FIELD_NUMBER = 3;
        public static final int ENCRYPT_FIELD_NUMBER = 5;
        public static final int IP_FIELD_NUMBER = 2;
        public static final int NAME_FIELD_NUMBER = 1;
        public static final int TYPE_FIELD_NUMBER = 4;
        private static final RoomDeviceInfo defaultInstance = new RoomDeviceInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object e164Num_;
        /* access modifiers changed from: private */
        public int encrypt_;
        /* access modifiers changed from: private */
        public Object ip_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object name_;
        /* access modifiers changed from: private */
        public int type_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<RoomDeviceInfo, Builder> implements RoomDeviceInfoOrBuilder {
            private int bitField0_;
            private Object e164Num_ = "";
            private int encrypt_;
            private Object ip_ = "";
            private Object name_ = "";
            private int type_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.name_ = "";
                this.bitField0_ &= -2;
                this.ip_ = "";
                this.bitField0_ &= -3;
                this.e164Num_ = "";
                this.bitField0_ &= -5;
                this.type_ = 0;
                this.bitField0_ &= -9;
                this.encrypt_ = 0;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public RoomDeviceInfo getDefaultInstanceForType() {
                return RoomDeviceInfo.getDefaultInstance();
            }

            public RoomDeviceInfo build() {
                RoomDeviceInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public RoomDeviceInfo buildParsed() throws InvalidProtocolBufferException {
                RoomDeviceInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public RoomDeviceInfo buildPartial() {
                RoomDeviceInfo roomDeviceInfo = new RoomDeviceInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                roomDeviceInfo.name_ = this.name_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                roomDeviceInfo.ip_ = this.ip_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                roomDeviceInfo.e164Num_ = this.e164Num_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                roomDeviceInfo.type_ = this.type_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                roomDeviceInfo.encrypt_ = this.encrypt_;
                roomDeviceInfo.bitField0_ = i2;
                return roomDeviceInfo;
            }

            public Builder mergeFrom(RoomDeviceInfo roomDeviceInfo) {
                if (roomDeviceInfo == RoomDeviceInfo.getDefaultInstance()) {
                    return this;
                }
                if (roomDeviceInfo.hasName()) {
                    setName(roomDeviceInfo.getName());
                }
                if (roomDeviceInfo.hasIp()) {
                    setIp(roomDeviceInfo.getIp());
                }
                if (roomDeviceInfo.hasE164Num()) {
                    setE164Num(roomDeviceInfo.getE164Num());
                }
                if (roomDeviceInfo.hasType()) {
                    setType(roomDeviceInfo.getType());
                }
                if (roomDeviceInfo.hasEncrypt()) {
                    setEncrypt(roomDeviceInfo.getEncrypt());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasName() && hasIp() && hasE164Num() && hasType() && hasEncrypt()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.name_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.ip_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.e164Num_ = codedInputStream.readBytes();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.type_ = codedInputStream.readInt32();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.encrypt_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasName() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.name_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearName() {
                this.bitField0_ &= -2;
                this.name_ = RoomDeviceInfo.getDefaultInstance().getName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setName(ByteString byteString) {
                this.bitField0_ |= 1;
                this.name_ = byteString;
            }

            public boolean hasIp() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getIp() {
                Object obj = this.ip_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.ip_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setIp(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.ip_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearIp() {
                this.bitField0_ &= -3;
                this.ip_ = RoomDeviceInfo.getDefaultInstance().getIp();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setIp(ByteString byteString) {
                this.bitField0_ |= 2;
                this.ip_ = byteString;
            }

            public boolean hasE164Num() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getE164Num() {
                Object obj = this.e164Num_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.e164Num_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setE164Num(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.e164Num_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearE164Num() {
                this.bitField0_ &= -5;
                this.e164Num_ = RoomDeviceInfo.getDefaultInstance().getE164Num();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setE164Num(ByteString byteString) {
                this.bitField0_ |= 4;
                this.e164Num_ = byteString;
            }

            public boolean hasType() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int i) {
                this.bitField0_ |= 8;
                this.type_ = i;
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= -9;
                this.type_ = 0;
                return this;
            }

            public boolean hasEncrypt() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getEncrypt() {
                return this.encrypt_;
            }

            public Builder setEncrypt(int i) {
                this.bitField0_ |= 16;
                this.encrypt_ = i;
                return this;
            }

            public Builder clearEncrypt() {
                this.bitField0_ &= -17;
                this.encrypt_ = 0;
                return this;
            }
        }

        private RoomDeviceInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private RoomDeviceInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static RoomDeviceInfo getDefaultInstance() {
            return defaultInstance;
        }

        public RoomDeviceInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasName() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIp() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getIp() {
            Object obj = this.ip_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.ip_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getIpBytes() {
            Object obj = this.ip_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.ip_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasE164Num() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getE164Num() {
            Object obj = this.e164Num_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.e164Num_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getE164NumBytes() {
            Object obj = this.e164Num_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.e164Num_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasType() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getType() {
            return this.type_;
        }

        public boolean hasEncrypt() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getEncrypt() {
            return this.encrypt_;
        }

        private void initFields() {
            this.name_ = "";
            this.ip_ = "";
            this.e164Num_ = "";
            this.type_ = 0;
            this.encrypt_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIp()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasE164Num()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEncrypt()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getIpBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getE164NumBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.type_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.encrypt_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getIpBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getE164NumBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt32Size(4, this.type_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.encrypt_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RoomDeviceInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static RoomDeviceInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static RoomDeviceInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static RoomDeviceInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static RoomDeviceInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static RoomDeviceInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static RoomDeviceInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RoomDeviceInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RoomDeviceInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static RoomDeviceInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RoomDeviceInfo roomDeviceInfo) {
            return newBuilder().mergeFrom(roomDeviceInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface RoomDeviceInfoOrBuilder extends MessageLiteOrBuilder {
        String getE164Num();

        int getEncrypt();

        String getIp();

        String getName();

        int getType();

        boolean hasE164Num();

        boolean hasEncrypt();

        boolean hasIp();

        boolean hasName();

        boolean hasType();
    }

    public static final class RoomEditInfo extends GeneratedMessageLite implements RoomEditInfoOrBuilder {
        public static final int ACTION_OWNER_FIELD_NUMBER = 1;
        public static final int ACTION_OWNER_NAME_FIELD_NUMBER = 2;
        public static final int DESC_ACTION_FIELD_NUMBER = 13;
        public static final int DESC_FIELD_NUMBER = 6;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int LOCAL_TIME_FIELD_NUMBER = 7;
        public static final int MSG_ID_FIELD_NUMBER = 4;
        public static final int NAME_FIELD_NUMBER = 5;
        public static final int NAME_MODIFIED_FIELD_NUMBER = 11;
        public static final int OPTION_MODIFIED_FIELD_NUMBER = 12;
        public static final int PREV_MSG_TIME_FIELD_NUMBER = 9;
        public static final int ROOM_OPTION_FIELD_NUMBER = 10;
        public static final int TM_SERVER_SIDE_FIELD_NUMBER = 8;
        private static final RoomEditInfo defaultInstance = new RoomEditInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public Object actionOwnerName_;
        /* access modifiers changed from: private */
        public Object actionOwner_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int descAction_;
        /* access modifiers changed from: private */
        public Object desc_;
        /* access modifiers changed from: private */
        public Object groupId_;
        /* access modifiers changed from: private */
        public long localTime_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object msgId_;
        /* access modifiers changed from: private */
        public boolean nameModified_;
        /* access modifiers changed from: private */
        public Object name_;
        /* access modifiers changed from: private */
        public boolean optionModified_;
        /* access modifiers changed from: private */
        public long prevMsgTime_;
        /* access modifiers changed from: private */
        public int roomOption_;
        /* access modifiers changed from: private */
        public long tmServerSide_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<RoomEditInfo, Builder> implements RoomEditInfoOrBuilder {
            private Object actionOwnerName_ = "";
            private Object actionOwner_ = "";
            private int bitField0_;
            private int descAction_;
            private Object desc_ = "";
            private Object groupId_ = "";
            private long localTime_;
            private Object msgId_ = "";
            private boolean nameModified_;
            private Object name_ = "";
            private boolean optionModified_;
            private long prevMsgTime_;
            private int roomOption_;
            private long tmServerSide_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.actionOwner_ = "";
                this.bitField0_ &= -2;
                this.actionOwnerName_ = "";
                this.bitField0_ &= -3;
                this.groupId_ = "";
                this.bitField0_ &= -5;
                this.msgId_ = "";
                this.bitField0_ &= -9;
                this.name_ = "";
                this.bitField0_ &= -17;
                this.desc_ = "";
                this.bitField0_ &= -33;
                this.localTime_ = 0;
                this.bitField0_ &= -65;
                this.tmServerSide_ = 0;
                this.bitField0_ &= -129;
                this.prevMsgTime_ = 0;
                this.bitField0_ &= -257;
                this.roomOption_ = 0;
                this.bitField0_ &= -513;
                this.nameModified_ = false;
                this.bitField0_ &= -1025;
                this.optionModified_ = false;
                this.bitField0_ &= -2049;
                this.descAction_ = 0;
                this.bitField0_ &= -4097;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public RoomEditInfo getDefaultInstanceForType() {
                return RoomEditInfo.getDefaultInstance();
            }

            public RoomEditInfo build() {
                RoomEditInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public RoomEditInfo buildParsed() throws InvalidProtocolBufferException {
                RoomEditInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public RoomEditInfo buildPartial() {
                RoomEditInfo roomEditInfo = new RoomEditInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                roomEditInfo.actionOwner_ = this.actionOwner_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                roomEditInfo.actionOwnerName_ = this.actionOwnerName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                roomEditInfo.groupId_ = this.groupId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                roomEditInfo.msgId_ = this.msgId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                roomEditInfo.name_ = this.name_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                roomEditInfo.desc_ = this.desc_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                roomEditInfo.localTime_ = this.localTime_;
                if ((i & 128) == 128) {
                    i2 |= 128;
                }
                roomEditInfo.tmServerSide_ = this.tmServerSide_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                roomEditInfo.prevMsgTime_ = this.prevMsgTime_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                roomEditInfo.roomOption_ = this.roomOption_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                roomEditInfo.nameModified_ = this.nameModified_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                roomEditInfo.optionModified_ = this.optionModified_;
                if ((i & 4096) == 4096) {
                    i2 |= 4096;
                }
                roomEditInfo.descAction_ = this.descAction_;
                roomEditInfo.bitField0_ = i2;
                return roomEditInfo;
            }

            public Builder mergeFrom(RoomEditInfo roomEditInfo) {
                if (roomEditInfo == RoomEditInfo.getDefaultInstance()) {
                    return this;
                }
                if (roomEditInfo.hasActionOwner()) {
                    setActionOwner(roomEditInfo.getActionOwner());
                }
                if (roomEditInfo.hasActionOwnerName()) {
                    setActionOwnerName(roomEditInfo.getActionOwnerName());
                }
                if (roomEditInfo.hasGroupId()) {
                    setGroupId(roomEditInfo.getGroupId());
                }
                if (roomEditInfo.hasMsgId()) {
                    setMsgId(roomEditInfo.getMsgId());
                }
                if (roomEditInfo.hasName()) {
                    setName(roomEditInfo.getName());
                }
                if (roomEditInfo.hasDesc()) {
                    setDesc(roomEditInfo.getDesc());
                }
                if (roomEditInfo.hasLocalTime()) {
                    setLocalTime(roomEditInfo.getLocalTime());
                }
                if (roomEditInfo.hasTmServerSide()) {
                    setTmServerSide(roomEditInfo.getTmServerSide());
                }
                if (roomEditInfo.hasPrevMsgTime()) {
                    setPrevMsgTime(roomEditInfo.getPrevMsgTime());
                }
                if (roomEditInfo.hasRoomOption()) {
                    setRoomOption(roomEditInfo.getRoomOption());
                }
                if (roomEditInfo.hasNameModified()) {
                    setNameModified(roomEditInfo.getNameModified());
                }
                if (roomEditInfo.hasOptionModified()) {
                    setOptionModified(roomEditInfo.getOptionModified());
                }
                if (roomEditInfo.hasDescAction()) {
                    setDescAction(roomEditInfo.getDescAction());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasActionOwner() && hasActionOwnerName() && hasGroupId() && hasMsgId() && hasName() && hasDesc() && hasLocalTime() && hasTmServerSide() && hasPrevMsgTime() && hasRoomOption() && hasNameModified() && hasOptionModified() && hasDescAction()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            this.bitField0_ |= 1;
                            this.actionOwner_ = codedInputStream.readBytes();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.actionOwnerName_ = codedInputStream.readBytes();
                            break;
                        case 26:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readBytes();
                            break;
                        case 34:
                            this.bitField0_ |= 8;
                            this.msgId_ = codedInputStream.readBytes();
                            break;
                        case 42:
                            this.bitField0_ |= 16;
                            this.name_ = codedInputStream.readBytes();
                            break;
                        case 50:
                            this.bitField0_ |= 32;
                            this.desc_ = codedInputStream.readBytes();
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.localTime_ = codedInputStream.readInt64();
                            break;
                        case 64:
                            this.bitField0_ |= 128;
                            this.tmServerSide_ = codedInputStream.readInt64();
                            break;
                        case 72:
                            this.bitField0_ |= 256;
                            this.prevMsgTime_ = codedInputStream.readInt64();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.roomOption_ = codedInputStream.readInt32();
                            break;
                        case 88:
                            this.bitField0_ |= 1024;
                            this.nameModified_ = codedInputStream.readBool();
                            break;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.optionModified_ = codedInputStream.readBool();
                            break;
                        case 104:
                            this.bitField0_ |= 4096;
                            this.descAction_ = codedInputStream.readInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasActionOwner() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getActionOwner() {
                Object obj = this.actionOwner_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.actionOwner_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setActionOwner(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.actionOwner_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearActionOwner() {
                this.bitField0_ &= -2;
                this.actionOwner_ = RoomEditInfo.getDefaultInstance().getActionOwner();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setActionOwner(ByteString byteString) {
                this.bitField0_ |= 1;
                this.actionOwner_ = byteString;
            }

            public boolean hasActionOwnerName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getActionOwnerName() {
                Object obj = this.actionOwnerName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.actionOwnerName_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setActionOwnerName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.actionOwnerName_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearActionOwnerName() {
                this.bitField0_ &= -3;
                this.actionOwnerName_ = RoomEditInfo.getDefaultInstance().getActionOwnerName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setActionOwnerName(ByteString byteString) {
                this.bitField0_ |= 2;
                this.actionOwnerName_ = byteString;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getGroupId() {
                Object obj = this.groupId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.groupId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setGroupId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.groupId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = RoomEditInfo.getDefaultInstance().getGroupId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setGroupId(ByteString byteString) {
                this.bitField0_ |= 4;
                this.groupId_ = byteString;
            }

            public boolean hasMsgId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getMsgId() {
                Object obj = this.msgId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.msgId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMsgId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.msgId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMsgId() {
                this.bitField0_ &= -9;
                this.msgId_ = RoomEditInfo.getDefaultInstance().getMsgId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMsgId(ByteString byteString) {
                this.bitField0_ |= 8;
                this.msgId_ = byteString;
            }

            public boolean hasName() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.name_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearName() {
                this.bitField0_ &= -17;
                this.name_ = RoomEditInfo.getDefaultInstance().getName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setName(ByteString byteString) {
                this.bitField0_ |= 16;
                this.name_ = byteString;
            }

            public boolean hasDesc() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getDesc() {
                Object obj = this.desc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.desc_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.desc_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearDesc() {
                this.bitField0_ &= -33;
                this.desc_ = RoomEditInfo.getDefaultInstance().getDesc();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setDesc(ByteString byteString) {
                this.bitField0_ |= 32;
                this.desc_ = byteString;
            }

            public boolean hasLocalTime() {
                return (this.bitField0_ & 64) == 64;
            }

            public long getLocalTime() {
                return this.localTime_;
            }

            public Builder setLocalTime(long j) {
                this.bitField0_ |= 64;
                this.localTime_ = j;
                return this;
            }

            public Builder clearLocalTime() {
                this.bitField0_ &= -65;
                this.localTime_ = 0;
                return this;
            }

            public boolean hasTmServerSide() {
                return (this.bitField0_ & 128) == 128;
            }

            public long getTmServerSide() {
                return this.tmServerSide_;
            }

            public Builder setTmServerSide(long j) {
                this.bitField0_ |= 128;
                this.tmServerSide_ = j;
                return this;
            }

            public Builder clearTmServerSide() {
                this.bitField0_ &= -129;
                this.tmServerSide_ = 0;
                return this;
            }

            public boolean hasPrevMsgTime() {
                return (this.bitField0_ & 256) == 256;
            }

            public long getPrevMsgTime() {
                return this.prevMsgTime_;
            }

            public Builder setPrevMsgTime(long j) {
                this.bitField0_ |= 256;
                this.prevMsgTime_ = j;
                return this;
            }

            public Builder clearPrevMsgTime() {
                this.bitField0_ &= -257;
                this.prevMsgTime_ = 0;
                return this;
            }

            public boolean hasRoomOption() {
                return (this.bitField0_ & 512) == 512;
            }

            public int getRoomOption() {
                return this.roomOption_;
            }

            public Builder setRoomOption(int i) {
                this.bitField0_ |= 512;
                this.roomOption_ = i;
                return this;
            }

            public Builder clearRoomOption() {
                this.bitField0_ &= -513;
                this.roomOption_ = 0;
                return this;
            }

            public boolean hasNameModified() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public boolean getNameModified() {
                return this.nameModified_;
            }

            public Builder setNameModified(boolean z) {
                this.bitField0_ |= 1024;
                this.nameModified_ = z;
                return this;
            }

            public Builder clearNameModified() {
                this.bitField0_ &= -1025;
                this.nameModified_ = false;
                return this;
            }

            public boolean hasOptionModified() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public boolean getOptionModified() {
                return this.optionModified_;
            }

            public Builder setOptionModified(boolean z) {
                this.bitField0_ |= 2048;
                this.optionModified_ = z;
                return this;
            }

            public Builder clearOptionModified() {
                this.bitField0_ &= -2049;
                this.optionModified_ = false;
                return this;
            }

            public boolean hasDescAction() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public int getDescAction() {
                return this.descAction_;
            }

            public Builder setDescAction(int i) {
                this.bitField0_ |= 4096;
                this.descAction_ = i;
                return this;
            }

            public Builder clearDescAction() {
                this.bitField0_ &= -4097;
                this.descAction_ = 0;
                return this;
            }
        }

        private RoomEditInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private RoomEditInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static RoomEditInfo getDefaultInstance() {
            return defaultInstance;
        }

        public RoomEditInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasActionOwner() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getActionOwner() {
            Object obj = this.actionOwner_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.actionOwner_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getActionOwnerBytes() {
            Object obj = this.actionOwner_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.actionOwner_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasActionOwnerName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getActionOwnerName() {
            Object obj = this.actionOwnerName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.actionOwnerName_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getActionOwnerNameBytes() {
            Object obj = this.actionOwnerName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.actionOwnerName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getGroupId() {
            Object obj = this.groupId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.groupId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getGroupIdBytes() {
            Object obj = this.groupId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMsgId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getMsgId() {
            Object obj = this.msgId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.msgId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMsgIdBytes() {
            Object obj = this.msgId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.msgId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasName() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasDesc() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getDesc() {
            Object obj = this.desc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.desc_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getDescBytes() {
            Object obj = this.desc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.desc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasLocalTime() {
            return (this.bitField0_ & 64) == 64;
        }

        public long getLocalTime() {
            return this.localTime_;
        }

        public boolean hasTmServerSide() {
            return (this.bitField0_ & 128) == 128;
        }

        public long getTmServerSide() {
            return this.tmServerSide_;
        }

        public boolean hasPrevMsgTime() {
            return (this.bitField0_ & 256) == 256;
        }

        public long getPrevMsgTime() {
            return this.prevMsgTime_;
        }

        public boolean hasRoomOption() {
            return (this.bitField0_ & 512) == 512;
        }

        public int getRoomOption() {
            return this.roomOption_;
        }

        public boolean hasNameModified() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public boolean getNameModified() {
            return this.nameModified_;
        }

        public boolean hasOptionModified() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public boolean getOptionModified() {
            return this.optionModified_;
        }

        public boolean hasDescAction() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public int getDescAction() {
            return this.descAction_;
        }

        private void initFields() {
            this.actionOwner_ = "";
            this.actionOwnerName_ = "";
            this.groupId_ = "";
            this.msgId_ = "";
            this.name_ = "";
            this.desc_ = "";
            this.localTime_ = 0;
            this.tmServerSide_ = 0;
            this.prevMsgTime_ = 0;
            this.roomOption_ = 0;
            this.nameModified_ = false;
            this.optionModified_ = false;
            this.descAction_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasActionOwner()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasActionOwnerName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMsgId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDesc()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLocalTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasTmServerSide()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPrevMsgTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasRoomOption()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNameModified()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasOptionModified()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDescAction()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getActionOwnerBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getActionOwnerNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getGroupIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getMsgIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getDescBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt64(7, this.localTime_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeInt64(8, this.tmServerSide_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeInt64(9, this.prevMsgTime_);
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeInt32(10, this.roomOption_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBool(11, this.nameModified_);
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeBool(12, this.optionModified_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeInt32(13, this.descAction_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getActionOwnerBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getActionOwnerNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getGroupIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getMsgIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getDescBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeInt64Size(7, this.localTime_);
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeInt64Size(8, this.tmServerSide_);
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeInt64Size(9, this.prevMsgTime_);
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeInt32Size(10, this.roomOption_);
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBoolSize(11, this.nameModified_);
            }
            if ((this.bitField0_ & 2048) == 2048) {
                i2 += CodedOutputStream.computeBoolSize(12, this.optionModified_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                i2 += CodedOutputStream.computeInt32Size(13, this.descAction_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RoomEditInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static RoomEditInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static RoomEditInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static RoomEditInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static RoomEditInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static RoomEditInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static RoomEditInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RoomEditInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static RoomEditInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static RoomEditInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RoomEditInfo roomEditInfo) {
            return newBuilder().mergeFrom(roomEditInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface RoomEditInfoOrBuilder extends MessageLiteOrBuilder {
        String getActionOwner();

        String getActionOwnerName();

        String getDesc();

        int getDescAction();

        String getGroupId();

        long getLocalTime();

        String getMsgId();

        String getName();

        boolean getNameModified();

        boolean getOptionModified();

        long getPrevMsgTime();

        int getRoomOption();

        long getTmServerSide();

        boolean hasActionOwner();

        boolean hasActionOwnerName();

        boolean hasDesc();

        boolean hasDescAction();

        boolean hasGroupId();

        boolean hasLocalTime();

        boolean hasMsgId();

        boolean hasName();

        boolean hasNameModified();

        boolean hasOptionModified();

        boolean hasPrevMsgTime();

        boolean hasRoomOption();

        boolean hasTmServerSide();
    }

    public static final class SelectItem extends GeneratedMessageLite implements SelectItemOrBuilder {
        public static final int TEXT_FIELD_NUMBER = 1;
        public static final int VALUE_FIELD_NUMBER = 2;
        private static final SelectItem defaultInstance = new SelectItem(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object text_;
        /* access modifiers changed from: private */
        public Object value_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<SelectItem, Builder> implements SelectItemOrBuilder {
            private int bitField0_;
            private Object text_ = "";
            private Object value_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.text_ = "";
                this.bitField0_ &= -2;
                this.value_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public SelectItem getDefaultInstanceForType() {
                return SelectItem.getDefaultInstance();
            }

            public SelectItem build() {
                SelectItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public SelectItem buildParsed() throws InvalidProtocolBufferException {
                SelectItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public SelectItem buildPartial() {
                SelectItem selectItem = new SelectItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                selectItem.text_ = this.text_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                selectItem.value_ = this.value_;
                selectItem.bitField0_ = i2;
                return selectItem;
            }

            public Builder mergeFrom(SelectItem selectItem) {
                if (selectItem == SelectItem.getDefaultInstance()) {
                    return this;
                }
                if (selectItem.hasText()) {
                    setText(selectItem.getText());
                }
                if (selectItem.hasValue()) {
                    setValue(selectItem.getValue());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasText() && hasValue()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.text_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.value_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasText() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getText() {
                Object obj = this.text_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.text_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setText(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.text_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearText() {
                this.bitField0_ &= -2;
                this.text_ = SelectItem.getDefaultInstance().getText();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setText(ByteString byteString) {
                this.bitField0_ |= 1;
                this.text_ = byteString;
            }

            public boolean hasValue() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getValue() {
                Object obj = this.value_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.value_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setValue(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.value_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearValue() {
                this.bitField0_ &= -3;
                this.value_ = SelectItem.getDefaultInstance().getValue();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setValue(ByteString byteString) {
                this.bitField0_ |= 2;
                this.value_ = byteString;
            }
        }

        private SelectItem(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private SelectItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static SelectItem getDefaultInstance() {
            return defaultInstance;
        }

        public SelectItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasText() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getText() {
            Object obj = this.text_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.text_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getTextBytes() {
            Object obj = this.text_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.text_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasValue() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getValue() {
            Object obj = this.value_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.value_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getValueBytes() {
            Object obj = this.value_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.value_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.text_ = "";
            this.value_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasText()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasValue()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getTextBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getValueBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getTextBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getValueBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SelectItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static SelectItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static SelectItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static SelectItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static SelectItem parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static SelectItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static SelectItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SelectItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SelectItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static SelectItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SelectItem selectItem) {
            return newBuilder().mergeFrom(selectItem);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface SelectItemOrBuilder extends MessageLiteOrBuilder {
        String getText();

        String getValue();

        boolean hasText();

        boolean hasValue();
    }

    public static final class SelectParam extends GeneratedMessageLite implements SelectParamOrBuilder {
        public static final int EVENT_ID_FIELD_NUMBER = 3;
        public static final int MESSAGE_ID_FIELD_NUMBER = 2;
        public static final int REQ_ID_FIELD_NUMBER = 4;
        public static final int SELECTEDITEMS_FIELD_NUMBER = 5;
        public static final int SESSION_ID_FIELD_NUMBER = 1;
        private static final SelectParam defaultInstance = new SelectParam(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object eventId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object messageId_;
        /* access modifiers changed from: private */
        public Object reqId_;
        /* access modifiers changed from: private */
        public List<SelectItem> selectedItems_;
        /* access modifiers changed from: private */
        public Object sessionId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<SelectParam, Builder> implements SelectParamOrBuilder {
            private int bitField0_;
            private Object eventId_ = "";
            private Object messageId_ = "";
            private Object reqId_ = "";
            private List<SelectItem> selectedItems_ = Collections.emptyList();
            private Object sessionId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.messageId_ = "";
                this.bitField0_ &= -3;
                this.eventId_ = "";
                this.bitField0_ &= -5;
                this.reqId_ = "";
                this.bitField0_ &= -9;
                this.selectedItems_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public SelectParam getDefaultInstanceForType() {
                return SelectParam.getDefaultInstance();
            }

            public SelectParam build() {
                SelectParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public SelectParam buildParsed() throws InvalidProtocolBufferException {
                SelectParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public SelectParam buildPartial() {
                SelectParam selectParam = new SelectParam(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                selectParam.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                selectParam.messageId_ = this.messageId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                selectParam.eventId_ = this.eventId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                selectParam.reqId_ = this.reqId_;
                if ((this.bitField0_ & 16) == 16) {
                    this.selectedItems_ = Collections.unmodifiableList(this.selectedItems_);
                    this.bitField0_ &= -17;
                }
                selectParam.selectedItems_ = this.selectedItems_;
                selectParam.bitField0_ = i2;
                return selectParam;
            }

            public Builder mergeFrom(SelectParam selectParam) {
                if (selectParam == SelectParam.getDefaultInstance()) {
                    return this;
                }
                if (selectParam.hasSessionId()) {
                    setSessionId(selectParam.getSessionId());
                }
                if (selectParam.hasMessageId()) {
                    setMessageId(selectParam.getMessageId());
                }
                if (selectParam.hasEventId()) {
                    setEventId(selectParam.getEventId());
                }
                if (selectParam.hasReqId()) {
                    setReqId(selectParam.getReqId());
                }
                if (!selectParam.selectedItems_.isEmpty()) {
                    if (this.selectedItems_.isEmpty()) {
                        this.selectedItems_ = selectParam.selectedItems_;
                        this.bitField0_ &= -17;
                    } else {
                        ensureSelectedItemsIsMutable();
                        this.selectedItems_.addAll(selectParam.selectedItems_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSessionId() || !hasMessageId() || !hasEventId()) {
                    return false;
                }
                for (int i = 0; i < getSelectedItemsCount(); i++) {
                    if (!getSelectedItems(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.sessionId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.messageId_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        this.bitField0_ |= 4;
                        this.eventId_ = codedInputStream.readBytes();
                    } else if (readTag == 34) {
                        this.bitField0_ |= 8;
                        this.reqId_ = codedInputStream.readBytes();
                    } else if (readTag == 42) {
                        Builder newBuilder = SelectItem.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addSelectedItems(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = SelectParam.getDefaultInstance().getSessionId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSessionId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.sessionId_ = byteString;
            }

            public boolean hasMessageId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getMessageId() {
                Object obj = this.messageId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.messageId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setMessageId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.messageId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearMessageId() {
                this.bitField0_ &= -3;
                this.messageId_ = SelectParam.getDefaultInstance().getMessageId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setMessageId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.messageId_ = byteString;
            }

            public boolean hasEventId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getEventId() {
                Object obj = this.eventId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.eventId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setEventId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.eventId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearEventId() {
                this.bitField0_ &= -5;
                this.eventId_ = SelectParam.getDefaultInstance().getEventId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setEventId(ByteString byteString) {
                this.bitField0_ |= 4;
                this.eventId_ = byteString;
            }

            public boolean hasReqId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getReqId() {
                Object obj = this.reqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.reqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.reqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReqId() {
                this.bitField0_ &= -9;
                this.reqId_ = SelectParam.getDefaultInstance().getReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReqId(ByteString byteString) {
                this.bitField0_ |= 8;
                this.reqId_ = byteString;
            }

            private void ensureSelectedItemsIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.selectedItems_ = new ArrayList(this.selectedItems_);
                    this.bitField0_ |= 16;
                }
            }

            public List<SelectItem> getSelectedItemsList() {
                return Collections.unmodifiableList(this.selectedItems_);
            }

            public int getSelectedItemsCount() {
                return this.selectedItems_.size();
            }

            public SelectItem getSelectedItems(int i) {
                return (SelectItem) this.selectedItems_.get(i);
            }

            public Builder setSelectedItems(int i, SelectItem selectItem) {
                if (selectItem != null) {
                    ensureSelectedItemsIsMutable();
                    this.selectedItems_.set(i, selectItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setSelectedItems(int i, Builder builder) {
                ensureSelectedItemsIsMutable();
                this.selectedItems_.set(i, builder.build());
                return this;
            }

            public Builder addSelectedItems(SelectItem selectItem) {
                if (selectItem != null) {
                    ensureSelectedItemsIsMutable();
                    this.selectedItems_.add(selectItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSelectedItems(int i, SelectItem selectItem) {
                if (selectItem != null) {
                    ensureSelectedItemsIsMutable();
                    this.selectedItems_.add(i, selectItem);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addSelectedItems(Builder builder) {
                ensureSelectedItemsIsMutable();
                this.selectedItems_.add(builder.build());
                return this;
            }

            public Builder addSelectedItems(int i, Builder builder) {
                ensureSelectedItemsIsMutable();
                this.selectedItems_.add(i, builder.build());
                return this;
            }

            public Builder addAllSelectedItems(Iterable<? extends SelectItem> iterable) {
                ensureSelectedItemsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.selectedItems_);
                return this;
            }

            public Builder clearSelectedItems() {
                this.selectedItems_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public Builder removeSelectedItems(int i) {
                ensureSelectedItemsIsMutable();
                this.selectedItems_.remove(i);
                return this;
            }
        }

        private SelectParam(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private SelectParam(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static SelectParam getDefaultInstance() {
            return defaultInstance;
        }

        public SelectParam getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasMessageId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getMessageId() {
            Object obj = this.messageId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.messageId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getMessageIdBytes() {
            Object obj = this.messageId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.messageId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasEventId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getEventId() {
            Object obj = this.eventId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.eventId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getEventIdBytes() {
            Object obj = this.eventId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.eventId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasReqId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getReqId() {
            Object obj = this.reqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.reqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqIdBytes() {
            Object obj = this.reqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<SelectItem> getSelectedItemsList() {
            return this.selectedItems_;
        }

        public List<? extends SelectItemOrBuilder> getSelectedItemsOrBuilderList() {
            return this.selectedItems_;
        }

        public int getSelectedItemsCount() {
            return this.selectedItems_.size();
        }

        public SelectItem getSelectedItems(int i) {
            return (SelectItem) this.selectedItems_.get(i);
        }

        public SelectItemOrBuilder getSelectedItemsOrBuilder(int i) {
            return (SelectItemOrBuilder) this.selectedItems_.get(i);
        }

        private void initFields() {
            this.sessionId_ = "";
            this.messageId_ = "";
            this.eventId_ = "";
            this.reqId_ = "";
            this.selectedItems_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMessageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEventId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getSelectedItemsCount(); i++) {
                    if (!getSelectedItems(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getReqIdBytes());
            }
            for (int i = 0; i < this.selectedItems_.size(); i++) {
                codedOutputStream.writeMessage(5, (MessageLite) this.selectedItems_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getSessionIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getMessageIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeBytesSize(3, getEventIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                computeBytesSize += CodedOutputStream.computeBytesSize(4, getReqIdBytes());
            }
            for (int i2 = 0; i2 < this.selectedItems_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(5, (MessageLite) this.selectedItems_.get(i2));
            }
            this.memoizedSerializedSize = computeBytesSize;
            return computeBytesSize;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SelectParam parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static SelectParam parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static SelectParam parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static SelectParam parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static SelectParam parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static SelectParam parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static SelectParam parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SelectParam parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SelectParam parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static SelectParam parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SelectParam selectParam) {
            return newBuilder().mergeFrom(selectParam);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface SelectParamOrBuilder extends MessageLiteOrBuilder {
        String getEventId();

        String getMessageId();

        String getReqId();

        SelectItem getSelectedItems(int i);

        int getSelectedItemsCount();

        List<SelectItem> getSelectedItemsList();

        String getSessionId();

        boolean hasEventId();

        boolean hasMessageId();

        boolean hasReqId();

        boolean hasSessionId();
    }

    public static final class SessionMessageInfo extends GeneratedMessageLite implements SessionMessageInfoOrBuilder {
        public static final int INFO_LIST_FIELD_NUMBER = 1;
        public static final int SESSION_FIELD_NUMBER = 2;
        private static final SessionMessageInfo defaultInstance = new SessionMessageInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public MessageInfoList infoList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object session_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<SessionMessageInfo, Builder> implements SessionMessageInfoOrBuilder {
            private int bitField0_;
            private MessageInfoList infoList_ = MessageInfoList.getDefaultInstance();
            private Object session_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.infoList_ = MessageInfoList.getDefaultInstance();
                this.bitField0_ &= -2;
                this.session_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public SessionMessageInfo getDefaultInstanceForType() {
                return SessionMessageInfo.getDefaultInstance();
            }

            public SessionMessageInfo build() {
                SessionMessageInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public SessionMessageInfo buildParsed() throws InvalidProtocolBufferException {
                SessionMessageInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public SessionMessageInfo buildPartial() {
                SessionMessageInfo sessionMessageInfo = new SessionMessageInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                sessionMessageInfo.infoList_ = this.infoList_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                sessionMessageInfo.session_ = this.session_;
                sessionMessageInfo.bitField0_ = i2;
                return sessionMessageInfo;
            }

            public Builder mergeFrom(SessionMessageInfo sessionMessageInfo) {
                if (sessionMessageInfo == SessionMessageInfo.getDefaultInstance()) {
                    return this;
                }
                if (sessionMessageInfo.hasInfoList()) {
                    mergeInfoList(sessionMessageInfo.getInfoList());
                }
                if (sessionMessageInfo.hasSession()) {
                    setSession(sessionMessageInfo.getSession());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasInfoList() && hasSession() && getInfoList().isInitialized()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = MessageInfoList.newBuilder();
                        if (hasInfoList()) {
                            newBuilder.mergeFrom(getInfoList());
                        }
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        setInfoList(newBuilder.buildPartial());
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.session_ = codedInputStream.readBytes();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasInfoList() {
                return (this.bitField0_ & 1) == 1;
            }

            public MessageInfoList getInfoList() {
                return this.infoList_;
            }

            public Builder setInfoList(MessageInfoList messageInfoList) {
                if (messageInfoList != null) {
                    this.infoList_ = messageInfoList;
                    this.bitField0_ |= 1;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setInfoList(Builder builder) {
                this.infoList_ = builder.build();
                this.bitField0_ |= 1;
                return this;
            }

            public Builder mergeInfoList(MessageInfoList messageInfoList) {
                if ((this.bitField0_ & 1) != 1 || this.infoList_ == MessageInfoList.getDefaultInstance()) {
                    this.infoList_ = messageInfoList;
                } else {
                    this.infoList_ = MessageInfoList.newBuilder(this.infoList_).mergeFrom(messageInfoList).buildPartial();
                }
                this.bitField0_ |= 1;
                return this;
            }

            public Builder clearInfoList() {
                this.infoList_ = MessageInfoList.getDefaultInstance();
                this.bitField0_ &= -2;
                return this;
            }

            public boolean hasSession() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getSession() {
                Object obj = this.session_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.session_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setSession(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.session_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearSession() {
                this.bitField0_ &= -3;
                this.session_ = SessionMessageInfo.getDefaultInstance().getSession();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setSession(ByteString byteString) {
                this.bitField0_ |= 2;
                this.session_ = byteString;
            }
        }

        private SessionMessageInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private SessionMessageInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static SessionMessageInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SessionMessageInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasInfoList() {
            return (this.bitField0_ & 1) == 1;
        }

        public MessageInfoList getInfoList() {
            return this.infoList_;
        }

        public boolean hasSession() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getSession() {
            Object obj = this.session_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.session_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getSessionBytes() {
            Object obj = this.session_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.session_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.infoList_ = MessageInfoList.getDefaultInstance();
            this.session_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasInfoList()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSession()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!getInfoList().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeMessage(1, this.infoList_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSessionBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeMessageSize(1, this.infoList_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSessionBytes());
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SessionMessageInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static SessionMessageInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static SessionMessageInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static SessionMessageInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static SessionMessageInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static SessionMessageInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static SessionMessageInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SessionMessageInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SessionMessageInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static SessionMessageInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SessionMessageInfo sessionMessageInfo) {
            return newBuilder().mergeFrom(sessionMessageInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public static final class SessionMessageInfoMap extends GeneratedMessageLite implements SessionMessageInfoMapOrBuilder {
        public static final int INFOS_FIELD_NUMBER = 1;
        private static final SessionMessageInfoMap defaultInstance = new SessionMessageInfoMap(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public List<SessionMessageInfo> infos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<SessionMessageInfoMap, Builder> implements SessionMessageInfoMapOrBuilder {
            private int bitField0_;
            private List<SessionMessageInfo> infos_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.infos_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public SessionMessageInfoMap getDefaultInstanceForType() {
                return SessionMessageInfoMap.getDefaultInstance();
            }

            public SessionMessageInfoMap build() {
                SessionMessageInfoMap buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public SessionMessageInfoMap buildParsed() throws InvalidProtocolBufferException {
                SessionMessageInfoMap buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public SessionMessageInfoMap buildPartial() {
                SessionMessageInfoMap sessionMessageInfoMap = new SessionMessageInfoMap(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.infos_ = Collections.unmodifiableList(this.infos_);
                    this.bitField0_ &= -2;
                }
                sessionMessageInfoMap.infos_ = this.infos_;
                return sessionMessageInfoMap;
            }

            public Builder mergeFrom(SessionMessageInfoMap sessionMessageInfoMap) {
                if (sessionMessageInfoMap != SessionMessageInfoMap.getDefaultInstance() && !sessionMessageInfoMap.infos_.isEmpty()) {
                    if (this.infos_.isEmpty()) {
                        this.infos_ = sessionMessageInfoMap.infos_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureInfosIsMutable();
                        this.infos_.addAll(sessionMessageInfoMap.infos_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getInfosCount(); i++) {
                    if (!getInfos(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = SessionMessageInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addInfos(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureInfosIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.infos_ = new ArrayList(this.infos_);
                    this.bitField0_ |= 1;
                }
            }

            public List<SessionMessageInfo> getInfosList() {
                return Collections.unmodifiableList(this.infos_);
            }

            public int getInfosCount() {
                return this.infos_.size();
            }

            public SessionMessageInfo getInfos(int i) {
                return (SessionMessageInfo) this.infos_.get(i);
            }

            public Builder setInfos(int i, SessionMessageInfo sessionMessageInfo) {
                if (sessionMessageInfo != null) {
                    ensureInfosIsMutable();
                    this.infos_.set(i, sessionMessageInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setInfos(int i, Builder builder) {
                ensureInfosIsMutable();
                this.infos_.set(i, builder.build());
                return this;
            }

            public Builder addInfos(SessionMessageInfo sessionMessageInfo) {
                if (sessionMessageInfo != null) {
                    ensureInfosIsMutable();
                    this.infos_.add(sessionMessageInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addInfos(int i, SessionMessageInfo sessionMessageInfo) {
                if (sessionMessageInfo != null) {
                    ensureInfosIsMutable();
                    this.infos_.add(i, sessionMessageInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addInfos(Builder builder) {
                ensureInfosIsMutable();
                this.infos_.add(builder.build());
                return this;
            }

            public Builder addInfos(int i, Builder builder) {
                ensureInfosIsMutable();
                this.infos_.add(i, builder.build());
                return this;
            }

            public Builder addAllInfos(Iterable<? extends SessionMessageInfo> iterable) {
                ensureInfosIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.infos_);
                return this;
            }

            public Builder clearInfos() {
                this.infos_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeInfos(int i) {
                ensureInfosIsMutable();
                this.infos_.remove(i);
                return this;
            }
        }

        private SessionMessageInfoMap(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private SessionMessageInfoMap(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static SessionMessageInfoMap getDefaultInstance() {
            return defaultInstance;
        }

        public SessionMessageInfoMap getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<SessionMessageInfo> getInfosList() {
            return this.infos_;
        }

        public List<? extends SessionMessageInfoOrBuilder> getInfosOrBuilderList() {
            return this.infos_;
        }

        public int getInfosCount() {
            return this.infos_.size();
        }

        public SessionMessageInfo getInfos(int i) {
            return (SessionMessageInfo) this.infos_.get(i);
        }

        public SessionMessageInfoOrBuilder getInfosOrBuilder(int i) {
            return (SessionMessageInfoOrBuilder) this.infos_.get(i);
        }

        private void initFields() {
            this.infos_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getInfosCount(); i++) {
                if (!getInfos(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.infos_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.infos_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.infos_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.infos_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SessionMessageInfoMap parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static SessionMessageInfoMap parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static SessionMessageInfoMap parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static SessionMessageInfoMap parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static SessionMessageInfoMap parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static SessionMessageInfoMap parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static SessionMessageInfoMap parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SessionMessageInfoMap parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SessionMessageInfoMap parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static SessionMessageInfoMap parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SessionMessageInfoMap sessionMessageInfoMap) {
            return newBuilder().mergeFrom(sessionMessageInfoMap);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface SessionMessageInfoMapOrBuilder extends MessageLiteOrBuilder {
        SessionMessageInfo getInfos(int i);

        int getInfosCount();

        List<SessionMessageInfo> getInfosList();
    }

    public interface SessionMessageInfoOrBuilder extends MessageLiteOrBuilder {
        MessageInfoList getInfoList();

        String getSession();

        boolean hasInfoList();

        boolean hasSession();
    }

    public static final class StarredGuidInfo extends GeneratedMessageLite implements StarredGuidInfoOrBuilder {
        public static final int KEY_FIELD_NUMBER = 1;
        public static final int VALUE_FIELD_NUMBER = 2;
        private static final StarredGuidInfo defaultInstance = new StarredGuidInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object key_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public LazyStringList value_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<StarredGuidInfo, Builder> implements StarredGuidInfoOrBuilder {
            private int bitField0_;
            private Object key_ = "";
            private LazyStringList value_ = LazyStringArrayList.EMPTY;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.key_ = "";
                this.bitField0_ &= -2;
                this.value_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public StarredGuidInfo getDefaultInstanceForType() {
                return StarredGuidInfo.getDefaultInstance();
            }

            public StarredGuidInfo build() {
                StarredGuidInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public StarredGuidInfo buildParsed() throws InvalidProtocolBufferException {
                StarredGuidInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public StarredGuidInfo buildPartial() {
                StarredGuidInfo starredGuidInfo = new StarredGuidInfo(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                starredGuidInfo.key_ = this.key_;
                if ((this.bitField0_ & 2) == 2) {
                    this.value_ = new UnmodifiableLazyStringList(this.value_);
                    this.bitField0_ &= -3;
                }
                starredGuidInfo.value_ = this.value_;
                starredGuidInfo.bitField0_ = i;
                return starredGuidInfo;
            }

            public Builder mergeFrom(StarredGuidInfo starredGuidInfo) {
                if (starredGuidInfo == StarredGuidInfo.getDefaultInstance()) {
                    return this;
                }
                if (starredGuidInfo.hasKey()) {
                    setKey(starredGuidInfo.getKey());
                }
                if (!starredGuidInfo.value_.isEmpty()) {
                    if (this.value_.isEmpty()) {
                        this.value_ = starredGuidInfo.value_;
                        this.bitField0_ &= -3;
                    } else {
                        ensureValueIsMutable();
                        this.value_.addAll(starredGuidInfo.value_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                return hasKey();
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.key_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        ensureValueIsMutable();
                        this.value_.add(codedInputStream.readBytes());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasKey() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getKey() {
                Object obj = this.key_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.key_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setKey(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.key_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearKey() {
                this.bitField0_ &= -2;
                this.key_ = StarredGuidInfo.getDefaultInstance().getKey();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setKey(ByteString byteString) {
                this.bitField0_ |= 1;
                this.key_ = byteString;
            }

            private void ensureValueIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.value_ = new LazyStringArrayList(this.value_);
                    this.bitField0_ |= 2;
                }
            }

            public List<String> getValueList() {
                return Collections.unmodifiableList(this.value_);
            }

            public int getValueCount() {
                return this.value_.size();
            }

            public String getValue(int i) {
                return (String) this.value_.get(i);
            }

            public Builder setValue(int i, String str) {
                if (str != null) {
                    ensureValueIsMutable();
                    this.value_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addValue(String str) {
                if (str != null) {
                    ensureValueIsMutable();
                    this.value_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllValue(Iterable<String> iterable) {
                ensureValueIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.value_);
                return this;
            }

            public Builder clearValue() {
                this.value_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -3;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addValue(ByteString byteString) {
                ensureValueIsMutable();
                this.value_.add(byteString);
            }
        }

        private StarredGuidInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private StarredGuidInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static StarredGuidInfo getDefaultInstance() {
            return defaultInstance;
        }

        public StarredGuidInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasKey() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getKey() {
            Object obj = this.key_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.key_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getKeyBytes() {
            Object obj = this.key_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.key_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<String> getValueList() {
            return this.value_;
        }

        public int getValueCount() {
            return this.value_.size();
        }

        public String getValue(int i) {
            return (String) this.value_.get(i);
        }

        private void initFields() {
            this.key_ = "";
            this.value_ = LazyStringArrayList.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            } else if (!hasKey()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getKeyBytes());
            }
            for (int i = 0; i < this.value_.size(); i++) {
                codedOutputStream.writeBytes(2, this.value_.getByteString(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getKeyBytes()) + 0 : 0;
            int i2 = 0;
            for (int i3 = 0; i3 < this.value_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.value_.getByteString(i3));
            }
            int size = computeBytesSize + i2 + (getValueList().size() * 1);
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static StarredGuidInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static StarredGuidInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static StarredGuidInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static StarredGuidInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static StarredGuidInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static StarredGuidInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static StarredGuidInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StarredGuidInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StarredGuidInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static StarredGuidInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(StarredGuidInfo starredGuidInfo) {
            return newBuilder().mergeFrom(starredGuidInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface StarredGuidInfoOrBuilder extends MessageLiteOrBuilder {
        String getKey();

        String getValue(int i);

        int getValueCount();

        List<String> getValueList();

        boolean hasKey();
    }

    public static final class StarredGuidList extends GeneratedMessageLite implements StarredGuidListOrBuilder {
        public static final int STARREDGUIDINFO_FIELD_NUMBER = 1;
        private static final StarredGuidList defaultInstance = new StarredGuidList(true);
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<StarredGuidInfo> starredGuidInfo_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<StarredGuidList, Builder> implements StarredGuidListOrBuilder {
            private int bitField0_;
            private List<StarredGuidInfo> starredGuidInfo_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.starredGuidInfo_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public StarredGuidList getDefaultInstanceForType() {
                return StarredGuidList.getDefaultInstance();
            }

            public StarredGuidList build() {
                StarredGuidList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public StarredGuidList buildParsed() throws InvalidProtocolBufferException {
                StarredGuidList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public StarredGuidList buildPartial() {
                StarredGuidList starredGuidList = new StarredGuidList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.starredGuidInfo_ = Collections.unmodifiableList(this.starredGuidInfo_);
                    this.bitField0_ &= -2;
                }
                starredGuidList.starredGuidInfo_ = this.starredGuidInfo_;
                return starredGuidList;
            }

            public Builder mergeFrom(StarredGuidList starredGuidList) {
                if (starredGuidList != StarredGuidList.getDefaultInstance() && !starredGuidList.starredGuidInfo_.isEmpty()) {
                    if (this.starredGuidInfo_.isEmpty()) {
                        this.starredGuidInfo_ = starredGuidList.starredGuidInfo_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureStarredGuidInfoIsMutable();
                        this.starredGuidInfo_.addAll(starredGuidList.starredGuidInfo_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getStarredGuidInfoCount(); i++) {
                    if (!getStarredGuidInfo(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = StarredGuidInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addStarredGuidInfo(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureStarredGuidInfoIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.starredGuidInfo_ = new ArrayList(this.starredGuidInfo_);
                    this.bitField0_ |= 1;
                }
            }

            public List<StarredGuidInfo> getStarredGuidInfoList() {
                return Collections.unmodifiableList(this.starredGuidInfo_);
            }

            public int getStarredGuidInfoCount() {
                return this.starredGuidInfo_.size();
            }

            public StarredGuidInfo getStarredGuidInfo(int i) {
                return (StarredGuidInfo) this.starredGuidInfo_.get(i);
            }

            public Builder setStarredGuidInfo(int i, StarredGuidInfo starredGuidInfo) {
                if (starredGuidInfo != null) {
                    ensureStarredGuidInfoIsMutable();
                    this.starredGuidInfo_.set(i, starredGuidInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setStarredGuidInfo(int i, Builder builder) {
                ensureStarredGuidInfoIsMutable();
                this.starredGuidInfo_.set(i, builder.build());
                return this;
            }

            public Builder addStarredGuidInfo(StarredGuidInfo starredGuidInfo) {
                if (starredGuidInfo != null) {
                    ensureStarredGuidInfoIsMutable();
                    this.starredGuidInfo_.add(starredGuidInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addStarredGuidInfo(int i, StarredGuidInfo starredGuidInfo) {
                if (starredGuidInfo != null) {
                    ensureStarredGuidInfoIsMutable();
                    this.starredGuidInfo_.add(i, starredGuidInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addStarredGuidInfo(Builder builder) {
                ensureStarredGuidInfoIsMutable();
                this.starredGuidInfo_.add(builder.build());
                return this;
            }

            public Builder addStarredGuidInfo(int i, Builder builder) {
                ensureStarredGuidInfoIsMutable();
                this.starredGuidInfo_.add(i, builder.build());
                return this;
            }

            public Builder addAllStarredGuidInfo(Iterable<? extends StarredGuidInfo> iterable) {
                ensureStarredGuidInfoIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.starredGuidInfo_);
                return this;
            }

            public Builder clearStarredGuidInfo() {
                this.starredGuidInfo_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeStarredGuidInfo(int i) {
                ensureStarredGuidInfoIsMutable();
                this.starredGuidInfo_.remove(i);
                return this;
            }
        }

        private StarredGuidList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private StarredGuidList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static StarredGuidList getDefaultInstance() {
            return defaultInstance;
        }

        public StarredGuidList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<StarredGuidInfo> getStarredGuidInfoList() {
            return this.starredGuidInfo_;
        }

        public List<? extends StarredGuidInfoOrBuilder> getStarredGuidInfoOrBuilderList() {
            return this.starredGuidInfo_;
        }

        public int getStarredGuidInfoCount() {
            return this.starredGuidInfo_.size();
        }

        public StarredGuidInfo getStarredGuidInfo(int i) {
            return (StarredGuidInfo) this.starredGuidInfo_.get(i);
        }

        public StarredGuidInfoOrBuilder getStarredGuidInfoOrBuilder(int i) {
            return (StarredGuidInfoOrBuilder) this.starredGuidInfo_.get(i);
        }

        private void initFields() {
            this.starredGuidInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getStarredGuidInfoCount(); i++) {
                if (!getStarredGuidInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.starredGuidInfo_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.starredGuidInfo_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.starredGuidInfo_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.starredGuidInfo_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static StarredGuidList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static StarredGuidList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static StarredGuidList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static StarredGuidList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static StarredGuidList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static StarredGuidList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static StarredGuidList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StarredGuidList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StarredGuidList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static StarredGuidList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(StarredGuidList starredGuidList) {
            return newBuilder().mergeFrom(starredGuidList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface StarredGuidListOrBuilder extends MessageLiteOrBuilder {
        StarredGuidInfo getStarredGuidInfo(int i);

        int getStarredGuidInfoCount();

        List<StarredGuidInfo> getStarredGuidInfoList();
    }

    public static final class StickerInfo extends GeneratedMessageLite implements StickerInfoOrBuilder {
        public static final int FILE_ID_FIELD_NUMBER = 1;
        public static final int STATUS_FIELD_NUMBER = 3;
        public static final int UPLOADINGPATH_FIELD_NUMBER = 2;
        private static final StickerInfo defaultInstance = new StickerInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object fileId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int status_;
        /* access modifiers changed from: private */
        public Object uploadingPath_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<StickerInfo, Builder> implements StickerInfoOrBuilder {
            private int bitField0_;
            private Object fileId_ = "";
            private int status_;
            private Object uploadingPath_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.fileId_ = "";
                this.bitField0_ &= -2;
                this.uploadingPath_ = "";
                this.bitField0_ &= -3;
                this.status_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public StickerInfo getDefaultInstanceForType() {
                return StickerInfo.getDefaultInstance();
            }

            public StickerInfo build() {
                StickerInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public StickerInfo buildParsed() throws InvalidProtocolBufferException {
                StickerInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public StickerInfo buildPartial() {
                StickerInfo stickerInfo = new StickerInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                stickerInfo.fileId_ = this.fileId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                stickerInfo.uploadingPath_ = this.uploadingPath_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                stickerInfo.status_ = this.status_;
                stickerInfo.bitField0_ = i2;
                return stickerInfo;
            }

            public Builder mergeFrom(StickerInfo stickerInfo) {
                if (stickerInfo == StickerInfo.getDefaultInstance()) {
                    return this;
                }
                if (stickerInfo.hasFileId()) {
                    setFileId(stickerInfo.getFileId());
                }
                if (stickerInfo.hasUploadingPath()) {
                    setUploadingPath(stickerInfo.getUploadingPath());
                }
                if (stickerInfo.hasStatus()) {
                    setStatus(stickerInfo.getStatus());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasFileId() && hasStatus()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.fileId_ = codedInputStream.readBytes();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.uploadingPath_ = codedInputStream.readBytes();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.status_ = codedInputStream.readInt32();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasFileId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getFileId() {
                Object obj = this.fileId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fileId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setFileId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.fileId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearFileId() {
                this.bitField0_ &= -2;
                this.fileId_ = StickerInfo.getDefaultInstance().getFileId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setFileId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.fileId_ = byteString;
            }

            public boolean hasUploadingPath() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getUploadingPath() {
                Object obj = this.uploadingPath_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.uploadingPath_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setUploadingPath(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.uploadingPath_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearUploadingPath() {
                this.bitField0_ &= -3;
                this.uploadingPath_ = StickerInfo.getDefaultInstance().getUploadingPath();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setUploadingPath(ByteString byteString) {
                this.bitField0_ |= 2;
                this.uploadingPath_ = byteString;
            }

            public boolean hasStatus() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getStatus() {
                return this.status_;
            }

            public Builder setStatus(int i) {
                this.bitField0_ |= 4;
                this.status_ = i;
                return this;
            }

            public Builder clearStatus() {
                this.bitField0_ &= -5;
                this.status_ = 0;
                return this;
            }
        }

        private StickerInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private StickerInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static StickerInfo getDefaultInstance() {
            return defaultInstance;
        }

        public StickerInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasFileId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getFileId() {
            Object obj = this.fileId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.fileId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getFileIdBytes() {
            Object obj = this.fileId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fileId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUploadingPath() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getUploadingPath() {
            Object obj = this.uploadingPath_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.uploadingPath_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getUploadingPathBytes() {
            Object obj = this.uploadingPath_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.uploadingPath_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasStatus() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getStatus() {
            return this.status_;
        }

        private void initFields() {
            this.fileId_ = "";
            this.uploadingPath_ = "";
            this.status_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasFileId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStatus()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getFileIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getUploadingPathBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.status_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getFileIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getUploadingPathBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.status_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static StickerInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static StickerInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static StickerInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static StickerInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static StickerInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static StickerInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static StickerInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StickerInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StickerInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static StickerInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(StickerInfo stickerInfo) {
            return newBuilder().mergeFrom(stickerInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public static final class StickerInfoList extends GeneratedMessageLite implements StickerInfoListOrBuilder {
        public static final int STICKERS_FIELD_NUMBER = 1;
        private static final StickerInfoList defaultInstance = new StickerInfoList(true);
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<StickerInfo> stickers_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<StickerInfoList, Builder> implements StickerInfoListOrBuilder {
            private int bitField0_;
            private List<StickerInfo> stickers_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.stickers_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public StickerInfoList getDefaultInstanceForType() {
                return StickerInfoList.getDefaultInstance();
            }

            public StickerInfoList build() {
                StickerInfoList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public StickerInfoList buildParsed() throws InvalidProtocolBufferException {
                StickerInfoList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public StickerInfoList buildPartial() {
                StickerInfoList stickerInfoList = new StickerInfoList(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.stickers_ = Collections.unmodifiableList(this.stickers_);
                    this.bitField0_ &= -2;
                }
                stickerInfoList.stickers_ = this.stickers_;
                return stickerInfoList;
            }

            public Builder mergeFrom(StickerInfoList stickerInfoList) {
                if (stickerInfoList != StickerInfoList.getDefaultInstance() && !stickerInfoList.stickers_.isEmpty()) {
                    if (this.stickers_.isEmpty()) {
                        this.stickers_ = stickerInfoList.stickers_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureStickersIsMutable();
                        this.stickers_.addAll(stickerInfoList.stickers_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getStickersCount(); i++) {
                    if (!getStickers(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = StickerInfo.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addStickers(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureStickersIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.stickers_ = new ArrayList(this.stickers_);
                    this.bitField0_ |= 1;
                }
            }

            public List<StickerInfo> getStickersList() {
                return Collections.unmodifiableList(this.stickers_);
            }

            public int getStickersCount() {
                return this.stickers_.size();
            }

            public StickerInfo getStickers(int i) {
                return (StickerInfo) this.stickers_.get(i);
            }

            public Builder setStickers(int i, StickerInfo stickerInfo) {
                if (stickerInfo != null) {
                    ensureStickersIsMutable();
                    this.stickers_.set(i, stickerInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setStickers(int i, Builder builder) {
                ensureStickersIsMutable();
                this.stickers_.set(i, builder.build());
                return this;
            }

            public Builder addStickers(StickerInfo stickerInfo) {
                if (stickerInfo != null) {
                    ensureStickersIsMutable();
                    this.stickers_.add(stickerInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addStickers(int i, StickerInfo stickerInfo) {
                if (stickerInfo != null) {
                    ensureStickersIsMutable();
                    this.stickers_.add(i, stickerInfo);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addStickers(Builder builder) {
                ensureStickersIsMutable();
                this.stickers_.add(builder.build());
                return this;
            }

            public Builder addStickers(int i, Builder builder) {
                ensureStickersIsMutable();
                this.stickers_.add(i, builder.build());
                return this;
            }

            public Builder addAllStickers(Iterable<? extends StickerInfo> iterable) {
                ensureStickersIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.stickers_);
                return this;
            }

            public Builder clearStickers() {
                this.stickers_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeStickers(int i) {
                ensureStickersIsMutable();
                this.stickers_.remove(i);
                return this;
            }
        }

        private StickerInfoList(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private StickerInfoList(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static StickerInfoList getDefaultInstance() {
            return defaultInstance;
        }

        public StickerInfoList getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<StickerInfo> getStickersList() {
            return this.stickers_;
        }

        public List<? extends StickerInfoOrBuilder> getStickersOrBuilderList() {
            return this.stickers_;
        }

        public int getStickersCount() {
            return this.stickers_.size();
        }

        public StickerInfo getStickers(int i) {
            return (StickerInfo) this.stickers_.get(i);
        }

        public StickerInfoOrBuilder getStickersOrBuilder(int i) {
            return (StickerInfoOrBuilder) this.stickers_.get(i);
        }

        private void initFields() {
            this.stickers_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getStickersCount(); i++) {
                if (!getStickers(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.stickers_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.stickers_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.stickers_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.stickers_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static StickerInfoList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static StickerInfoList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static StickerInfoList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static StickerInfoList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static StickerInfoList parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static StickerInfoList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static StickerInfoList parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StickerInfoList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static StickerInfoList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static StickerInfoList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(StickerInfoList stickerInfoList) {
            return newBuilder().mergeFrom(stickerInfoList);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface StickerInfoListOrBuilder extends MessageLiteOrBuilder {
        StickerInfo getStickers(int i);

        int getStickersCount();

        List<StickerInfo> getStickersList();
    }

    public interface StickerInfoOrBuilder extends MessageLiteOrBuilder {
        String getFileId();

        int getStatus();

        String getUploadingPath();

        boolean hasFileId();

        boolean hasStatus();

        boolean hasUploadingPath();
    }

    public static final class SyncHistoryMsgInfo extends GeneratedMessageLite implements SyncHistoryMsgInfoOrBuilder {
        public static final int ISREADY_FIELD_NUMBER = 1;
        public static final int MSGIDS_FIELD_NUMBER = 3;
        public static final int REQID_FIELD_NUMBER = 2;
        private static final SyncHistoryMsgInfo defaultInstance = new SyncHistoryMsgInfo(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean isReady_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public LazyStringList msgIds_;
        /* access modifiers changed from: private */
        public Object reqId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<SyncHistoryMsgInfo, Builder> implements SyncHistoryMsgInfoOrBuilder {
            private int bitField0_;
            private boolean isReady_;
            private LazyStringList msgIds_ = LazyStringArrayList.EMPTY;
            private Object reqId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.isReady_ = false;
                this.bitField0_ &= -2;
                this.reqId_ = "";
                this.bitField0_ &= -3;
                this.msgIds_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public SyncHistoryMsgInfo getDefaultInstanceForType() {
                return SyncHistoryMsgInfo.getDefaultInstance();
            }

            public SyncHistoryMsgInfo build() {
                SyncHistoryMsgInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public SyncHistoryMsgInfo buildParsed() throws InvalidProtocolBufferException {
                SyncHistoryMsgInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public SyncHistoryMsgInfo buildPartial() {
                SyncHistoryMsgInfo syncHistoryMsgInfo = new SyncHistoryMsgInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                syncHistoryMsgInfo.isReady_ = this.isReady_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                syncHistoryMsgInfo.reqId_ = this.reqId_;
                if ((this.bitField0_ & 4) == 4) {
                    this.msgIds_ = new UnmodifiableLazyStringList(this.msgIds_);
                    this.bitField0_ &= -5;
                }
                syncHistoryMsgInfo.msgIds_ = this.msgIds_;
                syncHistoryMsgInfo.bitField0_ = i2;
                return syncHistoryMsgInfo;
            }

            public Builder mergeFrom(SyncHistoryMsgInfo syncHistoryMsgInfo) {
                if (syncHistoryMsgInfo == SyncHistoryMsgInfo.getDefaultInstance()) {
                    return this;
                }
                if (syncHistoryMsgInfo.hasIsReady()) {
                    setIsReady(syncHistoryMsgInfo.getIsReady());
                }
                if (syncHistoryMsgInfo.hasReqId()) {
                    setReqId(syncHistoryMsgInfo.getReqId());
                }
                if (!syncHistoryMsgInfo.msgIds_.isEmpty()) {
                    if (this.msgIds_.isEmpty()) {
                        this.msgIds_ = syncHistoryMsgInfo.msgIds_;
                        this.bitField0_ &= -5;
                    } else {
                        ensureMsgIdsIsMutable();
                        this.msgIds_.addAll(syncHistoryMsgInfo.msgIds_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasIsReady() && hasReqId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.isReady_ = codedInputStream.readBool();
                    } else if (readTag == 18) {
                        this.bitField0_ |= 2;
                        this.reqId_ = codedInputStream.readBytes();
                    } else if (readTag == 26) {
                        ensureMsgIdsIsMutable();
                        this.msgIds_.add(codedInputStream.readBytes());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasIsReady() {
                return (this.bitField0_ & 1) == 1;
            }

            public boolean getIsReady() {
                return this.isReady_;
            }

            public Builder setIsReady(boolean z) {
                this.bitField0_ |= 1;
                this.isReady_ = z;
                return this;
            }

            public Builder clearIsReady() {
                this.bitField0_ &= -2;
                this.isReady_ = false;
                return this;
            }

            public boolean hasReqId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getReqId() {
                Object obj = this.reqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.reqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.reqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearReqId() {
                this.bitField0_ &= -3;
                this.reqId_ = SyncHistoryMsgInfo.getDefaultInstance().getReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setReqId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.reqId_ = byteString;
            }

            private void ensureMsgIdsIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.msgIds_ = new LazyStringArrayList(this.msgIds_);
                    this.bitField0_ |= 4;
                }
            }

            public List<String> getMsgIdsList() {
                return Collections.unmodifiableList(this.msgIds_);
            }

            public int getMsgIdsCount() {
                return this.msgIds_.size();
            }

            public String getMsgIds(int i) {
                return (String) this.msgIds_.get(i);
            }

            public Builder setMsgIds(int i, String str) {
                if (str != null) {
                    ensureMsgIdsIsMutable();
                    this.msgIds_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addMsgIds(String str) {
                if (str != null) {
                    ensureMsgIdsIsMutable();
                    this.msgIds_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllMsgIds(Iterable<String> iterable) {
                ensureMsgIdsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.msgIds_);
                return this;
            }

            public Builder clearMsgIds() {
                this.msgIds_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -5;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addMsgIds(ByteString byteString) {
                ensureMsgIdsIsMutable();
                this.msgIds_.add(byteString);
            }
        }

        private SyncHistoryMsgInfo(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private SyncHistoryMsgInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static SyncHistoryMsgInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SyncHistoryMsgInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasIsReady() {
            return (this.bitField0_ & 1) == 1;
        }

        public boolean getIsReady() {
            return this.isReady_;
        }

        public boolean hasReqId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getReqId() {
            Object obj = this.reqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.reqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getReqIdBytes() {
            Object obj = this.reqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<String> getMsgIdsList() {
            return this.msgIds_;
        }

        public int getMsgIdsCount() {
            return this.msgIds_.size();
        }

        public String getMsgIds(int i) {
            return (String) this.msgIds_.get(i);
        }

        private void initFields() {
            this.isReady_ = false;
            this.reqId_ = "";
            this.msgIds_ = LazyStringArrayList.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasIsReady()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBool(1, this.isReady_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getReqIdBytes());
            }
            for (int i = 0; i < this.msgIds_.size(); i++) {
                codedOutputStream.writeBytes(3, this.msgIds_.getByteString(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBoolSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBoolSize(1, this.isReady_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBoolSize += CodedOutputStream.computeBytesSize(2, getReqIdBytes());
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.msgIds_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.msgIds_.getByteString(i3));
            }
            int size = computeBoolSize + i2 + (getMsgIdsList().size() * 1);
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SyncHistoryMsgInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SyncHistoryMsgInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static SyncHistoryMsgInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static SyncHistoryMsgInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SyncHistoryMsgInfo syncHistoryMsgInfo) {
            return newBuilder().mergeFrom(syncHistoryMsgInfo);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface SyncHistoryMsgInfoOrBuilder extends MessageLiteOrBuilder {
        boolean getIsReady();

        String getMsgIds(int i);

        int getMsgIdsCount();

        List<String> getMsgIdsList();

        String getReqId();

        boolean hasIsReady();

        boolean hasReqId();
    }

    public static final class ThrCommentState extends GeneratedMessageLite implements ThrCommentStateOrBuilder {
        public static final int READ_TIME_FIELD_NUMBER = 2;
        public static final int THR_T_FIELD_NUMBER = 1;
        public static final int UNREAD_COMMENT_COUNT_FIELD_NUMBER = 3;
        private static final ThrCommentState defaultInstance = new ThrCommentState(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public long readTime_;
        /* access modifiers changed from: private */
        public long thrT_;
        /* access modifiers changed from: private */
        public long unreadCommentCount_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<ThrCommentState, Builder> implements ThrCommentStateOrBuilder {
            private int bitField0_;
            private long readTime_;
            private long thrT_;
            private long unreadCommentCount_;

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.thrT_ = 0;
                this.bitField0_ &= -2;
                this.readTime_ = 0;
                this.bitField0_ &= -3;
                this.unreadCommentCount_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public ThrCommentState getDefaultInstanceForType() {
                return ThrCommentState.getDefaultInstance();
            }

            public ThrCommentState build() {
                ThrCommentState buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public ThrCommentState buildParsed() throws InvalidProtocolBufferException {
                ThrCommentState buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public ThrCommentState buildPartial() {
                ThrCommentState thrCommentState = new ThrCommentState(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                thrCommentState.thrT_ = this.thrT_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                thrCommentState.readTime_ = this.readTime_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                thrCommentState.unreadCommentCount_ = this.unreadCommentCount_;
                thrCommentState.bitField0_ = i2;
                return thrCommentState;
            }

            public Builder mergeFrom(ThrCommentState thrCommentState) {
                if (thrCommentState == ThrCommentState.getDefaultInstance()) {
                    return this;
                }
                if (thrCommentState.hasThrT()) {
                    setThrT(thrCommentState.getThrT());
                }
                if (thrCommentState.hasReadTime()) {
                    setReadTime(thrCommentState.getReadTime());
                }
                if (thrCommentState.hasUnreadCommentCount()) {
                    setUnreadCommentCount(thrCommentState.getUnreadCommentCount());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasThrT() && hasReadTime() && hasUnreadCommentCount()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 8) {
                        this.bitField0_ |= 1;
                        this.thrT_ = codedInputStream.readInt64();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.readTime_ = codedInputStream.readInt64();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.unreadCommentCount_ = codedInputStream.readInt64();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasThrT() {
                return (this.bitField0_ & 1) == 1;
            }

            public long getThrT() {
                return this.thrT_;
            }

            public Builder setThrT(long j) {
                this.bitField0_ |= 1;
                this.thrT_ = j;
                return this;
            }

            public Builder clearThrT() {
                this.bitField0_ &= -2;
                this.thrT_ = 0;
                return this;
            }

            public boolean hasReadTime() {
                return (this.bitField0_ & 2) == 2;
            }

            public long getReadTime() {
                return this.readTime_;
            }

            public Builder setReadTime(long j) {
                this.bitField0_ |= 2;
                this.readTime_ = j;
                return this;
            }

            public Builder clearReadTime() {
                this.bitField0_ &= -3;
                this.readTime_ = 0;
                return this;
            }

            public boolean hasUnreadCommentCount() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getUnreadCommentCount() {
                return this.unreadCommentCount_;
            }

            public Builder setUnreadCommentCount(long j) {
                this.bitField0_ |= 4;
                this.unreadCommentCount_ = j;
                return this;
            }

            public Builder clearUnreadCommentCount() {
                this.bitField0_ &= -5;
                this.unreadCommentCount_ = 0;
                return this;
            }
        }

        private ThrCommentState(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private ThrCommentState(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static ThrCommentState getDefaultInstance() {
            return defaultInstance;
        }

        public ThrCommentState getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasThrT() {
            return (this.bitField0_ & 1) == 1;
        }

        public long getThrT() {
            return this.thrT_;
        }

        public boolean hasReadTime() {
            return (this.bitField0_ & 2) == 2;
        }

        public long getReadTime() {
            return this.readTime_;
        }

        public boolean hasUnreadCommentCount() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getUnreadCommentCount() {
            return this.unreadCommentCount_;
        }

        private void initFields() {
            this.thrT_ = 0;
            this.readTime_ = 0;
            this.unreadCommentCount_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasThrT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReadTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasUnreadCommentCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt64(1, this.thrT_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.readTime_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.unreadCommentCount_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt64Size(1, this.thrT_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.readTime_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt64Size(3, this.unreadCommentCount_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ThrCommentState parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static ThrCommentState parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static ThrCommentState parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static ThrCommentState parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static ThrCommentState parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static ThrCommentState parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static ThrCommentState parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ThrCommentState parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ThrCommentState parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static ThrCommentState parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ThrCommentState thrCommentState) {
            return newBuilder().mergeFrom(thrCommentState);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface ThrCommentStateOrBuilder extends MessageLiteOrBuilder {
        long getReadTime();

        long getThrT();

        long getUnreadCommentCount();

        boolean hasReadTime();

        boolean hasThrT();

        boolean hasUnreadCommentCount();
    }

    public static final class ThrCommentStates extends GeneratedMessageLite implements ThrCommentStatesOrBuilder {
        public static final int STATES_FIELD_NUMBER = 1;
        private static final ThrCommentStates defaultInstance = new ThrCommentStates(true);
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public List<ThrCommentState> states_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<ThrCommentStates, Builder> implements ThrCommentStatesOrBuilder {
            private int bitField0_;
            private List<ThrCommentState> states_ = Collections.emptyList();

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.states_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public ThrCommentStates getDefaultInstanceForType() {
                return ThrCommentStates.getDefaultInstance();
            }

            public ThrCommentStates build() {
                ThrCommentStates buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public ThrCommentStates buildParsed() throws InvalidProtocolBufferException {
                ThrCommentStates buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public ThrCommentStates buildPartial() {
                ThrCommentStates thrCommentStates = new ThrCommentStates(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.states_ = Collections.unmodifiableList(this.states_);
                    this.bitField0_ &= -2;
                }
                thrCommentStates.states_ = this.states_;
                return thrCommentStates;
            }

            public Builder mergeFrom(ThrCommentStates thrCommentStates) {
                if (thrCommentStates != ThrCommentStates.getDefaultInstance() && !thrCommentStates.states_.isEmpty()) {
                    if (this.states_.isEmpty()) {
                        this.states_ = thrCommentStates.states_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureStatesIsMutable();
                        this.states_.addAll(thrCommentStates.states_);
                    }
                }
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getStatesCount(); i++) {
                    if (!getStates(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        Builder newBuilder = ThrCommentState.newBuilder();
                        codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                        addStates(newBuilder.buildPartial());
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            private void ensureStatesIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.states_ = new ArrayList(this.states_);
                    this.bitField0_ |= 1;
                }
            }

            public List<ThrCommentState> getStatesList() {
                return Collections.unmodifiableList(this.states_);
            }

            public int getStatesCount() {
                return this.states_.size();
            }

            public ThrCommentState getStates(int i) {
                return (ThrCommentState) this.states_.get(i);
            }

            public Builder setStates(int i, ThrCommentState thrCommentState) {
                if (thrCommentState != null) {
                    ensureStatesIsMutable();
                    this.states_.set(i, thrCommentState);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setStates(int i, Builder builder) {
                ensureStatesIsMutable();
                this.states_.set(i, builder.build());
                return this;
            }

            public Builder addStates(ThrCommentState thrCommentState) {
                if (thrCommentState != null) {
                    ensureStatesIsMutable();
                    this.states_.add(thrCommentState);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addStates(int i, ThrCommentState thrCommentState) {
                if (thrCommentState != null) {
                    ensureStatesIsMutable();
                    this.states_.add(i, thrCommentState);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addStates(Builder builder) {
                ensureStatesIsMutable();
                this.states_.add(builder.build());
                return this;
            }

            public Builder addStates(int i, Builder builder) {
                ensureStatesIsMutable();
                this.states_.add(i, builder.build());
                return this;
            }

            public Builder addAllStates(Iterable<? extends ThrCommentState> iterable) {
                ensureStatesIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.states_);
                return this;
            }

            public Builder clearStates() {
                this.states_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            public Builder removeStates(int i) {
                ensureStatesIsMutable();
                this.states_.remove(i);
                return this;
            }
        }

        private ThrCommentStates(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private ThrCommentStates(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static ThrCommentStates getDefaultInstance() {
            return defaultInstance;
        }

        public ThrCommentStates getDefaultInstanceForType() {
            return defaultInstance;
        }

        public List<ThrCommentState> getStatesList() {
            return this.states_;
        }

        public List<? extends ThrCommentStateOrBuilder> getStatesOrBuilderList() {
            return this.states_;
        }

        public int getStatesCount() {
            return this.states_.size();
        }

        public ThrCommentState getStates(int i) {
            return (ThrCommentState) this.states_.get(i);
        }

        public ThrCommentStateOrBuilder getStatesOrBuilder(int i) {
            return (ThrCommentStateOrBuilder) this.states_.get(i);
        }

        private void initFields() {
            this.states_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = false;
            if (b != -1) {
                if (b == 1) {
                    z = true;
                }
                return z;
            }
            for (int i = 0; i < getStatesCount(); i++) {
                if (!getStates(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.states_.size(); i++) {
                codedOutputStream.writeMessage(1, (MessageLite) this.states_.get(i));
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.states_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, (MessageLite) this.states_.get(i3));
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ThrCommentStates parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static ThrCommentStates parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static ThrCommentStates parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static ThrCommentStates parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static ThrCommentStates parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static ThrCommentStates parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static ThrCommentStates parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ThrCommentStates parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ThrCommentStates parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static ThrCommentStates parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ThrCommentStates thrCommentStates) {
            return newBuilder().mergeFrom(thrCommentStates);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface ThrCommentStatesOrBuilder extends MessageLiteOrBuilder {
        ThrCommentState getStates(int i);

        int getStatesCount();

        List<ThrCommentState> getStatesList();
    }

    public static final class ThreadDataResult extends GeneratedMessageLite implements ThreadDataResultOrBuilder {
        public static final int CHANNEL_ID_FIELD_NUMBER = 6;
        public static final int CURR_STATE_FIELD_NUMBER = 3;
        public static final int DB_REQ_ID_FIELD_NUMBER = 1;
        public static final int DIR_FIELD_NUMBER = 7;
        public static final int NEW_START_THR_FIELD_NUMBER = 11;
        public static final int START_THREAD_FIELD_NUMBER = 8;
        public static final int START_THR_REDIRECTE_FIELD_NUMBER = 10;
        public static final int START_THR_SVR_T_FIELD_NUMBER = 9;
        public static final int THREAD_COMMENTS_FIELD_NUMBER = 5;
        public static final int THREAD_IDS_FIELD_NUMBER = 4;
        public static final int XMS_REQ_ID_FIELD_NUMBER = 2;
        private static final ThreadDataResult defaultInstance = new ThreadDataResult(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object channelId_;
        /* access modifiers changed from: private */
        public long currState_;
        /* access modifiers changed from: private */
        public Object dbReqId_;
        /* access modifiers changed from: private */
        public int dir_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object newStartThr_;
        /* access modifiers changed from: private */
        public boolean startThrRedirecte_;
        /* access modifiers changed from: private */
        public long startThrSvrT_;
        /* access modifiers changed from: private */
        public Object startThread_;
        /* access modifiers changed from: private */
        public List<CommentIndexList> threadComments_;
        /* access modifiers changed from: private */
        public LazyStringList threadIds_;
        /* access modifiers changed from: private */
        public Object xmsReqId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<ThreadDataResult, Builder> implements ThreadDataResultOrBuilder {
            private int bitField0_;
            private Object channelId_ = "";
            private long currState_;
            private Object dbReqId_ = "";
            private int dir_;
            private Object newStartThr_ = "";
            private boolean startThrRedirecte_;
            private long startThrSvrT_;
            private Object startThread_ = "";
            private List<CommentIndexList> threadComments_ = Collections.emptyList();
            private LazyStringList threadIds_ = LazyStringArrayList.EMPTY;
            private Object xmsReqId_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.dbReqId_ = "";
                this.bitField0_ &= -2;
                this.xmsReqId_ = "";
                this.bitField0_ &= -3;
                this.currState_ = 0;
                this.bitField0_ &= -5;
                this.threadIds_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                this.threadComments_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.channelId_ = "";
                this.bitField0_ &= -33;
                this.dir_ = 0;
                this.bitField0_ &= -65;
                this.startThread_ = "";
                this.bitField0_ &= -129;
                this.startThrSvrT_ = 0;
                this.bitField0_ &= -257;
                this.startThrRedirecte_ = false;
                this.bitField0_ &= -513;
                this.newStartThr_ = "";
                this.bitField0_ &= -1025;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public ThreadDataResult getDefaultInstanceForType() {
                return ThreadDataResult.getDefaultInstance();
            }

            public ThreadDataResult build() {
                ThreadDataResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public ThreadDataResult buildParsed() throws InvalidProtocolBufferException {
                ThreadDataResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public ThreadDataResult buildPartial() {
                ThreadDataResult threadDataResult = new ThreadDataResult(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                threadDataResult.dbReqId_ = this.dbReqId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                threadDataResult.xmsReqId_ = this.xmsReqId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                threadDataResult.currState_ = this.currState_;
                if ((this.bitField0_ & 8) == 8) {
                    this.threadIds_ = new UnmodifiableLazyStringList(this.threadIds_);
                    this.bitField0_ &= -9;
                }
                threadDataResult.threadIds_ = this.threadIds_;
                if ((this.bitField0_ & 16) == 16) {
                    this.threadComments_ = Collections.unmodifiableList(this.threadComments_);
                    this.bitField0_ &= -17;
                }
                threadDataResult.threadComments_ = this.threadComments_;
                if ((i & 32) == 32) {
                    i2 |= 8;
                }
                threadDataResult.channelId_ = this.channelId_;
                if ((i & 64) == 64) {
                    i2 |= 16;
                }
                threadDataResult.dir_ = this.dir_;
                if ((i & 128) == 128) {
                    i2 |= 32;
                }
                threadDataResult.startThread_ = this.startThread_;
                if ((i & 256) == 256) {
                    i2 |= 64;
                }
                threadDataResult.startThrSvrT_ = this.startThrSvrT_;
                if ((i & 512) == 512) {
                    i2 |= 128;
                }
                threadDataResult.startThrRedirecte_ = this.startThrRedirecte_;
                if ((i & 1024) == 1024) {
                    i2 |= 256;
                }
                threadDataResult.newStartThr_ = this.newStartThr_;
                threadDataResult.bitField0_ = i2;
                return threadDataResult;
            }

            public Builder mergeFrom(ThreadDataResult threadDataResult) {
                if (threadDataResult == ThreadDataResult.getDefaultInstance()) {
                    return this;
                }
                if (threadDataResult.hasDbReqId()) {
                    setDbReqId(threadDataResult.getDbReqId());
                }
                if (threadDataResult.hasXmsReqId()) {
                    setXmsReqId(threadDataResult.getXmsReqId());
                }
                if (threadDataResult.hasCurrState()) {
                    setCurrState(threadDataResult.getCurrState());
                }
                if (!threadDataResult.threadIds_.isEmpty()) {
                    if (this.threadIds_.isEmpty()) {
                        this.threadIds_ = threadDataResult.threadIds_;
                        this.bitField0_ &= -9;
                    } else {
                        ensureThreadIdsIsMutable();
                        this.threadIds_.addAll(threadDataResult.threadIds_);
                    }
                }
                if (!threadDataResult.threadComments_.isEmpty()) {
                    if (this.threadComments_.isEmpty()) {
                        this.threadComments_ = threadDataResult.threadComments_;
                        this.bitField0_ &= -17;
                    } else {
                        ensureThreadCommentsIsMutable();
                        this.threadComments_.addAll(threadDataResult.threadComments_);
                    }
                }
                if (threadDataResult.hasChannelId()) {
                    setChannelId(threadDataResult.getChannelId());
                }
                if (threadDataResult.hasDir()) {
                    setDir(threadDataResult.getDir());
                }
                if (threadDataResult.hasStartThread()) {
                    setStartThread(threadDataResult.getStartThread());
                }
                if (threadDataResult.hasStartThrSvrT()) {
                    setStartThrSvrT(threadDataResult.getStartThrSvrT());
                }
                if (threadDataResult.hasStartThrRedirecte()) {
                    setStartThrRedirecte(threadDataResult.getStartThrRedirecte());
                }
                if (threadDataResult.hasNewStartThr()) {
                    setNewStartThr(threadDataResult.getNewStartThr());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasDbReqId() && hasXmsReqId() && hasCurrState() && hasChannelId() && hasDir() && hasStartThread() && hasStartThrSvrT() && hasStartThrRedirecte() && hasNewStartThr()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            return this;
                        case 10:
                            this.bitField0_ |= 1;
                            this.dbReqId_ = codedInputStream.readBytes();
                            break;
                        case 18:
                            this.bitField0_ |= 2;
                            this.xmsReqId_ = codedInputStream.readBytes();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.currState_ = codedInputStream.readInt64();
                            break;
                        case 34:
                            ensureThreadIdsIsMutable();
                            this.threadIds_.add(codedInputStream.readBytes());
                            break;
                        case 42:
                            Builder newBuilder = CommentIndexList.newBuilder();
                            codedInputStream.readMessage(newBuilder, extensionRegistryLite);
                            addThreadComments(newBuilder.buildPartial());
                            break;
                        case 50:
                            this.bitField0_ |= 32;
                            this.channelId_ = codedInputStream.readBytes();
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.dir_ = codedInputStream.readInt32();
                            break;
                        case 66:
                            this.bitField0_ |= 128;
                            this.startThread_ = codedInputStream.readBytes();
                            break;
                        case 72:
                            this.bitField0_ |= 256;
                            this.startThrSvrT_ = codedInputStream.readInt64();
                            break;
                        case 80:
                            this.bitField0_ |= 512;
                            this.startThrRedirecte_ = codedInputStream.readBool();
                            break;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.newStartThr_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                return this;
                            }
                    }
                }
            }

            public boolean hasDbReqId() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getDbReqId() {
                Object obj = this.dbReqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.dbReqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setDbReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.dbReqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearDbReqId() {
                this.bitField0_ &= -2;
                this.dbReqId_ = ThreadDataResult.getDefaultInstance().getDbReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setDbReqId(ByteString byteString) {
                this.bitField0_ |= 1;
                this.dbReqId_ = byteString;
            }

            public boolean hasXmsReqId() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getXmsReqId() {
                Object obj = this.xmsReqId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.xmsReqId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setXmsReqId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.xmsReqId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearXmsReqId() {
                this.bitField0_ &= -3;
                this.xmsReqId_ = ThreadDataResult.getDefaultInstance().getXmsReqId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setXmsReqId(ByteString byteString) {
                this.bitField0_ |= 2;
                this.xmsReqId_ = byteString;
            }

            public boolean hasCurrState() {
                return (this.bitField0_ & 4) == 4;
            }

            public long getCurrState() {
                return this.currState_;
            }

            public Builder setCurrState(long j) {
                this.bitField0_ |= 4;
                this.currState_ = j;
                return this;
            }

            public Builder clearCurrState() {
                this.bitField0_ &= -5;
                this.currState_ = 0;
                return this;
            }

            private void ensureThreadIdsIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.threadIds_ = new LazyStringArrayList(this.threadIds_);
                    this.bitField0_ |= 8;
                }
            }

            public List<String> getThreadIdsList() {
                return Collections.unmodifiableList(this.threadIds_);
            }

            public int getThreadIdsCount() {
                return this.threadIds_.size();
            }

            public String getThreadIds(int i) {
                return (String) this.threadIds_.get(i);
            }

            public Builder setThreadIds(int i, String str) {
                if (str != null) {
                    ensureThreadIdsIsMutable();
                    this.threadIds_.set(i, str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addThreadIds(String str) {
                if (str != null) {
                    ensureThreadIdsIsMutable();
                    this.threadIds_.add(str);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addAllThreadIds(Iterable<String> iterable) {
                ensureThreadIdsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.threadIds_);
                return this;
            }

            public Builder clearThreadIds() {
                this.threadIds_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void addThreadIds(ByteString byteString) {
                ensureThreadIdsIsMutable();
                this.threadIds_.add(byteString);
            }

            private void ensureThreadCommentsIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.threadComments_ = new ArrayList(this.threadComments_);
                    this.bitField0_ |= 16;
                }
            }

            public List<CommentIndexList> getThreadCommentsList() {
                return Collections.unmodifiableList(this.threadComments_);
            }

            public int getThreadCommentsCount() {
                return this.threadComments_.size();
            }

            public CommentIndexList getThreadComments(int i) {
                return (CommentIndexList) this.threadComments_.get(i);
            }

            public Builder setThreadComments(int i, CommentIndexList commentIndexList) {
                if (commentIndexList != null) {
                    ensureThreadCommentsIsMutable();
                    this.threadComments_.set(i, commentIndexList);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder setThreadComments(int i, Builder builder) {
                ensureThreadCommentsIsMutable();
                this.threadComments_.set(i, builder.build());
                return this;
            }

            public Builder addThreadComments(CommentIndexList commentIndexList) {
                if (commentIndexList != null) {
                    ensureThreadCommentsIsMutable();
                    this.threadComments_.add(commentIndexList);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addThreadComments(int i, CommentIndexList commentIndexList) {
                if (commentIndexList != null) {
                    ensureThreadCommentsIsMutable();
                    this.threadComments_.add(i, commentIndexList);
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder addThreadComments(Builder builder) {
                ensureThreadCommentsIsMutable();
                this.threadComments_.add(builder.build());
                return this;
            }

            public Builder addThreadComments(int i, Builder builder) {
                ensureThreadCommentsIsMutable();
                this.threadComments_.add(i, builder.build());
                return this;
            }

            public Builder addAllThreadComments(Iterable<? extends CommentIndexList> iterable) {
                ensureThreadCommentsIsMutable();
                com.google.protobuf.GeneratedMessageLite.Builder.addAll(iterable, this.threadComments_);
                return this;
            }

            public Builder clearThreadComments() {
                this.threadComments_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public Builder removeThreadComments(int i) {
                ensureThreadCommentsIsMutable();
                this.threadComments_.remove(i);
                return this;
            }

            public boolean hasChannelId() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getChannelId() {
                Object obj = this.channelId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.channelId_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setChannelId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.channelId_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearChannelId() {
                this.bitField0_ &= -33;
                this.channelId_ = ThreadDataResult.getDefaultInstance().getChannelId();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setChannelId(ByteString byteString) {
                this.bitField0_ |= 32;
                this.channelId_ = byteString;
            }

            public boolean hasDir() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getDir() {
                return this.dir_;
            }

            public Builder setDir(int i) {
                this.bitField0_ |= 64;
                this.dir_ = i;
                return this;
            }

            public Builder clearDir() {
                this.bitField0_ &= -65;
                this.dir_ = 0;
                return this;
            }

            public boolean hasStartThread() {
                return (this.bitField0_ & 128) == 128;
            }

            public String getStartThread() {
                Object obj = this.startThread_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.startThread_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setStartThread(String str) {
                if (str != null) {
                    this.bitField0_ |= 128;
                    this.startThread_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearStartThread() {
                this.bitField0_ &= -129;
                this.startThread_ = ThreadDataResult.getDefaultInstance().getStartThread();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setStartThread(ByteString byteString) {
                this.bitField0_ |= 128;
                this.startThread_ = byteString;
            }

            public boolean hasStartThrSvrT() {
                return (this.bitField0_ & 256) == 256;
            }

            public long getStartThrSvrT() {
                return this.startThrSvrT_;
            }

            public Builder setStartThrSvrT(long j) {
                this.bitField0_ |= 256;
                this.startThrSvrT_ = j;
                return this;
            }

            public Builder clearStartThrSvrT() {
                this.bitField0_ &= -257;
                this.startThrSvrT_ = 0;
                return this;
            }

            public boolean hasStartThrRedirecte() {
                return (this.bitField0_ & 512) == 512;
            }

            public boolean getStartThrRedirecte() {
                return this.startThrRedirecte_;
            }

            public Builder setStartThrRedirecte(boolean z) {
                this.bitField0_ |= 512;
                this.startThrRedirecte_ = z;
                return this;
            }

            public Builder clearStartThrRedirecte() {
                this.bitField0_ &= -513;
                this.startThrRedirecte_ = false;
                return this;
            }

            public boolean hasNewStartThr() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public String getNewStartThr() {
                Object obj = this.newStartThr_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.newStartThr_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setNewStartThr(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.newStartThr_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearNewStartThr() {
                this.bitField0_ &= -1025;
                this.newStartThr_ = ThreadDataResult.getDefaultInstance().getNewStartThr();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setNewStartThr(ByteString byteString) {
                this.bitField0_ |= 1024;
                this.newStartThr_ = byteString;
            }
        }

        private ThreadDataResult(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private ThreadDataResult(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static ThreadDataResult getDefaultInstance() {
            return defaultInstance;
        }

        public ThreadDataResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasDbReqId() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getDbReqId() {
            Object obj = this.dbReqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.dbReqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getDbReqIdBytes() {
            Object obj = this.dbReqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.dbReqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasXmsReqId() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getXmsReqId() {
            Object obj = this.xmsReqId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.xmsReqId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getXmsReqIdBytes() {
            Object obj = this.xmsReqId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.xmsReqId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCurrState() {
            return (this.bitField0_ & 4) == 4;
        }

        public long getCurrState() {
            return this.currState_;
        }

        public List<String> getThreadIdsList() {
            return this.threadIds_;
        }

        public int getThreadIdsCount() {
            return this.threadIds_.size();
        }

        public String getThreadIds(int i) {
            return (String) this.threadIds_.get(i);
        }

        public List<CommentIndexList> getThreadCommentsList() {
            return this.threadComments_;
        }

        public List<? extends CommentIndexListOrBuilder> getThreadCommentsOrBuilderList() {
            return this.threadComments_;
        }

        public int getThreadCommentsCount() {
            return this.threadComments_.size();
        }

        public CommentIndexList getThreadComments(int i) {
            return (CommentIndexList) this.threadComments_.get(i);
        }

        public CommentIndexListOrBuilder getThreadCommentsOrBuilder(int i) {
            return (CommentIndexListOrBuilder) this.threadComments_.get(i);
        }

        public boolean hasChannelId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getChannelId() {
            Object obj = this.channelId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.channelId_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getChannelIdBytes() {
            Object obj = this.channelId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.channelId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasDir() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getDir() {
            return this.dir_;
        }

        public boolean hasStartThread() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getStartThread() {
            Object obj = this.startThread_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.startThread_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getStartThreadBytes() {
            Object obj = this.startThread_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.startThread_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasStartThrSvrT() {
            return (this.bitField0_ & 64) == 64;
        }

        public long getStartThrSvrT() {
            return this.startThrSvrT_;
        }

        public boolean hasStartThrRedirecte() {
            return (this.bitField0_ & 128) == 128;
        }

        public boolean getStartThrRedirecte() {
            return this.startThrRedirecte_;
        }

        public boolean hasNewStartThr() {
            return (this.bitField0_ & 256) == 256;
        }

        public String getNewStartThr() {
            Object obj = this.newStartThr_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.newStartThr_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNewStartThrBytes() {
            Object obj = this.newStartThr_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.newStartThr_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.dbReqId_ = "";
            this.xmsReqId_ = "";
            this.currState_ = 0;
            this.threadIds_ = LazyStringArrayList.EMPTY;
            this.threadComments_ = Collections.emptyList();
            this.channelId_ = "";
            this.dir_ = 0;
            this.startThread_ = "";
            this.startThrSvrT_ = 0;
            this.startThrRedirecte_ = false;
            this.newStartThr_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasDbReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasXmsReqId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCurrState()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasChannelId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDir()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStartThread()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStartThrSvrT()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasStartThrRedirecte()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNewStartThr()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDbReqIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getXmsReqIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.currState_);
            }
            for (int i = 0; i < this.threadIds_.size(); i++) {
                codedOutputStream.writeBytes(4, this.threadIds_.getByteString(i));
            }
            for (int i2 = 0; i2 < this.threadComments_.size(); i2++) {
                codedOutputStream.writeMessage(5, (MessageLite) this.threadComments_.get(i2));
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(6, getChannelIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(7, this.dir_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(8, getStartThreadBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt64(9, this.startThrSvrT_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBool(10, this.startThrRedirecte_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(11, getNewStartThrBytes());
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getDbReqIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getXmsReqIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeInt64Size(3, this.currState_);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.threadIds_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.threadIds_.getByteString(i3));
            }
            int size = computeBytesSize + i2 + (getThreadIdsList().size() * 1);
            for (int i4 = 0; i4 < this.threadComments_.size(); i4++) {
                size += CodedOutputStream.computeMessageSize(5, (MessageLite) this.threadComments_.get(i4));
            }
            if ((this.bitField0_ & 8) == 8) {
                size += CodedOutputStream.computeBytesSize(6, getChannelIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeInt32Size(7, this.dir_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeBytesSize(8, getStartThreadBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeInt64Size(9, this.startThrSvrT_);
            }
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeBoolSize(10, this.startThrRedirecte_);
            }
            if ((this.bitField0_ & 256) == 256) {
                size += CodedOutputStream.computeBytesSize(11, getNewStartThrBytes());
            }
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ThreadDataResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static ThreadDataResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static ThreadDataResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static ThreadDataResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static ThreadDataResult parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static ThreadDataResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static ThreadDataResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ThreadDataResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static ThreadDataResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static ThreadDataResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ThreadDataResult threadDataResult) {
            return newBuilder().mergeFrom(threadDataResult);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface ThreadDataResultOrBuilder extends MessageLiteOrBuilder {
        String getChannelId();

        long getCurrState();

        String getDbReqId();

        int getDir();

        String getNewStartThr();

        boolean getStartThrRedirecte();

        long getStartThrSvrT();

        String getStartThread();

        CommentIndexList getThreadComments(int i);

        int getThreadCommentsCount();

        List<CommentIndexList> getThreadCommentsList();

        String getThreadIds(int i);

        int getThreadIdsCount();

        List<String> getThreadIdsList();

        String getXmsReqId();

        boolean hasChannelId();

        boolean hasCurrState();

        boolean hasDbReqId();

        boolean hasDir();

        boolean hasNewStartThr();

        boolean hasStartThrRedirecte();

        boolean hasStartThrSvrT();

        boolean hasStartThread();

        boolean hasXmsReqId();
    }

    public static final class zGroupProperty extends GeneratedMessageLite implements zGroupPropertyOrBuilder {
        public static final int ISMUC_FIELD_NUMBER = 5;
        public static final int ISNEWMEMBERCANSEEMESSAGEHISTORY_FIELD_NUMBER = 4;
        public static final int ISPUBLIC_FIELD_NUMBER = 2;
        public static final int ISRESTRICTSAMEORG_FIELD_NUMBER = 3;
        public static final int NAME_FIELD_NUMBER = 1;
        private static final zGroupProperty defaultInstance = new zGroupProperty(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public boolean isMuc_;
        /* access modifiers changed from: private */
        public boolean isNewMemberCanSeeMessageHistory_;
        /* access modifiers changed from: private */
        public boolean isPublic_;
        /* access modifiers changed from: private */
        public boolean isRestrictSameOrg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object name_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<zGroupProperty, Builder> implements zGroupPropertyOrBuilder {
            private int bitField0_;
            private boolean isMuc_;
            private boolean isNewMemberCanSeeMessageHistory_;
            private boolean isPublic_;
            private boolean isRestrictSameOrg_;
            private Object name_ = "";

            private void maybeForceBuilderInitialization() {
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.name_ = "";
                this.bitField0_ &= -2;
                this.isPublic_ = false;
                this.bitField0_ &= -3;
                this.isRestrictSameOrg_ = false;
                this.bitField0_ &= -5;
                this.isNewMemberCanSeeMessageHistory_ = false;
                this.bitField0_ &= -9;
                this.isMuc_ = false;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public zGroupProperty getDefaultInstanceForType() {
                return zGroupProperty.getDefaultInstance();
            }

            public zGroupProperty build() {
                zGroupProperty buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            /* access modifiers changed from: private */
            public zGroupProperty buildParsed() throws InvalidProtocolBufferException {
                zGroupProperty buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial).asInvalidProtocolBufferException();
            }

            public zGroupProperty buildPartial() {
                zGroupProperty zgroupproperty = new zGroupProperty(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                zgroupproperty.name_ = this.name_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                zgroupproperty.isPublic_ = this.isPublic_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                zgroupproperty.isRestrictSameOrg_ = this.isRestrictSameOrg_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                zgroupproperty.isNewMemberCanSeeMessageHistory_ = this.isNewMemberCanSeeMessageHistory_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                zgroupproperty.isMuc_ = this.isMuc_;
                zgroupproperty.bitField0_ = i2;
                return zgroupproperty;
            }

            public Builder mergeFrom(zGroupProperty zgroupproperty) {
                if (zgroupproperty == zGroupProperty.getDefaultInstance()) {
                    return this;
                }
                if (zgroupproperty.hasName()) {
                    setName(zgroupproperty.getName());
                }
                if (zgroupproperty.hasIsPublic()) {
                    setIsPublic(zgroupproperty.getIsPublic());
                }
                if (zgroupproperty.hasIsRestrictSameOrg()) {
                    setIsRestrictSameOrg(zgroupproperty.getIsRestrictSameOrg());
                }
                if (zgroupproperty.hasIsNewMemberCanSeeMessageHistory()) {
                    setIsNewMemberCanSeeMessageHistory(zgroupproperty.getIsNewMemberCanSeeMessageHistory());
                }
                if (zgroupproperty.hasIsMuc()) {
                    setIsMuc(zgroupproperty.getIsMuc());
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasName() && hasIsPublic() && hasIsRestrictSameOrg() && hasIsNewMemberCanSeeMessageHistory() && hasIsMuc()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                while (true) {
                    int readTag = codedInputStream.readTag();
                    if (readTag == 0) {
                        return this;
                    }
                    if (readTag == 10) {
                        this.bitField0_ |= 1;
                        this.name_ = codedInputStream.readBytes();
                    } else if (readTag == 16) {
                        this.bitField0_ |= 2;
                        this.isPublic_ = codedInputStream.readBool();
                    } else if (readTag == 24) {
                        this.bitField0_ |= 4;
                        this.isRestrictSameOrg_ = codedInputStream.readBool();
                    } else if (readTag == 32) {
                        this.bitField0_ |= 8;
                        this.isNewMemberCanSeeMessageHistory_ = codedInputStream.readBool();
                    } else if (readTag == 40) {
                        this.bitField0_ |= 16;
                        this.isMuc_ = codedInputStream.readBool();
                    } else if (!parseUnknownField(codedInputStream, extensionRegistryLite, readTag)) {
                        return this;
                    }
                }
            }

            public boolean hasName() {
                return (this.bitField0_ & 1) == 1;
            }

            public String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.name_ = str;
                    return this;
                }
                throw new NullPointerException();
            }

            public Builder clearName() {
                this.bitField0_ &= -2;
                this.name_ = zGroupProperty.getDefaultInstance().getName();
                return this;
            }

            /* access modifiers changed from: 0000 */
            public void setName(ByteString byteString) {
                this.bitField0_ |= 1;
                this.name_ = byteString;
            }

            public boolean hasIsPublic() {
                return (this.bitField0_ & 2) == 2;
            }

            public boolean getIsPublic() {
                return this.isPublic_;
            }

            public Builder setIsPublic(boolean z) {
                this.bitField0_ |= 2;
                this.isPublic_ = z;
                return this;
            }

            public Builder clearIsPublic() {
                this.bitField0_ &= -3;
                this.isPublic_ = false;
                return this;
            }

            public boolean hasIsRestrictSameOrg() {
                return (this.bitField0_ & 4) == 4;
            }

            public boolean getIsRestrictSameOrg() {
                return this.isRestrictSameOrg_;
            }

            public Builder setIsRestrictSameOrg(boolean z) {
                this.bitField0_ |= 4;
                this.isRestrictSameOrg_ = z;
                return this;
            }

            public Builder clearIsRestrictSameOrg() {
                this.bitField0_ &= -5;
                this.isRestrictSameOrg_ = false;
                return this;
            }

            public boolean hasIsNewMemberCanSeeMessageHistory() {
                return (this.bitField0_ & 8) == 8;
            }

            public boolean getIsNewMemberCanSeeMessageHistory() {
                return this.isNewMemberCanSeeMessageHistory_;
            }

            public Builder setIsNewMemberCanSeeMessageHistory(boolean z) {
                this.bitField0_ |= 8;
                this.isNewMemberCanSeeMessageHistory_ = z;
                return this;
            }

            public Builder clearIsNewMemberCanSeeMessageHistory() {
                this.bitField0_ &= -9;
                this.isNewMemberCanSeeMessageHistory_ = false;
                return this;
            }

            public boolean hasIsMuc() {
                return (this.bitField0_ & 16) == 16;
            }

            public boolean getIsMuc() {
                return this.isMuc_;
            }

            public Builder setIsMuc(boolean z) {
                this.bitField0_ |= 16;
                this.isMuc_ = z;
                return this;
            }

            public Builder clearIsMuc() {
                this.bitField0_ &= -17;
                this.isMuc_ = false;
                return this;
            }
        }

        private zGroupProperty(Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        private zGroupProperty(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
        }

        public static zGroupProperty getDefaultInstance() {
            return defaultInstance;
        }

        public zGroupProperty getDefaultInstanceForType() {
            return defaultInstance;
        }

        public boolean hasName() {
            return (this.bitField0_ & 1) == 1;
        }

        public String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (Internal.isValidUtf8(byteString)) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        private ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsPublic() {
            return (this.bitField0_ & 2) == 2;
        }

        public boolean getIsPublic() {
            return this.isPublic_;
        }

        public boolean hasIsRestrictSameOrg() {
            return (this.bitField0_ & 4) == 4;
        }

        public boolean getIsRestrictSameOrg() {
            return this.isRestrictSameOrg_;
        }

        public boolean hasIsNewMemberCanSeeMessageHistory() {
            return (this.bitField0_ & 8) == 8;
        }

        public boolean getIsNewMemberCanSeeMessageHistory() {
            return this.isNewMemberCanSeeMessageHistory_;
        }

        public boolean hasIsMuc() {
            return (this.bitField0_ & 16) == 16;
        }

        public boolean getIsMuc() {
            return this.isMuc_;
        }

        private void initFields() {
            this.name_ = "";
            this.isPublic_ = false;
            this.isRestrictSameOrg_ = false;
            this.isNewMemberCanSeeMessageHistory_ = false;
            this.isMuc_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            boolean z = true;
            if (b != -1) {
                if (b != 1) {
                    z = false;
                }
                return z;
            } else if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsPublic()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsRestrictSameOrg()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsNewMemberCanSeeMessageHistory()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsMuc()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBool(2, this.isPublic_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBool(3, this.isRestrictSameOrg_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBool(4, this.isNewMemberCanSeeMessageHistory_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBool(5, this.isMuc_);
            }
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBoolSize(2, this.isPublic_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBoolSize(3, this.isRestrictSameOrg_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBoolSize(4, this.isNewMemberCanSeeMessageHistory_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBoolSize(5, this.isMuc_);
            }
            this.memoizedSerializedSize = i2;
            return i2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static zGroupProperty parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString)).buildParsed();
        }

        public static zGroupProperty parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(byteString, extensionRegistryLite)).buildParsed();
        }

        public static zGroupProperty parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr)).buildParsed();
        }

        public static zGroupProperty parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return ((Builder) newBuilder().mergeFrom(bArr, extensionRegistryLite)).buildParsed();
        }

        public static zGroupProperty parseFrom(InputStream inputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream)).buildParsed();
        }

        public static zGroupProperty parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return ((Builder) newBuilder().mergeFrom(inputStream, extensionRegistryLite)).buildParsed();
        }

        public static zGroupProperty parseDelimitedFrom(InputStream inputStream) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static zGroupProperty parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            Builder newBuilder = newBuilder();
            if (newBuilder.mergeDelimitedFrom(inputStream, extensionRegistryLite)) {
                return newBuilder.buildParsed();
            }
            return null;
        }

        public static zGroupProperty parseFrom(CodedInputStream codedInputStream) throws IOException {
            return ((Builder) newBuilder().mergeFrom(codedInputStream)).buildParsed();
        }

        public static zGroupProperty parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return newBuilder().mergeFrom(codedInputStream, extensionRegistryLite).buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(zGroupProperty zgroupproperty) {
            return newBuilder().mergeFrom(zgroupproperty);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        static {
            defaultInstance.initFields();
        }
    }

    public interface zGroupPropertyOrBuilder extends MessageLiteOrBuilder {
        boolean getIsMuc();

        boolean getIsNewMemberCanSeeMessageHistory();

        boolean getIsPublic();

        boolean getIsRestrictSameOrg();

        String getName();

        boolean hasIsMuc();

        boolean hasIsNewMemberCanSeeMessageHistory();

        boolean hasIsPublic();

        boolean hasIsRestrictSameOrg();

        boolean hasName();
    }

    public static void registerAllExtensions(ExtensionRegistryLite extensionRegistryLite) {
    }

    private IMProtos() {
    }
}
