package com.dropbox.core.p005v2.teamlog;

import androidx.core.view.InputDeviceCompat;
import androidx.recyclerview.widget.ItemTouchHelper.Callback;
import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
import com.dropbox.core.stone.UnionSerializer;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.zipow.videobox.ptapp.DummyPolicyIDType;
import com.zipow.videobox.ptapp.XmppError;
import java.io.IOException;
import java.util.Arrays;
import p021us.zoom.androidlib.widget.recyclerview.ZMBaseRecyclerViewAdapter;

/* renamed from: com.dropbox.core.v2.teamlog.EventType */
public final class EventType {
    public static final EventType OTHER = new EventType().withTag(Tag.OTHER);
    private Tag _tag;
    /* access modifiers changed from: private */
    public AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityValue;
    /* access modifiers changed from: private */
    public AccountCaptureChangePolicyType accountCaptureChangePolicyValue;
    /* access modifiers changed from: private */
    public AccountCaptureMigrateAccountType accountCaptureMigrateAccountValue;
    /* access modifiers changed from: private */
    public AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentValue;
    /* access modifiers changed from: private */
    public AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountValue;
    /* access modifiers changed from: private */
    public AllowDownloadDisabledType allowDownloadDisabledValue;
    /* access modifiers changed from: private */
    public AllowDownloadEnabledType allowDownloadEnabledValue;
    /* access modifiers changed from: private */
    public AppLinkTeamType appLinkTeamValue;
    /* access modifiers changed from: private */
    public AppLinkUserType appLinkUserValue;
    /* access modifiers changed from: private */
    public AppUnlinkTeamType appUnlinkTeamValue;
    /* access modifiers changed from: private */
    public AppUnlinkUserType appUnlinkUserValue;
    /* access modifiers changed from: private */
    public CollectionShareType collectionShareValue;
    /* access modifiers changed from: private */
    public CreateFolderType createFolderValue;
    /* access modifiers changed from: private */
    public DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyValue;
    /* access modifiers changed from: private */
    public DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyValue;
    /* access modifiers changed from: private */
    public DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyValue;
    /* access modifiers changed from: private */
    public DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyValue;
    /* access modifiers changed from: private */
    public DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionValue;
    /* access modifiers changed from: private */
    public DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionValue;
    /* access modifiers changed from: private */
    public DeviceChangeIpDesktopType deviceChangeIpDesktopValue;
    /* access modifiers changed from: private */
    public DeviceChangeIpMobileType deviceChangeIpMobileValue;
    /* access modifiers changed from: private */
    public DeviceChangeIpWebType deviceChangeIpWebValue;
    /* access modifiers changed from: private */
    public DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailValue;
    /* access modifiers changed from: private */
    public DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessValue;
    /* access modifiers changed from: private */
    public DeviceLinkFailType deviceLinkFailValue;
    /* access modifiers changed from: private */
    public DeviceLinkSuccessType deviceLinkSuccessValue;
    /* access modifiers changed from: private */
    public DeviceManagementDisabledType deviceManagementDisabledValue;
    /* access modifiers changed from: private */
    public DeviceManagementEnabledType deviceManagementEnabledValue;
    /* access modifiers changed from: private */
    public DeviceUnlinkType deviceUnlinkValue;
    /* access modifiers changed from: private */
    public DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersValue;
    /* access modifiers changed from: private */
    public DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersValue;
    /* access modifiers changed from: private */
    public DisabledDomainInvitesType disabledDomainInvitesValue;
    /* access modifiers changed from: private */
    public DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamValue;
    /* access modifiers changed from: private */
    public DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamValue;
    /* access modifiers changed from: private */
    public DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersValue;
    /* access modifiers changed from: private */
    public DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamValue;
    /* access modifiers changed from: private */
    public DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoValue;
    /* access modifiers changed from: private */
    public DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesValue;
    /* access modifiers changed from: private */
    public DomainVerificationAddDomainFailType domainVerificationAddDomainFailValue;
    /* access modifiers changed from: private */
    public DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessValue;
    /* access modifiers changed from: private */
    public DomainVerificationRemoveDomainType domainVerificationRemoveDomainValue;
    /* access modifiers changed from: private */
    public EmmAddExceptionType emmAddExceptionValue;
    /* access modifiers changed from: private */
    public EmmChangePolicyType emmChangePolicyValue;
    /* access modifiers changed from: private */
    public EmmCreateExceptionsReportType emmCreateExceptionsReportValue;
    /* access modifiers changed from: private */
    public EmmCreateUsageReportType emmCreateUsageReportValue;
    /* access modifiers changed from: private */
    public EmmErrorType emmErrorValue;
    /* access modifiers changed from: private */
    public EmmRefreshAuthTokenType emmRefreshAuthTokenValue;
    /* access modifiers changed from: private */
    public EmmRemoveExceptionType emmRemoveExceptionValue;
    /* access modifiers changed from: private */
    public EnabledDomainInvitesType enabledDomainInvitesValue;
    /* access modifiers changed from: private */
    public ExportMembersReportType exportMembersReportValue;
    /* access modifiers changed from: private */
    public ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyValue;
    /* access modifiers changed from: private */
    public FileAddCommentType fileAddCommentValue;
    /* access modifiers changed from: private */
    public FileAddType fileAddValue;
    /* access modifiers changed from: private */
    public FileChangeCommentSubscriptionType fileChangeCommentSubscriptionValue;
    /* access modifiers changed from: private */
    public FileCommentsChangePolicyType fileCommentsChangePolicyValue;
    /* access modifiers changed from: private */
    public FileCopyType fileCopyValue;
    /* access modifiers changed from: private */
    public FileDeleteCommentType fileDeleteCommentValue;
    /* access modifiers changed from: private */
    public FileDeleteType fileDeleteValue;
    /* access modifiers changed from: private */
    public FileDownloadType fileDownloadValue;
    /* access modifiers changed from: private */
    public FileEditType fileEditValue;
    /* access modifiers changed from: private */
    public FileGetCopyReferenceType fileGetCopyReferenceValue;
    /* access modifiers changed from: private */
    public FileLikeCommentType fileLikeCommentValue;
    /* access modifiers changed from: private */
    public FileMoveType fileMoveValue;
    /* access modifiers changed from: private */
    public FilePermanentlyDeleteType filePermanentlyDeleteValue;
    /* access modifiers changed from: private */
    public FilePreviewType filePreviewValue;
    /* access modifiers changed from: private */
    public FileRenameType fileRenameValue;
    /* access modifiers changed from: private */
    public FileRequestChangeType fileRequestChangeValue;
    /* access modifiers changed from: private */
    public FileRequestCloseType fileRequestCloseValue;
    /* access modifiers changed from: private */
    public FileRequestCreateType fileRequestCreateValue;
    /* access modifiers changed from: private */
    public FileRequestReceiveFileType fileRequestReceiveFileValue;
    /* access modifiers changed from: private */
    public FileRequestsChangePolicyType fileRequestsChangePolicyValue;
    /* access modifiers changed from: private */
    public FileRequestsEmailsEnabledType fileRequestsEmailsEnabledValue;
    /* access modifiers changed from: private */
    public FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyValue;
    /* access modifiers changed from: private */
    public FileResolveCommentType fileResolveCommentValue;
    /* access modifiers changed from: private */
    public FileRestoreType fileRestoreValue;
    /* access modifiers changed from: private */
    public FileRevertType fileRevertValue;
    /* access modifiers changed from: private */
    public FileRollbackChangesType fileRollbackChangesValue;
    /* access modifiers changed from: private */
    public FileSaveCopyReferenceType fileSaveCopyReferenceValue;
    /* access modifiers changed from: private */
    public FileUnlikeCommentType fileUnlikeCommentValue;
    /* access modifiers changed from: private */
    public FileUnresolveCommentType fileUnresolveCommentValue;
    /* access modifiers changed from: private */
    public GoogleSsoChangePolicyType googleSsoChangePolicyValue;
    /* access modifiers changed from: private */
    public GroupAddExternalIdType groupAddExternalIdValue;
    /* access modifiers changed from: private */
    public GroupAddMemberType groupAddMemberValue;
    /* access modifiers changed from: private */
    public GroupChangeExternalIdType groupChangeExternalIdValue;
    /* access modifiers changed from: private */
    public GroupChangeManagementTypeType groupChangeManagementTypeValue;
    /* access modifiers changed from: private */
    public GroupChangeMemberRoleType groupChangeMemberRoleValue;
    /* access modifiers changed from: private */
    public GroupCreateType groupCreateValue;
    /* access modifiers changed from: private */
    public GroupDeleteType groupDeleteValue;
    /* access modifiers changed from: private */
    public GroupDescriptionUpdatedType groupDescriptionUpdatedValue;
    /* access modifiers changed from: private */
    public GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedValue;
    /* access modifiers changed from: private */
    public GroupMovedType groupMovedValue;
    /* access modifiers changed from: private */
    public GroupRemoveExternalIdType groupRemoveExternalIdValue;
    /* access modifiers changed from: private */
    public GroupRemoveMemberType groupRemoveMemberValue;
    /* access modifiers changed from: private */
    public GroupRenameType groupRenameValue;
    /* access modifiers changed from: private */
    public GroupUserManagementChangePolicyType groupUserManagementChangePolicyValue;
    /* access modifiers changed from: private */
    public LoginFailType loginFailValue;
    /* access modifiers changed from: private */
    public LoginSuccessType loginSuccessValue;
    /* access modifiers changed from: private */
    public LogoutType logoutValue;
    /* access modifiers changed from: private */
    public MemberAddNameType memberAddNameValue;
    /* access modifiers changed from: private */
    public MemberChangeAdminRoleType memberChangeAdminRoleValue;
    /* access modifiers changed from: private */
    public MemberChangeEmailType memberChangeEmailValue;
    /* access modifiers changed from: private */
    public MemberChangeMembershipTypeType memberChangeMembershipTypeValue;
    /* access modifiers changed from: private */
    public MemberChangeNameType memberChangeNameValue;
    /* access modifiers changed from: private */
    public MemberChangeStatusType memberChangeStatusValue;
    /* access modifiers changed from: private */
    public MemberDeleteManualContactsType memberDeleteManualContactsValue;
    /* access modifiers changed from: private */
    public MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsValue;
    /* access modifiers changed from: private */
    public MemberRequestsChangePolicyType memberRequestsChangePolicyValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaValue;
    /* access modifiers changed from: private */
    public MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionValue;
    /* access modifiers changed from: private */
    public MemberSuggestType memberSuggestValue;
    /* access modifiers changed from: private */
    public MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyValue;
    /* access modifiers changed from: private */
    public MemberTransferAccountContentsType memberTransferAccountContentsValue;
    /* access modifiers changed from: private */
    public MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyValue;
    /* access modifiers changed from: private */
    public NetworkControlChangePolicyType networkControlChangePolicyValue;
    /* access modifiers changed from: private */
    public NoteAclInviteOnlyType noteAclInviteOnlyValue;
    /* access modifiers changed from: private */
    public NoteAclLinkType noteAclLinkValue;
    /* access modifiers changed from: private */
    public NoteAclTeamLinkType noteAclTeamLinkValue;
    /* access modifiers changed from: private */
    public NoteShareReceiveType noteShareReceiveValue;
    /* access modifiers changed from: private */
    public NoteSharedType noteSharedValue;
    /* access modifiers changed from: private */
    public OpenNoteSharedType openNoteSharedValue;
    /* access modifiers changed from: private */
    public PaperAdminExportStartType paperAdminExportStartValue;
    /* access modifiers changed from: private */
    public PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyValue;
    /* access modifiers changed from: private */
    public PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyValue;
    /* access modifiers changed from: private */
    public PaperChangeMemberPolicyType paperChangeMemberPolicyValue;
    /* access modifiers changed from: private */
    public PaperChangePolicyType paperChangePolicyValue;
    /* access modifiers changed from: private */
    public PaperContentAddMemberType paperContentAddMemberValue;
    /* access modifiers changed from: private */
    public PaperContentAddToFolderType paperContentAddToFolderValue;
    /* access modifiers changed from: private */
    public PaperContentArchiveType paperContentArchiveValue;
    /* access modifiers changed from: private */
    public PaperContentCreateType paperContentCreateValue;
    /* access modifiers changed from: private */
    public PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteValue;
    /* access modifiers changed from: private */
    public PaperContentRemoveFromFolderType paperContentRemoveFromFolderValue;
    /* access modifiers changed from: private */
    public PaperContentRemoveMemberType paperContentRemoveMemberValue;
    /* access modifiers changed from: private */
    public PaperContentRenameType paperContentRenameValue;
    /* access modifiers changed from: private */
    public PaperContentRestoreType paperContentRestoreValue;
    /* access modifiers changed from: private */
    public PaperDocAddCommentType paperDocAddCommentValue;
    /* access modifiers changed from: private */
    public PaperDocChangeMemberRoleType paperDocChangeMemberRoleValue;
    /* access modifiers changed from: private */
    public PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyValue;
    /* access modifiers changed from: private */
    public PaperDocChangeSubscriptionType paperDocChangeSubscriptionValue;
    /* access modifiers changed from: private */
    public PaperDocDeleteCommentType paperDocDeleteCommentValue;
    /* access modifiers changed from: private */
    public PaperDocDeletedType paperDocDeletedValue;
    /* access modifiers changed from: private */
    public PaperDocDownloadType paperDocDownloadValue;
    /* access modifiers changed from: private */
    public PaperDocEditCommentType paperDocEditCommentValue;
    /* access modifiers changed from: private */
    public PaperDocEditType paperDocEditValue;
    /* access modifiers changed from: private */
    public PaperDocFollowedType paperDocFollowedValue;
    /* access modifiers changed from: private */
    public PaperDocMentionType paperDocMentionValue;
    /* access modifiers changed from: private */
    public PaperDocOwnershipChangedType paperDocOwnershipChangedValue;
    /* access modifiers changed from: private */
    public PaperDocRequestAccessType paperDocRequestAccessValue;
    /* access modifiers changed from: private */
    public PaperDocResolveCommentType paperDocResolveCommentValue;
    /* access modifiers changed from: private */
    public PaperDocRevertType paperDocRevertValue;
    /* access modifiers changed from: private */
    public PaperDocSlackShareType paperDocSlackShareValue;
    /* access modifiers changed from: private */
    public PaperDocTeamInviteType paperDocTeamInviteValue;
    /* access modifiers changed from: private */
    public PaperDocTrashedType paperDocTrashedValue;
    /* access modifiers changed from: private */
    public PaperDocUnresolveCommentType paperDocUnresolveCommentValue;
    /* access modifiers changed from: private */
    public PaperDocUntrashedType paperDocUntrashedValue;
    /* access modifiers changed from: private */
    public PaperDocViewType paperDocViewValue;
    /* access modifiers changed from: private */
    public PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionValue;
    /* access modifiers changed from: private */
    public PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalValue;
    /* access modifiers changed from: private */
    public PaperExternalViewAllowType paperExternalViewAllowValue;
    /* access modifiers changed from: private */
    public PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamValue;
    /* access modifiers changed from: private */
    public PaperExternalViewForbidType paperExternalViewForbidValue;
    /* access modifiers changed from: private */
    public PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionValue;
    /* access modifiers changed from: private */
    public PaperFolderDeletedType paperFolderDeletedValue;
    /* access modifiers changed from: private */
    public PaperFolderFollowedType paperFolderFollowedValue;
    /* access modifiers changed from: private */
    public PaperFolderTeamInviteType paperFolderTeamInviteValue;
    /* access modifiers changed from: private */
    public PasswordChangeType passwordChangeValue;
    /* access modifiers changed from: private */
    public PasswordResetAllType passwordResetAllValue;
    /* access modifiers changed from: private */
    public PasswordResetType passwordResetValue;
    /* access modifiers changed from: private */
    public PermanentDeleteChangePolicyType permanentDeleteChangePolicyValue;
    /* access modifiers changed from: private */
    public ResellerSupportSessionEndType resellerSupportSessionEndValue;
    /* access modifiers changed from: private */
    public ResellerSupportSessionStartType resellerSupportSessionStartValue;
    /* access modifiers changed from: private */
    public SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedValue;
    /* access modifiers changed from: private */
    public SfAddGroupType sfAddGroupValue;
    /* access modifiers changed from: private */
    public SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksValue;
    /* access modifiers changed from: private */
    public SfExternalInviteWarnType sfExternalInviteWarnValue;
    /* access modifiers changed from: private */
    public SfFbInviteChangeRoleType sfFbInviteChangeRoleValue;
    /* access modifiers changed from: private */
    public SfFbInviteType sfFbInviteValue;
    /* access modifiers changed from: private */
    public SfFbUninviteType sfFbUninviteValue;
    /* access modifiers changed from: private */
    public SfInviteGroupType sfInviteGroupValue;
    /* access modifiers changed from: private */
    public SfTeamGrantAccessType sfTeamGrantAccessValue;
    /* access modifiers changed from: private */
    public SfTeamInviteChangeRoleType sfTeamInviteChangeRoleValue;
    /* access modifiers changed from: private */
    public SfTeamInviteType sfTeamInviteValue;
    /* access modifiers changed from: private */
    public SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkValue;
    /* access modifiers changed from: private */
    public SfTeamJoinType sfTeamJoinValue;
    /* access modifiers changed from: private */
    public SfTeamUninviteType sfTeamUninviteValue;
    /* access modifiers changed from: private */
    public SharedContentAddInviteesType sharedContentAddInviteesValue;
    /* access modifiers changed from: private */
    public SharedContentAddLinkExpiryType sharedContentAddLinkExpiryValue;
    /* access modifiers changed from: private */
    public SharedContentAddLinkPasswordType sharedContentAddLinkPasswordValue;
    /* access modifiers changed from: private */
    public SharedContentAddMemberType sharedContentAddMemberValue;
    /* access modifiers changed from: private */
    public SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyValue;
    /* access modifiers changed from: private */
    public SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleValue;
    /* access modifiers changed from: private */
    public SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceValue;
    /* access modifiers changed from: private */
    public SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryValue;
    /* access modifiers changed from: private */
    public SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordValue;
    /* access modifiers changed from: private */
    public SharedContentChangeMemberRoleType sharedContentChangeMemberRoleValue;
    /* access modifiers changed from: private */
    public SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyValue;
    /* access modifiers changed from: private */
    public SharedContentClaimInvitationType sharedContentClaimInvitationValue;
    /* access modifiers changed from: private */
    public SharedContentCopyType sharedContentCopyValue;
    /* access modifiers changed from: private */
    public SharedContentDownloadType sharedContentDownloadValue;
    /* access modifiers changed from: private */
    public SharedContentRelinquishMembershipType sharedContentRelinquishMembershipValue;
    /* access modifiers changed from: private */
    public SharedContentRemoveInviteesType sharedContentRemoveInviteesValue;
    /* access modifiers changed from: private */
    public SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryValue;
    /* access modifiers changed from: private */
    public SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordValue;
    /* access modifiers changed from: private */
    public SharedContentRemoveMemberType sharedContentRemoveMemberValue;
    /* access modifiers changed from: private */
    public SharedContentRequestAccessType sharedContentRequestAccessValue;
    /* access modifiers changed from: private */
    public SharedContentUnshareType sharedContentUnshareValue;
    /* access modifiers changed from: private */
    public SharedContentViewType sharedContentViewValue;
    /* access modifiers changed from: private */
    public SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyValue;
    /* access modifiers changed from: private */
    public SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyValue;
    /* access modifiers changed from: private */
    public SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyValue;
    /* access modifiers changed from: private */
    public SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyValue;
    /* access modifiers changed from: private */
    public SharedFolderCreateType sharedFolderCreateValue;
    /* access modifiers changed from: private */
    public SharedFolderDeclineInvitationType sharedFolderDeclineInvitationValue;
    /* access modifiers changed from: private */
    public SharedFolderMountType sharedFolderMountValue;
    /* access modifiers changed from: private */
    public SharedFolderNestType sharedFolderNestValue;
    /* access modifiers changed from: private */
    public SharedFolderTransferOwnershipType sharedFolderTransferOwnershipValue;
    /* access modifiers changed from: private */
    public SharedFolderUnmountType sharedFolderUnmountValue;
    /* access modifiers changed from: private */
    public SharedLinkAddExpiryType sharedLinkAddExpiryValue;
    /* access modifiers changed from: private */
    public SharedLinkChangeExpiryType sharedLinkChangeExpiryValue;
    /* access modifiers changed from: private */
    public SharedLinkChangeVisibilityType sharedLinkChangeVisibilityValue;
    /* access modifiers changed from: private */
    public SharedLinkCopyType sharedLinkCopyValue;
    /* access modifiers changed from: private */
    public SharedLinkCreateType sharedLinkCreateValue;
    /* access modifiers changed from: private */
    public SharedLinkDisableType sharedLinkDisableValue;
    /* access modifiers changed from: private */
    public SharedLinkDownloadType sharedLinkDownloadValue;
    /* access modifiers changed from: private */
    public SharedLinkRemoveExpiryType sharedLinkRemoveExpiryValue;
    /* access modifiers changed from: private */
    public SharedLinkShareType sharedLinkShareValue;
    /* access modifiers changed from: private */
    public SharedLinkViewType sharedLinkViewValue;
    /* access modifiers changed from: private */
    public SharedNoteOpenedType sharedNoteOpenedValue;
    /* access modifiers changed from: private */
    public SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyValue;
    /* access modifiers changed from: private */
    public SharingChangeLinkPolicyType sharingChangeLinkPolicyValue;
    /* access modifiers changed from: private */
    public SharingChangeMemberPolicyType sharingChangeMemberPolicyValue;
    /* access modifiers changed from: private */
    public ShmodelGroupShareType shmodelGroupShareValue;
    /* access modifiers changed from: private */
    public ShowcaseAccessGrantedType showcaseAccessGrantedValue;
    /* access modifiers changed from: private */
    public ShowcaseAddMemberType showcaseAddMemberValue;
    /* access modifiers changed from: private */
    public ShowcaseArchivedType showcaseArchivedValue;
    /* access modifiers changed from: private */
    public ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyValue;
    /* access modifiers changed from: private */
    public ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyValue;
    /* access modifiers changed from: private */
    public ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyValue;
    /* access modifiers changed from: private */
    public ShowcaseCreatedType showcaseCreatedValue;
    /* access modifiers changed from: private */
    public ShowcaseDeleteCommentType showcaseDeleteCommentValue;
    /* access modifiers changed from: private */
    public ShowcaseEditCommentType showcaseEditCommentValue;
    /* access modifiers changed from: private */
    public ShowcaseEditedType showcaseEditedValue;
    /* access modifiers changed from: private */
    public ShowcaseFileAddedType showcaseFileAddedValue;
    /* access modifiers changed from: private */
    public ShowcaseFileDownloadType showcaseFileDownloadValue;
    /* access modifiers changed from: private */
    public ShowcaseFileRemovedType showcaseFileRemovedValue;
    /* access modifiers changed from: private */
    public ShowcaseFileViewType showcaseFileViewValue;
    /* access modifiers changed from: private */
    public ShowcasePermanentlyDeletedType showcasePermanentlyDeletedValue;
    /* access modifiers changed from: private */
    public ShowcasePostCommentType showcasePostCommentValue;
    /* access modifiers changed from: private */
    public ShowcaseRemoveMemberType showcaseRemoveMemberValue;
    /* access modifiers changed from: private */
    public ShowcaseRenamedType showcaseRenamedValue;
    /* access modifiers changed from: private */
    public ShowcaseRequestAccessType showcaseRequestAccessValue;
    /* access modifiers changed from: private */
    public ShowcaseResolveCommentType showcaseResolveCommentValue;
    /* access modifiers changed from: private */
    public ShowcaseRestoredType showcaseRestoredValue;
    /* access modifiers changed from: private */
    public ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedValue;
    /* access modifiers changed from: private */
    public ShowcaseTrashedType showcaseTrashedValue;
    /* access modifiers changed from: private */
    public ShowcaseUnresolveCommentType showcaseUnresolveCommentValue;
    /* access modifiers changed from: private */
    public ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedValue;
    /* access modifiers changed from: private */
    public ShowcaseUntrashedType showcaseUntrashedValue;
    /* access modifiers changed from: private */
    public ShowcaseViewType showcaseViewValue;
    /* access modifiers changed from: private */
    public SignInAsSessionEndType signInAsSessionEndValue;
    /* access modifiers changed from: private */
    public SignInAsSessionStartType signInAsSessionStartValue;
    /* access modifiers changed from: private */
    public SmartSyncChangePolicyType smartSyncChangePolicyValue;
    /* access modifiers changed from: private */
    public SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportValue;
    /* access modifiers changed from: private */
    public SmartSyncNotOptOutType smartSyncNotOptOutValue;
    /* access modifiers changed from: private */
    public SmartSyncOptOutType smartSyncOptOutValue;
    /* access modifiers changed from: private */
    public SsoAddCertType ssoAddCertValue;
    /* access modifiers changed from: private */
    public SsoAddLoginUrlType ssoAddLoginUrlValue;
    /* access modifiers changed from: private */
    public SsoAddLogoutUrlType ssoAddLogoutUrlValue;
    /* access modifiers changed from: private */
    public SsoChangeCertType ssoChangeCertValue;
    /* access modifiers changed from: private */
    public SsoChangeLoginUrlType ssoChangeLoginUrlValue;
    /* access modifiers changed from: private */
    public SsoChangeLogoutUrlType ssoChangeLogoutUrlValue;
    /* access modifiers changed from: private */
    public SsoChangePolicyType ssoChangePolicyValue;
    /* access modifiers changed from: private */
    public SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeValue;
    /* access modifiers changed from: private */
    public SsoErrorType ssoErrorValue;
    /* access modifiers changed from: private */
    public SsoRemoveCertType ssoRemoveCertValue;
    /* access modifiers changed from: private */
    public SsoRemoveLoginUrlType ssoRemoveLoginUrlValue;
    /* access modifiers changed from: private */
    public SsoRemoveLogoutUrlType ssoRemoveLogoutUrlValue;
    /* access modifiers changed from: private */
    public TeamActivityCreateReportType teamActivityCreateReportValue;
    /* access modifiers changed from: private */
    public TeamFolderChangeStatusType teamFolderChangeStatusValue;
    /* access modifiers changed from: private */
    public TeamFolderCreateType teamFolderCreateValue;
    /* access modifiers changed from: private */
    public TeamFolderDowngradeType teamFolderDowngradeValue;
    /* access modifiers changed from: private */
    public TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteValue;
    /* access modifiers changed from: private */
    public TeamFolderRenameType teamFolderRenameValue;
    /* access modifiers changed from: private */
    public TeamMergeFromType teamMergeFromValue;
    /* access modifiers changed from: private */
    public TeamMergeToType teamMergeToValue;
    /* access modifiers changed from: private */
    public TeamProfileAddLogoType teamProfileAddLogoValue;
    /* access modifiers changed from: private */
    public TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageValue;
    /* access modifiers changed from: private */
    public TeamProfileChangeLogoType teamProfileChangeLogoValue;
    /* access modifiers changed from: private */
    public TeamProfileChangeNameType teamProfileChangeNameValue;
    /* access modifiers changed from: private */
    public TeamProfileRemoveLogoType teamProfileRemoveLogoValue;
    /* access modifiers changed from: private */
    public TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedValue;
    /* access modifiers changed from: private */
    public TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedValue;
    /* access modifiers changed from: private */
    public TfaAddBackupPhoneType tfaAddBackupPhoneValue;
    /* access modifiers changed from: private */
    public TfaAddSecurityKeyType tfaAddSecurityKeyValue;
    /* access modifiers changed from: private */
    public TfaChangeBackupPhoneType tfaChangeBackupPhoneValue;
    /* access modifiers changed from: private */
    public TfaChangePolicyType tfaChangePolicyValue;
    /* access modifiers changed from: private */
    public TfaChangeStatusType tfaChangeStatusValue;
    /* access modifiers changed from: private */
    public TfaRemoveBackupPhoneType tfaRemoveBackupPhoneValue;
    /* access modifiers changed from: private */
    public TfaRemoveSecurityKeyType tfaRemoveSecurityKeyValue;
    /* access modifiers changed from: private */
    public TfaResetType tfaResetValue;
    /* access modifiers changed from: private */
    public TwoAccountChangePolicyType twoAccountChangePolicyValue;
    /* access modifiers changed from: private */
    public ViewerInfoPolicyChangedType viewerInfoPolicyChangedValue;
    /* access modifiers changed from: private */
    public WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyValue;
    /* access modifiers changed from: private */
    public WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyValue;

    /* renamed from: com.dropbox.core.v2.teamlog.EventType$1 */
    static /* synthetic */ class C08951 {
        static final /* synthetic */ int[] $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag = new int[Tag.values().length];

        /*  JADX ERROR: JadxRuntimeException in pass: RegionMakerVisitor
            jadx.core.utils.exceptions.JadxRuntimeException: Regions count limit reached
            	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:89)
            	at jadx.core.dex.visitors.regions.RegionMaker.processExcHandler(RegionMaker.java:1041)
            	at jadx.core.dex.visitors.regions.RegionMaker.processTryCatchBlocks(RegionMaker.java:973)
            	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:52)
            	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
            	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
            	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
            	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
            	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$0(DepthTraversal.java:13)
            	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
            	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:13)
            	at jadx.core.ProcessClass.process(ProcessClass.java:30)
            	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:311)
            	at jadx.api.JavaClass.decompile(JavaClass.java:62)
            	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:217)
            */
        /* JADX WARNING: Missing exception handler attribute for start block: B:115:0x02ae */
        /* JADX WARNING: Missing exception handler attribute for start block: B:117:0x02ba */
        /* JADX WARNING: Missing exception handler attribute for start block: B:119:0x02c6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:121:0x02d2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:123:0x02de */
        /* JADX WARNING: Missing exception handler attribute for start block: B:125:0x02ea */
        /* JADX WARNING: Missing exception handler attribute for start block: B:127:0x02f6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:137:0x0332 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:139:0x033e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:141:0x034a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:143:0x0356 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:145:0x0362 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:147:0x036e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:149:0x037a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:151:0x0386 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:153:0x0392 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:155:0x039e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:157:0x03aa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:159:0x03b6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:161:0x03c2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:163:0x03ce */
        /* JADX WARNING: Missing exception handler attribute for start block: B:165:0x03da */
        /* JADX WARNING: Missing exception handler attribute for start block: B:167:0x03e6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:169:0x03f2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:171:0x03fe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:173:0x040a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:175:0x0416 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:177:0x0422 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:201:0x04b2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:203:0x04be */
        /* JADX WARNING: Missing exception handler attribute for start block: B:205:0x04ca */
        /* JADX WARNING: Missing exception handler attribute for start block: B:207:0x04d6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:209:0x04e2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:211:0x04ee */
        /* JADX WARNING: Missing exception handler attribute for start block: B:221:0x052a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:223:0x0536 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:225:0x0542 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:227:0x054e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:229:0x055a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:231:0x0566 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:233:0x0572 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:235:0x057e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:237:0x058a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:239:0x0596 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:241:0x05a2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:243:0x05ae */
        /* JADX WARNING: Missing exception handler attribute for start block: B:245:0x05ba */
        /* JADX WARNING: Missing exception handler attribute for start block: B:247:0x05c6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:249:0x05d2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:251:0x05de */
        /* JADX WARNING: Missing exception handler attribute for start block: B:253:0x05ea */
        /* JADX WARNING: Missing exception handler attribute for start block: B:255:0x05f6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:257:0x0602 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:259:0x060e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:261:0x061a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:263:0x0626 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:285:0x06aa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:287:0x06b6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:289:0x06c2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:291:0x06ce */
        /* JADX WARNING: Missing exception handler attribute for start block: B:293:0x06da */
        /* JADX WARNING: Missing exception handler attribute for start block: B:295:0x06e6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:297:0x06f2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:299:0x06fe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:29:0x00aa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:307:0x072e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:309:0x073a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:311:0x0746 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:313:0x0752 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:315:0x075e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:317:0x076a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:319:0x0776 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:31:0x00b6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:321:0x0782 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:323:0x078e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:325:0x079a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:327:0x07a6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:329:0x07b2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:331:0x07be */
        /* JADX WARNING: Missing exception handler attribute for start block: B:333:0x07ca */
        /* JADX WARNING: Missing exception handler attribute for start block: B:335:0x07d6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:337:0x07e2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:339:0x07ee */
        /* JADX WARNING: Missing exception handler attribute for start block: B:33:0x00c2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:341:0x07fa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:343:0x0806 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:345:0x0812 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:347:0x081e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:35:0x00ce */
        /* JADX WARNING: Missing exception handler attribute for start block: B:371:0x08ae */
        /* JADX WARNING: Missing exception handler attribute for start block: B:373:0x08ba */
        /* JADX WARNING: Missing exception handler attribute for start block: B:375:0x08c6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:377:0x08d2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:379:0x08de */
        /* JADX WARNING: Missing exception handler attribute for start block: B:37:0x00da */
        /* JADX WARNING: Missing exception handler attribute for start block: B:381:0x08ea */
        /* JADX WARNING: Missing exception handler attribute for start block: B:383:0x08f6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:393:0x0932 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:395:0x093e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:397:0x094a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:399:0x0956 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:39:0x00e6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0014 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:401:0x0962 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:403:0x096e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:405:0x097a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:407:0x0986 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:409:0x0992 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:411:0x099e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:413:0x09aa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:415:0x09b6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:417:0x09c2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:419:0x09ce */
        /* JADX WARNING: Missing exception handler attribute for start block: B:41:0x00f2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:421:0x09da */
        /* JADX WARNING: Missing exception handler attribute for start block: B:423:0x09e6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:425:0x09f2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:427:0x09fe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:429:0x0a0a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:431:0x0a16 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:433:0x0a22 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:43:0x00fe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:457:0x0ab2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:459:0x0abe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:461:0x0aca */
        /* JADX WARNING: Missing exception handler attribute for start block: B:463:0x0ad6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:465:0x0ae2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:467:0x0aee */
        /* JADX WARNING: Missing exception handler attribute for start block: B:477:0x0b2a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:479:0x0b36 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:481:0x0b42 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:483:0x0b4e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:485:0x0b5a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:487:0x0b66 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:489:0x0b72 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:491:0x0b7e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:493:0x0b8a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:495:0x0b96 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:497:0x0ba2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:499:0x0bae */
        /* JADX WARNING: Missing exception handler attribute for start block: B:501:0x0bba */
        /* JADX WARNING: Missing exception handler attribute for start block: B:503:0x0bc6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:505:0x0bd2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:507:0x0bde */
        /* JADX WARNING: Missing exception handler attribute for start block: B:509:0x0bea */
        /* JADX WARNING: Missing exception handler attribute for start block: B:511:0x0bf6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:513:0x0c02 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:515:0x0c0e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:517:0x0c1a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:519:0x0c26 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:51:0x012e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:53:0x013a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:541:0x0caa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:543:0x0cb6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:545:0x0cc2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:547:0x0cce */
        /* JADX WARNING: Missing exception handler attribute for start block: B:549:0x0cda */
        /* JADX WARNING: Missing exception handler attribute for start block: B:551:0x0ce6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:553:0x0cf2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:555:0x0cfe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:55:0x0146 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:563:0x0d2e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:565:0x0d3a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:567:0x0d46 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:569:0x0d52 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:571:0x0d5e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:573:0x0d6a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:575:0x0d76 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:577:0x0d82 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:579:0x0d8e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:57:0x0152 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:581:0x0d9a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:583:0x0da6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:585:0x0db2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:587:0x0dbe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:589:0x0dca */
        /* JADX WARNING: Missing exception handler attribute for start block: B:591:0x0dd6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:593:0x0de2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:595:0x0dee */
        /* JADX WARNING: Missing exception handler attribute for start block: B:597:0x0dfa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:599:0x0e06 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:59:0x015e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:5:0x001f */
        /* JADX WARNING: Missing exception handler attribute for start block: B:601:0x0e12 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:603:0x0e1e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:61:0x016a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:63:0x0176 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:65:0x0182 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:67:0x018e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:69:0x019a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:71:0x01a6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:73:0x01b2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:75:0x01be */
        /* JADX WARNING: Missing exception handler attribute for start block: B:77:0x01ca */
        /* JADX WARNING: Missing exception handler attribute for start block: B:79:0x01d6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:81:0x01e2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:83:0x01ee */
        /* JADX WARNING: Missing exception handler attribute for start block: B:85:0x01fa */
        /* JADX WARNING: Missing exception handler attribute for start block: B:87:0x0206 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:89:0x0212 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:91:0x021e */
        static {
            /*
                com.dropbox.core.v2.teamlog.EventType$Tag[] r0 = com.dropbox.core.p005v2.teamlog.EventType.Tag.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag = r0
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0014 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.APP_LINK_TEAM     // Catch:{ NoSuchFieldError -> 0x0014 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0014 }
                r2 = 1     // Catch:{ NoSuchFieldError -> 0x0014 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0014 }
            L_0x0014:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x001f }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.APP_LINK_USER     // Catch:{ NoSuchFieldError -> 0x001f }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x001f }
                r2 = 2     // Catch:{ NoSuchFieldError -> 0x001f }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x001f }
            L_0x001f:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x002a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.APP_UNLINK_TEAM     // Catch:{ NoSuchFieldError -> 0x002a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x002a }
                r2 = 3     // Catch:{ NoSuchFieldError -> 0x002a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x002a }
            L_0x002a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0035 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.APP_UNLINK_USER     // Catch:{ NoSuchFieldError -> 0x0035 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0035 }
                r2 = 4     // Catch:{ NoSuchFieldError -> 0x0035 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0035 }
            L_0x0035:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0040 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_ADD_COMMENT     // Catch:{ NoSuchFieldError -> 0x0040 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0040 }
                r2 = 5     // Catch:{ NoSuchFieldError -> 0x0040 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0040 }
            L_0x0040:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x004b }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION     // Catch:{ NoSuchFieldError -> 0x004b }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x004b }
                r2 = 6     // Catch:{ NoSuchFieldError -> 0x004b }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x004b }
            L_0x004b:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0056 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_DELETE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0056 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0056 }
                r2 = 7     // Catch:{ NoSuchFieldError -> 0x0056 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0056 }
            L_0x0056:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0062 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_LIKE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0062 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0062 }
                r2 = 8     // Catch:{ NoSuchFieldError -> 0x0062 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0062 }
            L_0x0062:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x006e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_RESOLVE_COMMENT     // Catch:{ NoSuchFieldError -> 0x006e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x006e }
                r2 = 9     // Catch:{ NoSuchFieldError -> 0x006e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x006e }
            L_0x006e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x007a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_UNLIKE_COMMENT     // Catch:{ NoSuchFieldError -> 0x007a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x007a }
                r2 = 10     // Catch:{ NoSuchFieldError -> 0x007a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x007a }
            L_0x007a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0086 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_UNRESOLVE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0086 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0086 }
                r2 = 11     // Catch:{ NoSuchFieldError -> 0x0086 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0086 }
            L_0x0086:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0092 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_CHANGE_IP_DESKTOP     // Catch:{ NoSuchFieldError -> 0x0092 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0092 }
                r2 = 12     // Catch:{ NoSuchFieldError -> 0x0092 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0092 }
            L_0x0092:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x009e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_CHANGE_IP_MOBILE     // Catch:{ NoSuchFieldError -> 0x009e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x009e }
                r2 = 13     // Catch:{ NoSuchFieldError -> 0x009e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x009e }
            L_0x009e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00aa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_CHANGE_IP_WEB     // Catch:{ NoSuchFieldError -> 0x00aa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00aa }
                r2 = 14     // Catch:{ NoSuchFieldError -> 0x00aa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00aa }
            L_0x00aa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00b6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_DELETE_ON_UNLINK_FAIL     // Catch:{ NoSuchFieldError -> 0x00b6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00b6 }
                r2 = 15     // Catch:{ NoSuchFieldError -> 0x00b6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00b6 }
            L_0x00b6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00c2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS     // Catch:{ NoSuchFieldError -> 0x00c2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00c2 }
                r2 = 16     // Catch:{ NoSuchFieldError -> 0x00c2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00c2 }
            L_0x00c2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00ce }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_LINK_FAIL     // Catch:{ NoSuchFieldError -> 0x00ce }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00ce }
                r2 = 17     // Catch:{ NoSuchFieldError -> 0x00ce }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00ce }
            L_0x00ce:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00da }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_LINK_SUCCESS     // Catch:{ NoSuchFieldError -> 0x00da }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00da }
                r2 = 18     // Catch:{ NoSuchFieldError -> 0x00da }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00da }
            L_0x00da:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00e6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_MANAGEMENT_DISABLED     // Catch:{ NoSuchFieldError -> 0x00e6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00e6 }
                r2 = 19     // Catch:{ NoSuchFieldError -> 0x00e6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00e6 }
            L_0x00e6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00f2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_MANAGEMENT_ENABLED     // Catch:{ NoSuchFieldError -> 0x00f2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00f2 }
                r2 = 20     // Catch:{ NoSuchFieldError -> 0x00f2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00f2 }
            L_0x00f2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x00fe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_UNLINK     // Catch:{ NoSuchFieldError -> 0x00fe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x00fe }
                r2 = 21     // Catch:{ NoSuchFieldError -> 0x00fe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x00fe }
            L_0x00fe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x010a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_REFRESH_AUTH_TOKEN     // Catch:{ NoSuchFieldError -> 0x010a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x010a }
                r2 = 22     // Catch:{ NoSuchFieldError -> 0x010a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x010a }
            L_0x010a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0116 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY     // Catch:{ NoSuchFieldError -> 0x0116 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0116 }
                r2 = 23     // Catch:{ NoSuchFieldError -> 0x0116 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0116 }
            L_0x0116:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0122 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT     // Catch:{ NoSuchFieldError -> 0x0122 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0122 }
                r2 = 24     // Catch:{ NoSuchFieldError -> 0x0122 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0122 }
            L_0x0122:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x012e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT     // Catch:{ NoSuchFieldError -> 0x012e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x012e }
                r2 = 25     // Catch:{ NoSuchFieldError -> 0x012e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x012e }
            L_0x012e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x013a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT     // Catch:{ NoSuchFieldError -> 0x013a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x013a }
                r2 = 26     // Catch:{ NoSuchFieldError -> 0x013a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x013a }
            L_0x013a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0146 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DISABLED_DOMAIN_INVITES     // Catch:{ NoSuchFieldError -> 0x0146 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0146 }
                r2 = 27     // Catch:{ NoSuchFieldError -> 0x0146 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0146 }
            L_0x0146:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0152 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM     // Catch:{ NoSuchFieldError -> 0x0152 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0152 }
                r2 = 28     // Catch:{ NoSuchFieldError -> 0x0152 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0152 }
            L_0x0152:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x015e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM     // Catch:{ NoSuchFieldError -> 0x015e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x015e }
                r2 = 29     // Catch:{ NoSuchFieldError -> 0x015e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x015e }
            L_0x015e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x016a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS     // Catch:{ NoSuchFieldError -> 0x016a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x016a }
                r2 = 30     // Catch:{ NoSuchFieldError -> 0x016a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x016a }
            L_0x016a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0176 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM     // Catch:{ NoSuchFieldError -> 0x0176 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0176 }
                r2 = 31     // Catch:{ NoSuchFieldError -> 0x0176 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0176 }
            L_0x0176:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0182 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO     // Catch:{ NoSuchFieldError -> 0x0182 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0182 }
                r2 = 32     // Catch:{ NoSuchFieldError -> 0x0182 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0182 }
            L_0x0182:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x018e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES     // Catch:{ NoSuchFieldError -> 0x018e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x018e }
                r2 = 33     // Catch:{ NoSuchFieldError -> 0x018e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x018e }
            L_0x018e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x019a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL     // Catch:{ NoSuchFieldError -> 0x019a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x019a }
                r2 = 34     // Catch:{ NoSuchFieldError -> 0x019a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x019a }
            L_0x019a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01a6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS     // Catch:{ NoSuchFieldError -> 0x01a6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01a6 }
                r2 = 35     // Catch:{ NoSuchFieldError -> 0x01a6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01a6 }
            L_0x01a6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01b2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN     // Catch:{ NoSuchFieldError -> 0x01b2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01b2 }
                r2 = 36     // Catch:{ NoSuchFieldError -> 0x01b2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01b2 }
            L_0x01b2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01be }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ENABLED_DOMAIN_INVITES     // Catch:{ NoSuchFieldError -> 0x01be }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01be }
                r2 = 37     // Catch:{ NoSuchFieldError -> 0x01be }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01be }
            L_0x01be:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01ca }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.CREATE_FOLDER     // Catch:{ NoSuchFieldError -> 0x01ca }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ca }
                r2 = 38     // Catch:{ NoSuchFieldError -> 0x01ca }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01ca }
            L_0x01ca:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01d6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_ADD     // Catch:{ NoSuchFieldError -> 0x01d6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01d6 }
                r2 = 39     // Catch:{ NoSuchFieldError -> 0x01d6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01d6 }
            L_0x01d6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01e2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_COPY     // Catch:{ NoSuchFieldError -> 0x01e2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01e2 }
                r2 = 40     // Catch:{ NoSuchFieldError -> 0x01e2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01e2 }
            L_0x01e2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01ee }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_DELETE     // Catch:{ NoSuchFieldError -> 0x01ee }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ee }
                r2 = 41     // Catch:{ NoSuchFieldError -> 0x01ee }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01ee }
            L_0x01ee:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x01fa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_DOWNLOAD     // Catch:{ NoSuchFieldError -> 0x01fa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x01fa }
                r2 = 42     // Catch:{ NoSuchFieldError -> 0x01fa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x01fa }
            L_0x01fa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0206 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_EDIT     // Catch:{ NoSuchFieldError -> 0x0206 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0206 }
                r2 = 43     // Catch:{ NoSuchFieldError -> 0x0206 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0206 }
            L_0x0206:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0212 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_GET_COPY_REFERENCE     // Catch:{ NoSuchFieldError -> 0x0212 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0212 }
                r2 = 44     // Catch:{ NoSuchFieldError -> 0x0212 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0212 }
            L_0x0212:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x021e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_MOVE     // Catch:{ NoSuchFieldError -> 0x021e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x021e }
                r2 = 45     // Catch:{ NoSuchFieldError -> 0x021e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x021e }
            L_0x021e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x022a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_PERMANENTLY_DELETE     // Catch:{ NoSuchFieldError -> 0x022a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x022a }
                r2 = 46     // Catch:{ NoSuchFieldError -> 0x022a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x022a }
            L_0x022a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0236 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_PREVIEW     // Catch:{ NoSuchFieldError -> 0x0236 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0236 }
                r2 = 47     // Catch:{ NoSuchFieldError -> 0x0236 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0236 }
            L_0x0236:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0242 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_RENAME     // Catch:{ NoSuchFieldError -> 0x0242 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0242 }
                r2 = 48     // Catch:{ NoSuchFieldError -> 0x0242 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0242 }
            L_0x0242:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x024e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_RESTORE     // Catch:{ NoSuchFieldError -> 0x024e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x024e }
                r2 = 49     // Catch:{ NoSuchFieldError -> 0x024e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x024e }
            L_0x024e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x025a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REVERT     // Catch:{ NoSuchFieldError -> 0x025a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x025a }
                r2 = 50     // Catch:{ NoSuchFieldError -> 0x025a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x025a }
            L_0x025a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0266 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_ROLLBACK_CHANGES     // Catch:{ NoSuchFieldError -> 0x0266 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0266 }
                r2 = 51     // Catch:{ NoSuchFieldError -> 0x0266 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0266 }
            L_0x0266:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0272 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_SAVE_COPY_REFERENCE     // Catch:{ NoSuchFieldError -> 0x0272 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0272 }
                r2 = 52     // Catch:{ NoSuchFieldError -> 0x0272 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0272 }
            L_0x0272:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x027e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUEST_CHANGE     // Catch:{ NoSuchFieldError -> 0x027e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x027e }
                r2 = 53     // Catch:{ NoSuchFieldError -> 0x027e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x027e }
            L_0x027e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x028a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUEST_CLOSE     // Catch:{ NoSuchFieldError -> 0x028a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x028a }
                r2 = 54     // Catch:{ NoSuchFieldError -> 0x028a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x028a }
            L_0x028a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0296 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUEST_CREATE     // Catch:{ NoSuchFieldError -> 0x0296 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0296 }
                r2 = 55     // Catch:{ NoSuchFieldError -> 0x0296 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0296 }
            L_0x0296:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02a2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUEST_RECEIVE_FILE     // Catch:{ NoSuchFieldError -> 0x02a2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02a2 }
                r2 = 56     // Catch:{ NoSuchFieldError -> 0x02a2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02a2 }
            L_0x02a2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02ae }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_ADD_EXTERNAL_ID     // Catch:{ NoSuchFieldError -> 0x02ae }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ae }
                r2 = 57     // Catch:{ NoSuchFieldError -> 0x02ae }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02ae }
            L_0x02ae:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02ba }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_ADD_MEMBER     // Catch:{ NoSuchFieldError -> 0x02ba }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ba }
                r2 = 58     // Catch:{ NoSuchFieldError -> 0x02ba }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02ba }
            L_0x02ba:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02c6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_CHANGE_EXTERNAL_ID     // Catch:{ NoSuchFieldError -> 0x02c6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02c6 }
                r2 = 59     // Catch:{ NoSuchFieldError -> 0x02c6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02c6 }
            L_0x02c6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02d2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_CHANGE_MANAGEMENT_TYPE     // Catch:{ NoSuchFieldError -> 0x02d2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02d2 }
                r2 = 60     // Catch:{ NoSuchFieldError -> 0x02d2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02d2 }
            L_0x02d2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02de }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_CHANGE_MEMBER_ROLE     // Catch:{ NoSuchFieldError -> 0x02de }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02de }
                r2 = 61     // Catch:{ NoSuchFieldError -> 0x02de }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02de }
            L_0x02de:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02ea }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_CREATE     // Catch:{ NoSuchFieldError -> 0x02ea }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ea }
                r2 = 62     // Catch:{ NoSuchFieldError -> 0x02ea }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02ea }
            L_0x02ea:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x02f6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_DELETE     // Catch:{ NoSuchFieldError -> 0x02f6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x02f6 }
                r2 = 63     // Catch:{ NoSuchFieldError -> 0x02f6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x02f6 }
            L_0x02f6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0302 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_DESCRIPTION_UPDATED     // Catch:{ NoSuchFieldError -> 0x0302 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0302 }
                r2 = 64     // Catch:{ NoSuchFieldError -> 0x0302 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0302 }
            L_0x0302:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x030e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_JOIN_POLICY_UPDATED     // Catch:{ NoSuchFieldError -> 0x030e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x030e }
                r2 = 65     // Catch:{ NoSuchFieldError -> 0x030e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x030e }
            L_0x030e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x031a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_MOVED     // Catch:{ NoSuchFieldError -> 0x031a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x031a }
                r2 = 66     // Catch:{ NoSuchFieldError -> 0x031a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x031a }
            L_0x031a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0326 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_REMOVE_EXTERNAL_ID     // Catch:{ NoSuchFieldError -> 0x0326 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0326 }
                r2 = 67     // Catch:{ NoSuchFieldError -> 0x0326 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0326 }
            L_0x0326:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0332 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_REMOVE_MEMBER     // Catch:{ NoSuchFieldError -> 0x0332 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0332 }
                r2 = 68     // Catch:{ NoSuchFieldError -> 0x0332 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0332 }
            L_0x0332:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x033e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_RENAME     // Catch:{ NoSuchFieldError -> 0x033e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x033e }
                r2 = 69     // Catch:{ NoSuchFieldError -> 0x033e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x033e }
            L_0x033e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x034a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_ERROR     // Catch:{ NoSuchFieldError -> 0x034a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x034a }
                r2 = 70     // Catch:{ NoSuchFieldError -> 0x034a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x034a }
            L_0x034a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0356 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.LOGIN_FAIL     // Catch:{ NoSuchFieldError -> 0x0356 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0356 }
                r2 = 71     // Catch:{ NoSuchFieldError -> 0x0356 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0356 }
            L_0x0356:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0362 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.LOGIN_SUCCESS     // Catch:{ NoSuchFieldError -> 0x0362 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0362 }
                r2 = 72     // Catch:{ NoSuchFieldError -> 0x0362 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0362 }
            L_0x0362:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x036e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.LOGOUT     // Catch:{ NoSuchFieldError -> 0x036e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x036e }
                r2 = 73     // Catch:{ NoSuchFieldError -> 0x036e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x036e }
            L_0x036e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x037a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.RESELLER_SUPPORT_SESSION_END     // Catch:{ NoSuchFieldError -> 0x037a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x037a }
                r2 = 74     // Catch:{ NoSuchFieldError -> 0x037a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x037a }
            L_0x037a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0386 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.RESELLER_SUPPORT_SESSION_START     // Catch:{ NoSuchFieldError -> 0x0386 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0386 }
                r2 = 75     // Catch:{ NoSuchFieldError -> 0x0386 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0386 }
            L_0x0386:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0392 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SIGN_IN_AS_SESSION_END     // Catch:{ NoSuchFieldError -> 0x0392 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0392 }
                r2 = 76     // Catch:{ NoSuchFieldError -> 0x0392 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0392 }
            L_0x0392:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x039e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SIGN_IN_AS_SESSION_START     // Catch:{ NoSuchFieldError -> 0x039e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x039e }
                r2 = 77     // Catch:{ NoSuchFieldError -> 0x039e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x039e }
            L_0x039e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03aa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_ERROR     // Catch:{ NoSuchFieldError -> 0x03aa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03aa }
                r2 = 78     // Catch:{ NoSuchFieldError -> 0x03aa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03aa }
            L_0x03aa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03b6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_ADD_NAME     // Catch:{ NoSuchFieldError -> 0x03b6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03b6 }
                r2 = 79     // Catch:{ NoSuchFieldError -> 0x03b6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03b6 }
            L_0x03b6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03c2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_CHANGE_ADMIN_ROLE     // Catch:{ NoSuchFieldError -> 0x03c2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03c2 }
                r2 = 80     // Catch:{ NoSuchFieldError -> 0x03c2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03c2 }
            L_0x03c2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03ce }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_CHANGE_EMAIL     // Catch:{ NoSuchFieldError -> 0x03ce }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03ce }
                r2 = 81     // Catch:{ NoSuchFieldError -> 0x03ce }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03ce }
            L_0x03ce:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03da }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE     // Catch:{ NoSuchFieldError -> 0x03da }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03da }
                r2 = 82     // Catch:{ NoSuchFieldError -> 0x03da }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03da }
            L_0x03da:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03e6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_CHANGE_NAME     // Catch:{ NoSuchFieldError -> 0x03e6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03e6 }
                r2 = 83     // Catch:{ NoSuchFieldError -> 0x03e6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03e6 }
            L_0x03e6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03f2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_CHANGE_STATUS     // Catch:{ NoSuchFieldError -> 0x03f2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03f2 }
                r2 = 84     // Catch:{ NoSuchFieldError -> 0x03f2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03f2 }
            L_0x03f2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x03fe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_DELETE_MANUAL_CONTACTS     // Catch:{ NoSuchFieldError -> 0x03fe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x03fe }
                r2 = 85     // Catch:{ NoSuchFieldError -> 0x03fe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x03fe }
            L_0x03fe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x040a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS     // Catch:{ NoSuchFieldError -> 0x040a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x040a }
                r2 = 86     // Catch:{ NoSuchFieldError -> 0x040a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x040a }
            L_0x040a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0416 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA     // Catch:{ NoSuchFieldError -> 0x0416 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0416 }
                r2 = 87     // Catch:{ NoSuchFieldError -> 0x0416 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0416 }
            L_0x0416:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0422 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA     // Catch:{ NoSuchFieldError -> 0x0422 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0422 }
                r2 = 88     // Catch:{ NoSuchFieldError -> 0x0422 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0422 }
            L_0x0422:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x042e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS     // Catch:{ NoSuchFieldError -> 0x042e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x042e }
                r2 = 89     // Catch:{ NoSuchFieldError -> 0x042e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x042e }
            L_0x042e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x043a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA     // Catch:{ NoSuchFieldError -> 0x043a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x043a }
                r2 = 90     // Catch:{ NoSuchFieldError -> 0x043a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x043a }
            L_0x043a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0446 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SUGGEST     // Catch:{ NoSuchFieldError -> 0x0446 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0446 }
                r2 = 91     // Catch:{ NoSuchFieldError -> 0x0446 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0446 }
            L_0x0446:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0452 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS     // Catch:{ NoSuchFieldError -> 0x0452 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0452 }
                r2 = 92     // Catch:{ NoSuchFieldError -> 0x0452 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0452 }
            L_0x0452:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x045e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SECONDARY_MAILS_POLICY_CHANGED     // Catch:{ NoSuchFieldError -> 0x045e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x045e }
                r2 = 93     // Catch:{ NoSuchFieldError -> 0x045e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x045e }
            L_0x045e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x046a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_ADD_MEMBER     // Catch:{ NoSuchFieldError -> 0x046a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x046a }
                r2 = 94     // Catch:{ NoSuchFieldError -> 0x046a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x046a }
            L_0x046a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0476 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_ADD_TO_FOLDER     // Catch:{ NoSuchFieldError -> 0x0476 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0476 }
                r2 = 95     // Catch:{ NoSuchFieldError -> 0x0476 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0476 }
            L_0x0476:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0482 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_ARCHIVE     // Catch:{ NoSuchFieldError -> 0x0482 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0482 }
                r2 = 96     // Catch:{ NoSuchFieldError -> 0x0482 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0482 }
            L_0x0482:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x048e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_CREATE     // Catch:{ NoSuchFieldError -> 0x048e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x048e }
                r2 = 97     // Catch:{ NoSuchFieldError -> 0x048e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x048e }
            L_0x048e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x049a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_PERMANENTLY_DELETE     // Catch:{ NoSuchFieldError -> 0x049a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x049a }
                r2 = 98     // Catch:{ NoSuchFieldError -> 0x049a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x049a }
            L_0x049a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04a6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER     // Catch:{ NoSuchFieldError -> 0x04a6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04a6 }
                r2 = 99     // Catch:{ NoSuchFieldError -> 0x04a6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04a6 }
            L_0x04a6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04b2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_REMOVE_MEMBER     // Catch:{ NoSuchFieldError -> 0x04b2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04b2 }
                r2 = 100     // Catch:{ NoSuchFieldError -> 0x04b2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04b2 }
            L_0x04b2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04be }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_RENAME     // Catch:{ NoSuchFieldError -> 0x04be }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04be }
                r2 = 101(0x65, float:1.42E-43)     // Catch:{ NoSuchFieldError -> 0x04be }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04be }
            L_0x04be:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04ca }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CONTENT_RESTORE     // Catch:{ NoSuchFieldError -> 0x04ca }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04ca }
                r2 = 102(0x66, float:1.43E-43)     // Catch:{ NoSuchFieldError -> 0x04ca }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04ca }
            L_0x04ca:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04d6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_ADD_COMMENT     // Catch:{ NoSuchFieldError -> 0x04d6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04d6 }
                r2 = 103(0x67, float:1.44E-43)     // Catch:{ NoSuchFieldError -> 0x04d6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04d6 }
            L_0x04d6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04e2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_CHANGE_MEMBER_ROLE     // Catch:{ NoSuchFieldError -> 0x04e2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04e2 }
                r2 = 104(0x68, float:1.46E-43)     // Catch:{ NoSuchFieldError -> 0x04e2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04e2 }
            L_0x04e2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04ee }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_CHANGE_SHARING_POLICY     // Catch:{ NoSuchFieldError -> 0x04ee }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04ee }
                r2 = 105(0x69, float:1.47E-43)     // Catch:{ NoSuchFieldError -> 0x04ee }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04ee }
            L_0x04ee:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x04fa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_CHANGE_SUBSCRIPTION     // Catch:{ NoSuchFieldError -> 0x04fa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04fa }
                r2 = 106(0x6a, float:1.49E-43)     // Catch:{ NoSuchFieldError -> 0x04fa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04fa }
            L_0x04fa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0506 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_DELETED     // Catch:{ NoSuchFieldError -> 0x0506 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0506 }
                r2 = 107(0x6b, float:1.5E-43)     // Catch:{ NoSuchFieldError -> 0x0506 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0506 }
            L_0x0506:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0512 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_DELETE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0512 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0512 }
                r2 = 108(0x6c, float:1.51E-43)     // Catch:{ NoSuchFieldError -> 0x0512 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0512 }
            L_0x0512:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x051e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_DOWNLOAD     // Catch:{ NoSuchFieldError -> 0x051e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x051e }
                r2 = 109(0x6d, float:1.53E-43)     // Catch:{ NoSuchFieldError -> 0x051e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x051e }
            L_0x051e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x052a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_EDIT     // Catch:{ NoSuchFieldError -> 0x052a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x052a }
                r2 = 110(0x6e, float:1.54E-43)     // Catch:{ NoSuchFieldError -> 0x052a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x052a }
            L_0x052a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0536 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_EDIT_COMMENT     // Catch:{ NoSuchFieldError -> 0x0536 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0536 }
                r2 = 111(0x6f, float:1.56E-43)     // Catch:{ NoSuchFieldError -> 0x0536 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0536 }
            L_0x0536:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0542 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_FOLLOWED     // Catch:{ NoSuchFieldError -> 0x0542 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0542 }
                r2 = 112(0x70, float:1.57E-43)     // Catch:{ NoSuchFieldError -> 0x0542 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0542 }
            L_0x0542:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x054e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_MENTION     // Catch:{ NoSuchFieldError -> 0x054e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x054e }
                r2 = 113(0x71, float:1.58E-43)     // Catch:{ NoSuchFieldError -> 0x054e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x054e }
            L_0x054e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x055a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_OWNERSHIP_CHANGED     // Catch:{ NoSuchFieldError -> 0x055a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x055a }
                r2 = 114(0x72, float:1.6E-43)     // Catch:{ NoSuchFieldError -> 0x055a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x055a }
            L_0x055a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0566 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_REQUEST_ACCESS     // Catch:{ NoSuchFieldError -> 0x0566 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0566 }
                r2 = 115(0x73, float:1.61E-43)     // Catch:{ NoSuchFieldError -> 0x0566 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0566 }
            L_0x0566:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0572 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_RESOLVE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0572 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0572 }
                r2 = 116(0x74, float:1.63E-43)     // Catch:{ NoSuchFieldError -> 0x0572 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0572 }
            L_0x0572:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x057e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_REVERT     // Catch:{ NoSuchFieldError -> 0x057e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x057e }
                r2 = 117(0x75, float:1.64E-43)     // Catch:{ NoSuchFieldError -> 0x057e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x057e }
            L_0x057e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x058a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_SLACK_SHARE     // Catch:{ NoSuchFieldError -> 0x058a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x058a }
                r2 = 118(0x76, float:1.65E-43)     // Catch:{ NoSuchFieldError -> 0x058a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x058a }
            L_0x058a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0596 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_TEAM_INVITE     // Catch:{ NoSuchFieldError -> 0x0596 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0596 }
                r2 = 119(0x77, float:1.67E-43)     // Catch:{ NoSuchFieldError -> 0x0596 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0596 }
            L_0x0596:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05a2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_TRASHED     // Catch:{ NoSuchFieldError -> 0x05a2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05a2 }
                r2 = 120(0x78, float:1.68E-43)     // Catch:{ NoSuchFieldError -> 0x05a2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05a2 }
            L_0x05a2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05ae }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_UNRESOLVE_COMMENT     // Catch:{ NoSuchFieldError -> 0x05ae }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05ae }
                r2 = 121(0x79, float:1.7E-43)     // Catch:{ NoSuchFieldError -> 0x05ae }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05ae }
            L_0x05ae:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05ba }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_UNTRASHED     // Catch:{ NoSuchFieldError -> 0x05ba }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05ba }
                r2 = 122(0x7a, float:1.71E-43)     // Catch:{ NoSuchFieldError -> 0x05ba }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05ba }
            L_0x05ba:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05c6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_DOC_VIEW     // Catch:{ NoSuchFieldError -> 0x05c6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05c6 }
                r2 = 123(0x7b, float:1.72E-43)     // Catch:{ NoSuchFieldError -> 0x05c6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05c6 }
            L_0x05c6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05d2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_EXTERNAL_VIEW_ALLOW     // Catch:{ NoSuchFieldError -> 0x05d2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05d2 }
                r2 = 124(0x7c, float:1.74E-43)     // Catch:{ NoSuchFieldError -> 0x05d2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05d2 }
            L_0x05d2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05de }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM     // Catch:{ NoSuchFieldError -> 0x05de }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05de }
                r2 = 125(0x7d, float:1.75E-43)     // Catch:{ NoSuchFieldError -> 0x05de }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05de }
            L_0x05de:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05ea }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_EXTERNAL_VIEW_FORBID     // Catch:{ NoSuchFieldError -> 0x05ea }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05ea }
                r2 = 126(0x7e, float:1.77E-43)     // Catch:{ NoSuchFieldError -> 0x05ea }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05ea }
            L_0x05ea:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x05f6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION     // Catch:{ NoSuchFieldError -> 0x05f6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x05f6 }
                r2 = 127(0x7f, float:1.78E-43)     // Catch:{ NoSuchFieldError -> 0x05f6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x05f6 }
            L_0x05f6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0602 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_FOLDER_DELETED     // Catch:{ NoSuchFieldError -> 0x0602 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0602 }
                r2 = 128(0x80, float:1.794E-43)     // Catch:{ NoSuchFieldError -> 0x0602 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0602 }
            L_0x0602:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x060e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_FOLDER_FOLLOWED     // Catch:{ NoSuchFieldError -> 0x060e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x060e }
                r2 = 129(0x81, float:1.81E-43)     // Catch:{ NoSuchFieldError -> 0x060e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x060e }
            L_0x060e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x061a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_FOLDER_TEAM_INVITE     // Catch:{ NoSuchFieldError -> 0x061a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x061a }
                r2 = 130(0x82, float:1.82E-43)     // Catch:{ NoSuchFieldError -> 0x061a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x061a }
            L_0x061a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0626 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PASSWORD_CHANGE     // Catch:{ NoSuchFieldError -> 0x0626 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0626 }
                r2 = 131(0x83, float:1.84E-43)     // Catch:{ NoSuchFieldError -> 0x0626 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0626 }
            L_0x0626:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0632 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PASSWORD_RESET     // Catch:{ NoSuchFieldError -> 0x0632 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0632 }
                r2 = 132(0x84, float:1.85E-43)     // Catch:{ NoSuchFieldError -> 0x0632 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0632 }
            L_0x0632:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x063e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PASSWORD_RESET_ALL     // Catch:{ NoSuchFieldError -> 0x063e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x063e }
                r2 = 133(0x85, float:1.86E-43)     // Catch:{ NoSuchFieldError -> 0x063e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x063e }
            L_0x063e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x064a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_CREATE_EXCEPTIONS_REPORT     // Catch:{ NoSuchFieldError -> 0x064a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x064a }
                r2 = 134(0x86, float:1.88E-43)     // Catch:{ NoSuchFieldError -> 0x064a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x064a }
            L_0x064a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0656 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_CREATE_USAGE_REPORT     // Catch:{ NoSuchFieldError -> 0x0656 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0656 }
                r2 = 135(0x87, float:1.89E-43)     // Catch:{ NoSuchFieldError -> 0x0656 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0656 }
            L_0x0656:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0662 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EXPORT_MEMBERS_REPORT     // Catch:{ NoSuchFieldError -> 0x0662 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0662 }
                r2 = 136(0x88, float:1.9E-43)     // Catch:{ NoSuchFieldError -> 0x0662 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0662 }
            L_0x0662:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x066e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_ADMIN_EXPORT_START     // Catch:{ NoSuchFieldError -> 0x066e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x066e }
                r2 = 137(0x89, float:1.92E-43)     // Catch:{ NoSuchFieldError -> 0x066e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x066e }
            L_0x066e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x067a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT     // Catch:{ NoSuchFieldError -> 0x067a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x067a }
                r2 = 138(0x8a, float:1.93E-43)     // Catch:{ NoSuchFieldError -> 0x067a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x067a }
            L_0x067a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0686 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_ACTIVITY_CREATE_REPORT     // Catch:{ NoSuchFieldError -> 0x0686 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0686 }
                r2 = 139(0x8b, float:1.95E-43)     // Catch:{ NoSuchFieldError -> 0x0686 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0686 }
            L_0x0686:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0692 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.COLLECTION_SHARE     // Catch:{ NoSuchFieldError -> 0x0692 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0692 }
                r2 = 140(0x8c, float:1.96E-43)     // Catch:{ NoSuchFieldError -> 0x0692 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0692 }
            L_0x0692:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x069e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.NOTE_ACL_INVITE_ONLY     // Catch:{ NoSuchFieldError -> 0x069e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x069e }
                r2 = 141(0x8d, float:1.98E-43)     // Catch:{ NoSuchFieldError -> 0x069e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x069e }
            L_0x069e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06aa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.NOTE_ACL_LINK     // Catch:{ NoSuchFieldError -> 0x06aa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06aa }
                r2 = 142(0x8e, float:1.99E-43)     // Catch:{ NoSuchFieldError -> 0x06aa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06aa }
            L_0x06aa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06b6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.NOTE_ACL_TEAM_LINK     // Catch:{ NoSuchFieldError -> 0x06b6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06b6 }
                r2 = 143(0x8f, float:2.0E-43)     // Catch:{ NoSuchFieldError -> 0x06b6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06b6 }
            L_0x06b6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06c2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.NOTE_SHARED     // Catch:{ NoSuchFieldError -> 0x06c2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06c2 }
                r2 = 144(0x90, float:2.02E-43)     // Catch:{ NoSuchFieldError -> 0x06c2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06c2 }
            L_0x06c2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06ce }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.NOTE_SHARE_RECEIVE     // Catch:{ NoSuchFieldError -> 0x06ce }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06ce }
                r2 = 145(0x91, float:2.03E-43)     // Catch:{ NoSuchFieldError -> 0x06ce }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06ce }
            L_0x06ce:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06da }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.OPEN_NOTE_SHARED     // Catch:{ NoSuchFieldError -> 0x06da }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06da }
                r2 = 146(0x92, float:2.05E-43)     // Catch:{ NoSuchFieldError -> 0x06da }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06da }
            L_0x06da:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06e6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_ADD_GROUP     // Catch:{ NoSuchFieldError -> 0x06e6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06e6 }
                r2 = 147(0x93, float:2.06E-43)     // Catch:{ NoSuchFieldError -> 0x06e6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06e6 }
            L_0x06e6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06f2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS     // Catch:{ NoSuchFieldError -> 0x06f2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06f2 }
                r2 = 148(0x94, float:2.07E-43)     // Catch:{ NoSuchFieldError -> 0x06f2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06f2 }
            L_0x06f2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x06fe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_EXTERNAL_INVITE_WARN     // Catch:{ NoSuchFieldError -> 0x06fe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x06fe }
                r2 = 149(0x95, float:2.09E-43)     // Catch:{ NoSuchFieldError -> 0x06fe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x06fe }
            L_0x06fe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x070a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_FB_INVITE     // Catch:{ NoSuchFieldError -> 0x070a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x070a }
                r2 = 150(0x96, float:2.1E-43)     // Catch:{ NoSuchFieldError -> 0x070a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x070a }
            L_0x070a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0716 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_FB_INVITE_CHANGE_ROLE     // Catch:{ NoSuchFieldError -> 0x0716 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0716 }
                r2 = 151(0x97, float:2.12E-43)     // Catch:{ NoSuchFieldError -> 0x0716 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0716 }
            L_0x0716:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0722 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_FB_UNINVITE     // Catch:{ NoSuchFieldError -> 0x0722 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0722 }
                r2 = 152(0x98, float:2.13E-43)     // Catch:{ NoSuchFieldError -> 0x0722 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0722 }
            L_0x0722:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x072e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_INVITE_GROUP     // Catch:{ NoSuchFieldError -> 0x072e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x072e }
                r2 = 153(0x99, float:2.14E-43)     // Catch:{ NoSuchFieldError -> 0x072e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x072e }
            L_0x072e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x073a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_TEAM_GRANT_ACCESS     // Catch:{ NoSuchFieldError -> 0x073a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x073a }
                r2 = 154(0x9a, float:2.16E-43)     // Catch:{ NoSuchFieldError -> 0x073a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x073a }
            L_0x073a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0746 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_TEAM_INVITE     // Catch:{ NoSuchFieldError -> 0x0746 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0746 }
                r2 = 155(0x9b, float:2.17E-43)     // Catch:{ NoSuchFieldError -> 0x0746 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0746 }
            L_0x0746:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0752 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_TEAM_INVITE_CHANGE_ROLE     // Catch:{ NoSuchFieldError -> 0x0752 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0752 }
                r2 = 156(0x9c, float:2.19E-43)     // Catch:{ NoSuchFieldError -> 0x0752 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0752 }
            L_0x0752:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x075e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_TEAM_JOIN     // Catch:{ NoSuchFieldError -> 0x075e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x075e }
                r2 = 157(0x9d, float:2.2E-43)     // Catch:{ NoSuchFieldError -> 0x075e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x075e }
            L_0x075e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x076a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_TEAM_JOIN_FROM_OOB_LINK     // Catch:{ NoSuchFieldError -> 0x076a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x076a }
                r2 = 158(0x9e, float:2.21E-43)     // Catch:{ NoSuchFieldError -> 0x076a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x076a }
            L_0x076a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0776 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SF_TEAM_UNINVITE     // Catch:{ NoSuchFieldError -> 0x0776 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0776 }
                r2 = 159(0x9f, float:2.23E-43)     // Catch:{ NoSuchFieldError -> 0x0776 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0776 }
            L_0x0776:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0782 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_ADD_INVITEES     // Catch:{ NoSuchFieldError -> 0x0782 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0782 }
                r2 = 160(0xa0, float:2.24E-43)     // Catch:{ NoSuchFieldError -> 0x0782 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0782 }
            L_0x0782:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x078e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_ADD_LINK_EXPIRY     // Catch:{ NoSuchFieldError -> 0x078e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x078e }
                r2 = 161(0xa1, float:2.26E-43)     // Catch:{ NoSuchFieldError -> 0x078e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x078e }
            L_0x078e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x079a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_ADD_LINK_PASSWORD     // Catch:{ NoSuchFieldError -> 0x079a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x079a }
                r2 = 162(0xa2, float:2.27E-43)     // Catch:{ NoSuchFieldError -> 0x079a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x079a }
            L_0x079a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07a6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_ADD_MEMBER     // Catch:{ NoSuchFieldError -> 0x07a6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07a6 }
                r2 = 163(0xa3, float:2.28E-43)     // Catch:{ NoSuchFieldError -> 0x07a6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07a6 }
            L_0x07a6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07b2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY     // Catch:{ NoSuchFieldError -> 0x07b2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07b2 }
                r2 = 164(0xa4, float:2.3E-43)     // Catch:{ NoSuchFieldError -> 0x07b2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07b2 }
            L_0x07b2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07be }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE     // Catch:{ NoSuchFieldError -> 0x07be }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07be }
                r2 = 165(0xa5, float:2.31E-43)     // Catch:{ NoSuchFieldError -> 0x07be }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07be }
            L_0x07be:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07ca }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE     // Catch:{ NoSuchFieldError -> 0x07ca }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07ca }
                r2 = 166(0xa6, float:2.33E-43)     // Catch:{ NoSuchFieldError -> 0x07ca }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07ca }
            L_0x07ca:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07d6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY     // Catch:{ NoSuchFieldError -> 0x07d6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07d6 }
                r2 = 167(0xa7, float:2.34E-43)     // Catch:{ NoSuchFieldError -> 0x07d6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07d6 }
            L_0x07d6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07e2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD     // Catch:{ NoSuchFieldError -> 0x07e2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07e2 }
                r2 = 168(0xa8, float:2.35E-43)     // Catch:{ NoSuchFieldError -> 0x07e2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07e2 }
            L_0x07e2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07ee }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE     // Catch:{ NoSuchFieldError -> 0x07ee }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07ee }
                r2 = 169(0xa9, float:2.37E-43)     // Catch:{ NoSuchFieldError -> 0x07ee }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07ee }
            L_0x07ee:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x07fa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY     // Catch:{ NoSuchFieldError -> 0x07fa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x07fa }
                r2 = 170(0xaa, float:2.38E-43)     // Catch:{ NoSuchFieldError -> 0x07fa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x07fa }
            L_0x07fa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0806 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_CLAIM_INVITATION     // Catch:{ NoSuchFieldError -> 0x0806 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0806 }
                r2 = 171(0xab, float:2.4E-43)     // Catch:{ NoSuchFieldError -> 0x0806 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0806 }
            L_0x0806:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0812 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_COPY     // Catch:{ NoSuchFieldError -> 0x0812 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0812 }
                r2 = 172(0xac, float:2.41E-43)     // Catch:{ NoSuchFieldError -> 0x0812 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0812 }
            L_0x0812:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x081e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_DOWNLOAD     // Catch:{ NoSuchFieldError -> 0x081e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x081e }
                r2 = 173(0xad, float:2.42E-43)     // Catch:{ NoSuchFieldError -> 0x081e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x081e }
            L_0x081e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x082a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP     // Catch:{ NoSuchFieldError -> 0x082a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x082a }
                r2 = 174(0xae, float:2.44E-43)     // Catch:{ NoSuchFieldError -> 0x082a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x082a }
            L_0x082a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0836 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_REMOVE_INVITEES     // Catch:{ NoSuchFieldError -> 0x0836 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0836 }
                r2 = 175(0xaf, float:2.45E-43)     // Catch:{ NoSuchFieldError -> 0x0836 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0836 }
            L_0x0836:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0842 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY     // Catch:{ NoSuchFieldError -> 0x0842 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0842 }
                r2 = 176(0xb0, float:2.47E-43)     // Catch:{ NoSuchFieldError -> 0x0842 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0842 }
            L_0x0842:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x084e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD     // Catch:{ NoSuchFieldError -> 0x084e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x084e }
                r2 = 177(0xb1, float:2.48E-43)     // Catch:{ NoSuchFieldError -> 0x084e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x084e }
            L_0x084e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x085a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_REMOVE_MEMBER     // Catch:{ NoSuchFieldError -> 0x085a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x085a }
                r2 = 178(0xb2, float:2.5E-43)     // Catch:{ NoSuchFieldError -> 0x085a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x085a }
            L_0x085a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0866 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_REQUEST_ACCESS     // Catch:{ NoSuchFieldError -> 0x0866 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0866 }
                r2 = 179(0xb3, float:2.51E-43)     // Catch:{ NoSuchFieldError -> 0x0866 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0866 }
            L_0x0866:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0872 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_UNSHARE     // Catch:{ NoSuchFieldError -> 0x0872 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0872 }
                r2 = 180(0xb4, float:2.52E-43)     // Catch:{ NoSuchFieldError -> 0x0872 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0872 }
            L_0x0872:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x087e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_CONTENT_VIEW     // Catch:{ NoSuchFieldError -> 0x087e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x087e }
                r2 = 181(0xb5, float:2.54E-43)     // Catch:{ NoSuchFieldError -> 0x087e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x087e }
            L_0x087e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x088a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_CHANGE_LINK_POLICY     // Catch:{ NoSuchFieldError -> 0x088a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x088a }
                r2 = 182(0xb6, float:2.55E-43)     // Catch:{ NoSuchFieldError -> 0x088a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x088a }
            L_0x088a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0896 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY     // Catch:{ NoSuchFieldError -> 0x0896 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0896 }
                r2 = 183(0xb7, float:2.56E-43)     // Catch:{ NoSuchFieldError -> 0x0896 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0896 }
            L_0x0896:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08a2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY     // Catch:{ NoSuchFieldError -> 0x08a2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08a2 }
                r2 = 184(0xb8, float:2.58E-43)     // Catch:{ NoSuchFieldError -> 0x08a2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08a2 }
            L_0x08a2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08ae }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY     // Catch:{ NoSuchFieldError -> 0x08ae }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08ae }
                r2 = 185(0xb9, float:2.59E-43)     // Catch:{ NoSuchFieldError -> 0x08ae }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08ae }
            L_0x08ae:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08ba }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_CREATE     // Catch:{ NoSuchFieldError -> 0x08ba }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08ba }
                r2 = 186(0xba, float:2.6E-43)     // Catch:{ NoSuchFieldError -> 0x08ba }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08ba }
            L_0x08ba:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08c6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_DECLINE_INVITATION     // Catch:{ NoSuchFieldError -> 0x08c6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08c6 }
                r2 = 187(0xbb, float:2.62E-43)     // Catch:{ NoSuchFieldError -> 0x08c6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08c6 }
            L_0x08c6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08d2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_MOUNT     // Catch:{ NoSuchFieldError -> 0x08d2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08d2 }
                r2 = 188(0xbc, float:2.63E-43)     // Catch:{ NoSuchFieldError -> 0x08d2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08d2 }
            L_0x08d2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08de }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_NEST     // Catch:{ NoSuchFieldError -> 0x08de }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08de }
                r2 = 189(0xbd, float:2.65E-43)     // Catch:{ NoSuchFieldError -> 0x08de }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08de }
            L_0x08de:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08ea }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP     // Catch:{ NoSuchFieldError -> 0x08ea }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08ea }
                r2 = 190(0xbe, float:2.66E-43)     // Catch:{ NoSuchFieldError -> 0x08ea }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08ea }
            L_0x08ea:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x08f6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_FOLDER_UNMOUNT     // Catch:{ NoSuchFieldError -> 0x08f6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x08f6 }
                r2 = 191(0xbf, float:2.68E-43)     // Catch:{ NoSuchFieldError -> 0x08f6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x08f6 }
            L_0x08f6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0902 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_ADD_EXPIRY     // Catch:{ NoSuchFieldError -> 0x0902 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0902 }
                r2 = 192(0xc0, float:2.69E-43)     // Catch:{ NoSuchFieldError -> 0x0902 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0902 }
            L_0x0902:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x090e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_CHANGE_EXPIRY     // Catch:{ NoSuchFieldError -> 0x090e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x090e }
                r2 = 193(0xc1, float:2.7E-43)     // Catch:{ NoSuchFieldError -> 0x090e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x090e }
            L_0x090e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x091a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_CHANGE_VISIBILITY     // Catch:{ NoSuchFieldError -> 0x091a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x091a }
                r2 = 194(0xc2, float:2.72E-43)     // Catch:{ NoSuchFieldError -> 0x091a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x091a }
            L_0x091a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0926 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_COPY     // Catch:{ NoSuchFieldError -> 0x0926 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0926 }
                r2 = 195(0xc3, float:2.73E-43)     // Catch:{ NoSuchFieldError -> 0x0926 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0926 }
            L_0x0926:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0932 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_CREATE     // Catch:{ NoSuchFieldError -> 0x0932 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0932 }
                r2 = 196(0xc4, float:2.75E-43)     // Catch:{ NoSuchFieldError -> 0x0932 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0932 }
            L_0x0932:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x093e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_DISABLE     // Catch:{ NoSuchFieldError -> 0x093e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x093e }
                r2 = 197(0xc5, float:2.76E-43)     // Catch:{ NoSuchFieldError -> 0x093e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x093e }
            L_0x093e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x094a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_DOWNLOAD     // Catch:{ NoSuchFieldError -> 0x094a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x094a }
                r2 = 198(0xc6, float:2.77E-43)     // Catch:{ NoSuchFieldError -> 0x094a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x094a }
            L_0x094a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0956 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_REMOVE_EXPIRY     // Catch:{ NoSuchFieldError -> 0x0956 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0956 }
                r2 = 199(0xc7, float:2.79E-43)     // Catch:{ NoSuchFieldError -> 0x0956 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0956 }
            L_0x0956:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0962 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_SHARE     // Catch:{ NoSuchFieldError -> 0x0962 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0962 }
                r2 = 200(0xc8, float:2.8E-43)     // Catch:{ NoSuchFieldError -> 0x0962 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0962 }
            L_0x0962:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x096e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_LINK_VIEW     // Catch:{ NoSuchFieldError -> 0x096e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x096e }
                r2 = 201(0xc9, float:2.82E-43)     // Catch:{ NoSuchFieldError -> 0x096e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x096e }
            L_0x096e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x097a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARED_NOTE_OPENED     // Catch:{ NoSuchFieldError -> 0x097a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x097a }
                r2 = 202(0xca, float:2.83E-43)     // Catch:{ NoSuchFieldError -> 0x097a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x097a }
            L_0x097a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0986 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHMODEL_GROUP_SHARE     // Catch:{ NoSuchFieldError -> 0x0986 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0986 }
                r2 = 203(0xcb, float:2.84E-43)     // Catch:{ NoSuchFieldError -> 0x0986 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0986 }
            L_0x0986:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0992 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_ACCESS_GRANTED     // Catch:{ NoSuchFieldError -> 0x0992 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0992 }
                r2 = 204(0xcc, float:2.86E-43)     // Catch:{ NoSuchFieldError -> 0x0992 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0992 }
            L_0x0992:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x099e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_ADD_MEMBER     // Catch:{ NoSuchFieldError -> 0x099e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x099e }
                r2 = 205(0xcd, float:2.87E-43)     // Catch:{ NoSuchFieldError -> 0x099e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x099e }
            L_0x099e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09aa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_ARCHIVED     // Catch:{ NoSuchFieldError -> 0x09aa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09aa }
                r2 = 206(0xce, float:2.89E-43)     // Catch:{ NoSuchFieldError -> 0x09aa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09aa }
            L_0x09aa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09b6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_CREATED     // Catch:{ NoSuchFieldError -> 0x09b6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09b6 }
                r2 = 207(0xcf, float:2.9E-43)     // Catch:{ NoSuchFieldError -> 0x09b6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09b6 }
            L_0x09b6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09c2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_DELETE_COMMENT     // Catch:{ NoSuchFieldError -> 0x09c2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09c2 }
                r2 = 208(0xd0, float:2.91E-43)     // Catch:{ NoSuchFieldError -> 0x09c2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09c2 }
            L_0x09c2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09ce }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_EDITED     // Catch:{ NoSuchFieldError -> 0x09ce }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09ce }
                r2 = 209(0xd1, float:2.93E-43)     // Catch:{ NoSuchFieldError -> 0x09ce }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09ce }
            L_0x09ce:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09da }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_EDIT_COMMENT     // Catch:{ NoSuchFieldError -> 0x09da }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09da }
                r2 = 210(0xd2, float:2.94E-43)     // Catch:{ NoSuchFieldError -> 0x09da }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09da }
            L_0x09da:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09e6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_FILE_ADDED     // Catch:{ NoSuchFieldError -> 0x09e6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09e6 }
                r2 = 211(0xd3, float:2.96E-43)     // Catch:{ NoSuchFieldError -> 0x09e6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09e6 }
            L_0x09e6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09f2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_FILE_DOWNLOAD     // Catch:{ NoSuchFieldError -> 0x09f2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09f2 }
                r2 = 212(0xd4, float:2.97E-43)     // Catch:{ NoSuchFieldError -> 0x09f2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09f2 }
            L_0x09f2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x09fe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_FILE_REMOVED     // Catch:{ NoSuchFieldError -> 0x09fe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x09fe }
                r2 = 213(0xd5, float:2.98E-43)     // Catch:{ NoSuchFieldError -> 0x09fe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x09fe }
            L_0x09fe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a0a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_FILE_VIEW     // Catch:{ NoSuchFieldError -> 0x0a0a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a0a }
                r2 = 214(0xd6, float:3.0E-43)     // Catch:{ NoSuchFieldError -> 0x0a0a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a0a }
            L_0x0a0a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a16 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_PERMANENTLY_DELETED     // Catch:{ NoSuchFieldError -> 0x0a16 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a16 }
                r2 = 215(0xd7, float:3.01E-43)     // Catch:{ NoSuchFieldError -> 0x0a16 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a16 }
            L_0x0a16:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a22 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_POST_COMMENT     // Catch:{ NoSuchFieldError -> 0x0a22 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a22 }
                r2 = 216(0xd8, float:3.03E-43)     // Catch:{ NoSuchFieldError -> 0x0a22 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a22 }
            L_0x0a22:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a2e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_REMOVE_MEMBER     // Catch:{ NoSuchFieldError -> 0x0a2e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a2e }
                r2 = 217(0xd9, float:3.04E-43)     // Catch:{ NoSuchFieldError -> 0x0a2e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a2e }
            L_0x0a2e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a3a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_RENAMED     // Catch:{ NoSuchFieldError -> 0x0a3a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a3a }
                r2 = 218(0xda, float:3.05E-43)     // Catch:{ NoSuchFieldError -> 0x0a3a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a3a }
            L_0x0a3a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a46 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_REQUEST_ACCESS     // Catch:{ NoSuchFieldError -> 0x0a46 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a46 }
                r2 = 219(0xdb, float:3.07E-43)     // Catch:{ NoSuchFieldError -> 0x0a46 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a46 }
            L_0x0a46:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a52 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_RESOLVE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0a52 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a52 }
                r2 = 220(0xdc, float:3.08E-43)     // Catch:{ NoSuchFieldError -> 0x0a52 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a52 }
            L_0x0a52:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a5e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_RESTORED     // Catch:{ NoSuchFieldError -> 0x0a5e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a5e }
                r2 = 221(0xdd, float:3.1E-43)     // Catch:{ NoSuchFieldError -> 0x0a5e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a5e }
            L_0x0a5e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a6a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_TRASHED     // Catch:{ NoSuchFieldError -> 0x0a6a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a6a }
                r2 = 222(0xde, float:3.11E-43)     // Catch:{ NoSuchFieldError -> 0x0a6a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a6a }
            L_0x0a6a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a76 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_TRASHED_DEPRECATED     // Catch:{ NoSuchFieldError -> 0x0a76 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a76 }
                r2 = 223(0xdf, float:3.12E-43)     // Catch:{ NoSuchFieldError -> 0x0a76 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a76 }
            L_0x0a76:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a82 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_UNRESOLVE_COMMENT     // Catch:{ NoSuchFieldError -> 0x0a82 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a82 }
                r2 = 224(0xe0, float:3.14E-43)     // Catch:{ NoSuchFieldError -> 0x0a82 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a82 }
            L_0x0a82:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a8e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_UNTRASHED     // Catch:{ NoSuchFieldError -> 0x0a8e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a8e }
                r2 = 225(0xe1, float:3.15E-43)     // Catch:{ NoSuchFieldError -> 0x0a8e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a8e }
            L_0x0a8e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0a9a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_UNTRASHED_DEPRECATED     // Catch:{ NoSuchFieldError -> 0x0a9a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0a9a }
                r2 = 226(0xe2, float:3.17E-43)     // Catch:{ NoSuchFieldError -> 0x0a9a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0a9a }
            L_0x0a9a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0aa6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_VIEW     // Catch:{ NoSuchFieldError -> 0x0aa6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0aa6 }
                r2 = 227(0xe3, float:3.18E-43)     // Catch:{ NoSuchFieldError -> 0x0aa6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0aa6 }
            L_0x0aa6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0ab2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_ADD_CERT     // Catch:{ NoSuchFieldError -> 0x0ab2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0ab2 }
                r2 = 228(0xe4, float:3.2E-43)     // Catch:{ NoSuchFieldError -> 0x0ab2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0ab2 }
            L_0x0ab2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0abe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_ADD_LOGIN_URL     // Catch:{ NoSuchFieldError -> 0x0abe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0abe }
                r2 = 229(0xe5, float:3.21E-43)     // Catch:{ NoSuchFieldError -> 0x0abe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0abe }
            L_0x0abe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0aca }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_ADD_LOGOUT_URL     // Catch:{ NoSuchFieldError -> 0x0aca }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0aca }
                r2 = 230(0xe6, float:3.22E-43)     // Catch:{ NoSuchFieldError -> 0x0aca }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0aca }
            L_0x0aca:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0ad6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_CHANGE_CERT     // Catch:{ NoSuchFieldError -> 0x0ad6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0ad6 }
                r2 = 231(0xe7, float:3.24E-43)     // Catch:{ NoSuchFieldError -> 0x0ad6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0ad6 }
            L_0x0ad6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0ae2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_CHANGE_LOGIN_URL     // Catch:{ NoSuchFieldError -> 0x0ae2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0ae2 }
                r2 = 232(0xe8, float:3.25E-43)     // Catch:{ NoSuchFieldError -> 0x0ae2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0ae2 }
            L_0x0ae2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0aee }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_CHANGE_LOGOUT_URL     // Catch:{ NoSuchFieldError -> 0x0aee }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0aee }
                r2 = 233(0xe9, float:3.27E-43)     // Catch:{ NoSuchFieldError -> 0x0aee }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0aee }
            L_0x0aee:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0afa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_CHANGE_SAML_IDENTITY_MODE     // Catch:{ NoSuchFieldError -> 0x0afa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0afa }
                r2 = 234(0xea, float:3.28E-43)     // Catch:{ NoSuchFieldError -> 0x0afa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0afa }
            L_0x0afa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b06 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_REMOVE_CERT     // Catch:{ NoSuchFieldError -> 0x0b06 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b06 }
                r2 = 235(0xeb, float:3.3E-43)     // Catch:{ NoSuchFieldError -> 0x0b06 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b06 }
            L_0x0b06:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b12 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_REMOVE_LOGIN_URL     // Catch:{ NoSuchFieldError -> 0x0b12 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b12 }
                r2 = 236(0xec, float:3.31E-43)     // Catch:{ NoSuchFieldError -> 0x0b12 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b12 }
            L_0x0b12:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b1e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_REMOVE_LOGOUT_URL     // Catch:{ NoSuchFieldError -> 0x0b1e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b1e }
                r2 = 237(0xed, float:3.32E-43)     // Catch:{ NoSuchFieldError -> 0x0b1e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b1e }
            L_0x0b1e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b2a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_FOLDER_CHANGE_STATUS     // Catch:{ NoSuchFieldError -> 0x0b2a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b2a }
                r2 = 238(0xee, float:3.34E-43)     // Catch:{ NoSuchFieldError -> 0x0b2a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b2a }
            L_0x0b2a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b36 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_FOLDER_CREATE     // Catch:{ NoSuchFieldError -> 0x0b36 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b36 }
                r2 = 239(0xef, float:3.35E-43)     // Catch:{ NoSuchFieldError -> 0x0b36 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b36 }
            L_0x0b36:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b42 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_FOLDER_DOWNGRADE     // Catch:{ NoSuchFieldError -> 0x0b42 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b42 }
                r2 = 240(0xf0, float:3.36E-43)     // Catch:{ NoSuchFieldError -> 0x0b42 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b42 }
            L_0x0b42:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b4e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_FOLDER_PERMANENTLY_DELETE     // Catch:{ NoSuchFieldError -> 0x0b4e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b4e }
                r2 = 241(0xf1, float:3.38E-43)     // Catch:{ NoSuchFieldError -> 0x0b4e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b4e }
            L_0x0b4e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b5a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_FOLDER_RENAME     // Catch:{ NoSuchFieldError -> 0x0b5a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b5a }
                r2 = 242(0xf2, float:3.39E-43)     // Catch:{ NoSuchFieldError -> 0x0b5a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b5a }
            L_0x0b5a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b66 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED     // Catch:{ NoSuchFieldError -> 0x0b66 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b66 }
                r2 = 243(0xf3, float:3.4E-43)     // Catch:{ NoSuchFieldError -> 0x0b66 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b66 }
            L_0x0b66:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b72 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ACCOUNT_CAPTURE_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0b72 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b72 }
                r2 = 244(0xf4, float:3.42E-43)     // Catch:{ NoSuchFieldError -> 0x0b72 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b72 }
            L_0x0b72:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b7e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ALLOW_DOWNLOAD_DISABLED     // Catch:{ NoSuchFieldError -> 0x0b7e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b7e }
                r2 = 245(0xf5, float:3.43E-43)     // Catch:{ NoSuchFieldError -> 0x0b7e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b7e }
            L_0x0b7e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b8a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.ALLOW_DOWNLOAD_ENABLED     // Catch:{ NoSuchFieldError -> 0x0b8a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b8a }
                r2 = 246(0xf6, float:3.45E-43)     // Catch:{ NoSuchFieldError -> 0x0b8a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b8a }
            L_0x0b8a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0b96 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0b96 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0b96 }
                r2 = 247(0xf7, float:3.46E-43)     // Catch:{ NoSuchFieldError -> 0x0b96 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0b96 }
            L_0x0b96:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0ba2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY     // Catch:{ NoSuchFieldError -> 0x0ba2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0ba2 }
                r2 = 248(0xf8, float:3.48E-43)     // Catch:{ NoSuchFieldError -> 0x0ba2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0ba2 }
            L_0x0ba2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bae }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY     // Catch:{ NoSuchFieldError -> 0x0bae }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bae }
                r2 = 249(0xf9, float:3.49E-43)     // Catch:{ NoSuchFieldError -> 0x0bae }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bae }
            L_0x0bae:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bba }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY     // Catch:{ NoSuchFieldError -> 0x0bba }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bba }
                r2 = 250(0xfa, float:3.5E-43)     // Catch:{ NoSuchFieldError -> 0x0bba }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bba }
            L_0x0bba:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bc6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION     // Catch:{ NoSuchFieldError -> 0x0bc6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bc6 }
                r2 = 251(0xfb, float:3.52E-43)     // Catch:{ NoSuchFieldError -> 0x0bc6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bc6 }
            L_0x0bc6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bd2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION     // Catch:{ NoSuchFieldError -> 0x0bd2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bd2 }
                r2 = 252(0xfc, float:3.53E-43)     // Catch:{ NoSuchFieldError -> 0x0bd2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bd2 }
            L_0x0bd2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bde }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS     // Catch:{ NoSuchFieldError -> 0x0bde }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bde }
                r2 = 253(0xfd, float:3.55E-43)     // Catch:{ NoSuchFieldError -> 0x0bde }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bde }
            L_0x0bde:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bea }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS     // Catch:{ NoSuchFieldError -> 0x0bea }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bea }
                r2 = 254(0xfe, float:3.56E-43)     // Catch:{ NoSuchFieldError -> 0x0bea }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bea }
            L_0x0bea:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0bf6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_ADD_EXCEPTION     // Catch:{ NoSuchFieldError -> 0x0bf6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0bf6 }
                r2 = 255(0xff, float:3.57E-43)     // Catch:{ NoSuchFieldError -> 0x0bf6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0bf6 }
            L_0x0bf6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c02 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c02 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c02 }
                r2 = 256(0x100, float:3.59E-43)     // Catch:{ NoSuchFieldError -> 0x0c02 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c02 }
            L_0x0c02:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c0e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EMM_REMOVE_EXCEPTION     // Catch:{ NoSuchFieldError -> 0x0c0e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c0e }
                r2 = 257(0x101, float:3.6E-43)     // Catch:{ NoSuchFieldError -> 0x0c0e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c0e }
            L_0x0c0e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c1a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c1a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c1a }
                r2 = 258(0x102, float:3.62E-43)     // Catch:{ NoSuchFieldError -> 0x0c1a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c1a }
            L_0x0c1a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c26 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_COMMENTS_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c26 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c26 }
                r2 = 259(0x103, float:3.63E-43)     // Catch:{ NoSuchFieldError -> 0x0c26 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c26 }
            L_0x0c26:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c32 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUESTS_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c32 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c32 }
                r2 = 260(0x104, float:3.64E-43)     // Catch:{ NoSuchFieldError -> 0x0c32 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c32 }
            L_0x0c32:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c3e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUESTS_EMAILS_ENABLED     // Catch:{ NoSuchFieldError -> 0x0c3e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c3e }
                r2 = 261(0x105, float:3.66E-43)     // Catch:{ NoSuchFieldError -> 0x0c3e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c3e }
            L_0x0c3e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c4a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY     // Catch:{ NoSuchFieldError -> 0x0c4a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c4a }
                r2 = 262(0x106, float:3.67E-43)     // Catch:{ NoSuchFieldError -> 0x0c4a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c4a }
            L_0x0c4a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c56 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GOOGLE_SSO_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c56 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c56 }
                r2 = 263(0x107, float:3.69E-43)     // Catch:{ NoSuchFieldError -> 0x0c56 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c56 }
            L_0x0c56:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c62 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c62 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c62 }
                r2 = 264(0x108, float:3.7E-43)     // Catch:{ NoSuchFieldError -> 0x0c62 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c62 }
            L_0x0c62:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c6e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_REQUESTS_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c6e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c6e }
                r2 = 265(0x109, float:3.71E-43)     // Catch:{ NoSuchFieldError -> 0x0c6e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c6e }
            L_0x0c6e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c7a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION     // Catch:{ NoSuchFieldError -> 0x0c7a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c7a }
                r2 = 266(0x10a, float:3.73E-43)     // Catch:{ NoSuchFieldError -> 0x0c7a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c7a }
            L_0x0c7a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c86 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c86 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c86 }
                r2 = 267(0x10b, float:3.74E-43)     // Catch:{ NoSuchFieldError -> 0x0c86 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c86 }
            L_0x0c86:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c92 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0c92 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c92 }
                r2 = 268(0x10c, float:3.76E-43)     // Catch:{ NoSuchFieldError -> 0x0c92 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c92 }
            L_0x0c92:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0c9e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION     // Catch:{ NoSuchFieldError -> 0x0c9e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0c9e }
                r2 = 269(0x10d, float:3.77E-43)     // Catch:{ NoSuchFieldError -> 0x0c9e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0c9e }
            L_0x0c9e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0caa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0caa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0caa }
                r2 = 270(0x10e, float:3.78E-43)     // Catch:{ NoSuchFieldError -> 0x0caa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0caa }
            L_0x0caa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0cb6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0cb6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0cb6 }
                r2 = 271(0x10f, float:3.8E-43)     // Catch:{ NoSuchFieldError -> 0x0cb6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0cb6 }
            L_0x0cb6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0cc2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.NETWORK_CONTROL_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0cc2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0cc2 }
                r2 = 272(0x110, float:3.81E-43)     // Catch:{ NoSuchFieldError -> 0x0cc2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0cc2 }
            L_0x0cc2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0cce }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CHANGE_DEPLOYMENT_POLICY     // Catch:{ NoSuchFieldError -> 0x0cce }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0cce }
                r2 = 273(0x111, float:3.83E-43)     // Catch:{ NoSuchFieldError -> 0x0cce }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0cce }
            L_0x0cce:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0cda }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CHANGE_MEMBER_LINK_POLICY     // Catch:{ NoSuchFieldError -> 0x0cda }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0cda }
                r2 = 274(0x112, float:3.84E-43)     // Catch:{ NoSuchFieldError -> 0x0cda }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0cda }
            L_0x0cda:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0ce6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CHANGE_MEMBER_POLICY     // Catch:{ NoSuchFieldError -> 0x0ce6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0ce6 }
                r2 = 275(0x113, float:3.85E-43)     // Catch:{ NoSuchFieldError -> 0x0ce6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0ce6 }
            L_0x0ce6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0cf2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0cf2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0cf2 }
                r2 = 276(0x114, float:3.87E-43)     // Catch:{ NoSuchFieldError -> 0x0cf2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0cf2 }
            L_0x0cf2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0cfe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_ENABLED_USERS_GROUP_ADDITION     // Catch:{ NoSuchFieldError -> 0x0cfe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0cfe }
                r2 = 277(0x115, float:3.88E-43)     // Catch:{ NoSuchFieldError -> 0x0cfe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0cfe }
            L_0x0cfe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d0a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL     // Catch:{ NoSuchFieldError -> 0x0d0a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d0a }
                r2 = 278(0x116, float:3.9E-43)     // Catch:{ NoSuchFieldError -> 0x0d0a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d0a }
            L_0x0d0a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d16 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.PERMANENT_DELETE_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0d16 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d16 }
                r2 = 279(0x117, float:3.91E-43)     // Catch:{ NoSuchFieldError -> 0x0d16 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d16 }
            L_0x0d16:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d22 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY     // Catch:{ NoSuchFieldError -> 0x0d22 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d22 }
                r2 = 280(0x118, float:3.92E-43)     // Catch:{ NoSuchFieldError -> 0x0d22 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d22 }
            L_0x0d22:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d2e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARING_CHANGE_LINK_POLICY     // Catch:{ NoSuchFieldError -> 0x0d2e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d2e }
                r2 = 281(0x119, float:3.94E-43)     // Catch:{ NoSuchFieldError -> 0x0d2e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d2e }
            L_0x0d2e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d3a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHARING_CHANGE_MEMBER_POLICY     // Catch:{ NoSuchFieldError -> 0x0d3a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d3a }
                r2 = 282(0x11a, float:3.95E-43)     // Catch:{ NoSuchFieldError -> 0x0d3a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d3a }
            L_0x0d3a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d46 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY     // Catch:{ NoSuchFieldError -> 0x0d46 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d46 }
                r2 = 283(0x11b, float:3.97E-43)     // Catch:{ NoSuchFieldError -> 0x0d46 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d46 }
            L_0x0d46:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d52 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_CHANGE_ENABLED_POLICY     // Catch:{ NoSuchFieldError -> 0x0d52 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d52 }
                r2 = 284(0x11c, float:3.98E-43)     // Catch:{ NoSuchFieldError -> 0x0d52 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d52 }
            L_0x0d52:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d5e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY     // Catch:{ NoSuchFieldError -> 0x0d5e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d5e }
                r2 = 285(0x11d, float:4.0E-43)     // Catch:{ NoSuchFieldError -> 0x0d5e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d5e }
            L_0x0d5e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d6a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SMART_SYNC_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0d6a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d6a }
                r2 = 286(0x11e, float:4.01E-43)     // Catch:{ NoSuchFieldError -> 0x0d6a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d6a }
            L_0x0d6a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d76 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SMART_SYNC_NOT_OPT_OUT     // Catch:{ NoSuchFieldError -> 0x0d76 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d76 }
                r2 = 287(0x11f, float:4.02E-43)     // Catch:{ NoSuchFieldError -> 0x0d76 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d76 }
            L_0x0d76:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d82 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SMART_SYNC_OPT_OUT     // Catch:{ NoSuchFieldError -> 0x0d82 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d82 }
                r2 = 288(0x120, float:4.04E-43)     // Catch:{ NoSuchFieldError -> 0x0d82 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d82 }
            L_0x0d82:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d8e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.SSO_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0d8e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d8e }
                r2 = 289(0x121, float:4.05E-43)     // Catch:{ NoSuchFieldError -> 0x0d8e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d8e }
            L_0x0d8e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0d9a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED     // Catch:{ NoSuchFieldError -> 0x0d9a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0d9a }
                r2 = 290(0x122, float:4.06E-43)     // Catch:{ NoSuchFieldError -> 0x0d9a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0d9a }
            L_0x0d9a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0da6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0da6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0da6 }
                r2 = 291(0x123, float:4.08E-43)     // Catch:{ NoSuchFieldError -> 0x0da6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0da6 }
            L_0x0da6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0db2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TWO_ACCOUNT_CHANGE_POLICY     // Catch:{ NoSuchFieldError -> 0x0db2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0db2 }
                r2 = 292(0x124, float:4.09E-43)     // Catch:{ NoSuchFieldError -> 0x0db2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0db2 }
            L_0x0db2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0dbe }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.VIEWER_INFO_POLICY_CHANGED     // Catch:{ NoSuchFieldError -> 0x0dbe }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0dbe }
                r2 = 293(0x125, float:4.1E-43)     // Catch:{ NoSuchFieldError -> 0x0dbe }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0dbe }
            L_0x0dbe:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0dca }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY     // Catch:{ NoSuchFieldError -> 0x0dca }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0dca }
                r2 = 294(0x126, float:4.12E-43)     // Catch:{ NoSuchFieldError -> 0x0dca }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0dca }
            L_0x0dca:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0dd6 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY     // Catch:{ NoSuchFieldError -> 0x0dd6 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0dd6 }
                r2 = 295(0x127, float:4.13E-43)     // Catch:{ NoSuchFieldError -> 0x0dd6 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0dd6 }
            L_0x0dd6:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0de2 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_MERGE_FROM     // Catch:{ NoSuchFieldError -> 0x0de2 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0de2 }
                r2 = 296(0x128, float:4.15E-43)     // Catch:{ NoSuchFieldError -> 0x0de2 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0de2 }
            L_0x0de2:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0dee }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_MERGE_TO     // Catch:{ NoSuchFieldError -> 0x0dee }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0dee }
                r2 = 297(0x129, float:4.16E-43)     // Catch:{ NoSuchFieldError -> 0x0dee }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0dee }
            L_0x0dee:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0dfa }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_PROFILE_ADD_LOGO     // Catch:{ NoSuchFieldError -> 0x0dfa }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0dfa }
                r2 = 298(0x12a, float:4.18E-43)     // Catch:{ NoSuchFieldError -> 0x0dfa }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0dfa }
            L_0x0dfa:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e06 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE     // Catch:{ NoSuchFieldError -> 0x0e06 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e06 }
                r2 = 299(0x12b, float:4.19E-43)     // Catch:{ NoSuchFieldError -> 0x0e06 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e06 }
            L_0x0e06:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e12 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_PROFILE_CHANGE_LOGO     // Catch:{ NoSuchFieldError -> 0x0e12 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e12 }
                r2 = 300(0x12c, float:4.2E-43)     // Catch:{ NoSuchFieldError -> 0x0e12 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e12 }
            L_0x0e12:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e1e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_PROFILE_CHANGE_NAME     // Catch:{ NoSuchFieldError -> 0x0e1e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e1e }
                r2 = 301(0x12d, float:4.22E-43)     // Catch:{ NoSuchFieldError -> 0x0e1e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e1e }
            L_0x0e1e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e2a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TEAM_PROFILE_REMOVE_LOGO     // Catch:{ NoSuchFieldError -> 0x0e2a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e2a }
                r2 = 302(0x12e, float:4.23E-43)     // Catch:{ NoSuchFieldError -> 0x0e2a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e2a }
            L_0x0e2a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e36 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_ADD_BACKUP_PHONE     // Catch:{ NoSuchFieldError -> 0x0e36 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e36 }
                r2 = 303(0x12f, float:4.25E-43)     // Catch:{ NoSuchFieldError -> 0x0e36 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e36 }
            L_0x0e36:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e42 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_ADD_SECURITY_KEY     // Catch:{ NoSuchFieldError -> 0x0e42 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e42 }
                r2 = 304(0x130, float:4.26E-43)     // Catch:{ NoSuchFieldError -> 0x0e42 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e42 }
            L_0x0e42:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e4e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_CHANGE_BACKUP_PHONE     // Catch:{ NoSuchFieldError -> 0x0e4e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e4e }
                r2 = 305(0x131, float:4.27E-43)     // Catch:{ NoSuchFieldError -> 0x0e4e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e4e }
            L_0x0e4e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e5a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_CHANGE_STATUS     // Catch:{ NoSuchFieldError -> 0x0e5a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e5a }
                r2 = 306(0x132, float:4.29E-43)     // Catch:{ NoSuchFieldError -> 0x0e5a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e5a }
            L_0x0e5a:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e66 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_REMOVE_BACKUP_PHONE     // Catch:{ NoSuchFieldError -> 0x0e66 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e66 }
                r2 = 307(0x133, float:4.3E-43)     // Catch:{ NoSuchFieldError -> 0x0e66 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e66 }
            L_0x0e66:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e72 }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_REMOVE_SECURITY_KEY     // Catch:{ NoSuchFieldError -> 0x0e72 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e72 }
                r2 = 308(0x134, float:4.32E-43)     // Catch:{ NoSuchFieldError -> 0x0e72 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e72 }
            L_0x0e72:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e7e }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.TFA_RESET     // Catch:{ NoSuchFieldError -> 0x0e7e }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e7e }
                r2 = 309(0x135, float:4.33E-43)     // Catch:{ NoSuchFieldError -> 0x0e7e }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e7e }
            L_0x0e7e:
                int[] r0 = $SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag     // Catch:{ NoSuchFieldError -> 0x0e8a }
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = com.dropbox.core.p005v2.teamlog.EventType.Tag.OTHER     // Catch:{ NoSuchFieldError -> 0x0e8a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0e8a }
                r2 = 310(0x136, float:4.34E-43)     // Catch:{ NoSuchFieldError -> 0x0e8a }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0e8a }
            L_0x0e8a:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.dropbox.core.p005v2.teamlog.EventType.C08951.<clinit>():void");
        }
    }

    /* renamed from: com.dropbox.core.v2.teamlog.EventType$Serializer */
    static class Serializer extends UnionSerializer<EventType> {
        public static final Serializer INSTANCE = new Serializer();

        Serializer() {
        }

        /* JADX WARNING: type inference failed for: r4v0, types: [com.fasterxml.jackson.core.JsonGenerator] */
        /* JADX WARNING: Incorrect type for immutable var: ssa=com.fasterxml.jackson.core.JsonGenerator, code=null, for r4v0, types: [com.fasterxml.jackson.core.JsonGenerator] */
        /* JADX WARNING: Unknown variable types count: 1 */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void serialize(com.dropbox.core.p005v2.teamlog.EventType r3, com.fasterxml.jackson.core.JsonGenerator r4) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException {
            /*
                r2 = this;
                int[] r0 = com.dropbox.core.p005v2.teamlog.EventType.C08951.$SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag
                com.dropbox.core.v2.teamlog.EventType$Tag r1 = r3.tag()
                int r1 = r1.ordinal()
                r0 = r0[r1]
                r1 = 1
                switch(r0) {
                    case 1: goto L_0x1a8a;
                    case 2: goto L_0x1a75;
                    case 3: goto L_0x1a60;
                    case 4: goto L_0x1a4b;
                    case 5: goto L_0x1a36;
                    case 6: goto L_0x1a21;
                    case 7: goto L_0x1a0b;
                    case 8: goto L_0x19f5;
                    case 9: goto L_0x19df;
                    case 10: goto L_0x19c9;
                    case 11: goto L_0x19b3;
                    case 12: goto L_0x199d;
                    case 13: goto L_0x1987;
                    case 14: goto L_0x1971;
                    case 15: goto L_0x195b;
                    case 16: goto L_0x1945;
                    case 17: goto L_0x192f;
                    case 18: goto L_0x1919;
                    case 19: goto L_0x1903;
                    case 20: goto L_0x18ed;
                    case 21: goto L_0x18d7;
                    case 22: goto L_0x18c1;
                    case 23: goto L_0x18ab;
                    case 24: goto L_0x1895;
                    case 25: goto L_0x187f;
                    case 26: goto L_0x1869;
                    case 27: goto L_0x1853;
                    case 28: goto L_0x183d;
                    case 29: goto L_0x1827;
                    case 30: goto L_0x1811;
                    case 31: goto L_0x17fb;
                    case 32: goto L_0x17e5;
                    case 33: goto L_0x17cf;
                    case 34: goto L_0x17b9;
                    case 35: goto L_0x17a3;
                    case 36: goto L_0x178d;
                    case 37: goto L_0x1777;
                    case 38: goto L_0x1761;
                    case 39: goto L_0x174b;
                    case 40: goto L_0x1735;
                    case 41: goto L_0x171f;
                    case 42: goto L_0x1709;
                    case 43: goto L_0x16f3;
                    case 44: goto L_0x16dd;
                    case 45: goto L_0x16c7;
                    case 46: goto L_0x16b1;
                    case 47: goto L_0x169b;
                    case 48: goto L_0x1685;
                    case 49: goto L_0x166f;
                    case 50: goto L_0x1659;
                    case 51: goto L_0x1643;
                    case 52: goto L_0x162d;
                    case 53: goto L_0x1617;
                    case 54: goto L_0x1601;
                    case 55: goto L_0x15eb;
                    case 56: goto L_0x15d5;
                    case 57: goto L_0x15bf;
                    case 58: goto L_0x15a9;
                    case 59: goto L_0x1593;
                    case 60: goto L_0x157d;
                    case 61: goto L_0x1567;
                    case 62: goto L_0x1551;
                    case 63: goto L_0x153b;
                    case 64: goto L_0x1525;
                    case 65: goto L_0x150f;
                    case 66: goto L_0x14f9;
                    case 67: goto L_0x14e3;
                    case 68: goto L_0x14cd;
                    case 69: goto L_0x14b7;
                    case 70: goto L_0x14a1;
                    case 71: goto L_0x148b;
                    case 72: goto L_0x1475;
                    case 73: goto L_0x145f;
                    case 74: goto L_0x1449;
                    case 75: goto L_0x1433;
                    case 76: goto L_0x141d;
                    case 77: goto L_0x1407;
                    case 78: goto L_0x13f1;
                    case 79: goto L_0x13db;
                    case 80: goto L_0x13c5;
                    case 81: goto L_0x13af;
                    case 82: goto L_0x1399;
                    case 83: goto L_0x1383;
                    case 84: goto L_0x136d;
                    case 85: goto L_0x1357;
                    case 86: goto L_0x1341;
                    case 87: goto L_0x132b;
                    case 88: goto L_0x1315;
                    case 89: goto L_0x12ff;
                    case 90: goto L_0x12e9;
                    case 91: goto L_0x12d3;
                    case 92: goto L_0x12bd;
                    case 93: goto L_0x12a7;
                    case 94: goto L_0x1291;
                    case 95: goto L_0x127b;
                    case 96: goto L_0x1265;
                    case 97: goto L_0x124f;
                    case 98: goto L_0x1239;
                    case 99: goto L_0x1223;
                    case 100: goto L_0x120d;
                    case 101: goto L_0x11f7;
                    case 102: goto L_0x11e1;
                    case 103: goto L_0x11cb;
                    case 104: goto L_0x11b5;
                    case 105: goto L_0x119f;
                    case 106: goto L_0x1189;
                    case 107: goto L_0x1173;
                    case 108: goto L_0x115d;
                    case 109: goto L_0x1147;
                    case 110: goto L_0x1131;
                    case 111: goto L_0x111b;
                    case 112: goto L_0x1105;
                    case 113: goto L_0x10ef;
                    case 114: goto L_0x10d9;
                    case 115: goto L_0x10c3;
                    case 116: goto L_0x10ad;
                    case 117: goto L_0x1097;
                    case 118: goto L_0x1081;
                    case 119: goto L_0x106b;
                    case 120: goto L_0x1055;
                    case 121: goto L_0x103f;
                    case 122: goto L_0x1029;
                    case 123: goto L_0x1013;
                    case 124: goto L_0x0ffd;
                    case 125: goto L_0x0fe7;
                    case 126: goto L_0x0fd1;
                    case 127: goto L_0x0fbb;
                    case 128: goto L_0x0fa5;
                    case 129: goto L_0x0f8f;
                    case 130: goto L_0x0f79;
                    case 131: goto L_0x0f63;
                    case 132: goto L_0x0f4d;
                    case 133: goto L_0x0f37;
                    case 134: goto L_0x0f21;
                    case 135: goto L_0x0f0b;
                    case 136: goto L_0x0ef5;
                    case 137: goto L_0x0edf;
                    case 138: goto L_0x0ec9;
                    case 139: goto L_0x0eb3;
                    case 140: goto L_0x0e9d;
                    case 141: goto L_0x0e87;
                    case 142: goto L_0x0e71;
                    case 143: goto L_0x0e5b;
                    case 144: goto L_0x0e45;
                    case 145: goto L_0x0e2f;
                    case 146: goto L_0x0e19;
                    case 147: goto L_0x0e03;
                    case 148: goto L_0x0ded;
                    case 149: goto L_0x0dd7;
                    case 150: goto L_0x0dc1;
                    case 151: goto L_0x0dab;
                    case 152: goto L_0x0d95;
                    case 153: goto L_0x0d7f;
                    case 154: goto L_0x0d69;
                    case 155: goto L_0x0d53;
                    case 156: goto L_0x0d3d;
                    case 157: goto L_0x0d27;
                    case 158: goto L_0x0d11;
                    case 159: goto L_0x0cfb;
                    case 160: goto L_0x0ce5;
                    case 161: goto L_0x0ccf;
                    case 162: goto L_0x0cb9;
                    case 163: goto L_0x0ca3;
                    case 164: goto L_0x0c8d;
                    case 165: goto L_0x0c77;
                    case 166: goto L_0x0c61;
                    case 167: goto L_0x0c4b;
                    case 168: goto L_0x0c35;
                    case 169: goto L_0x0c1f;
                    case 170: goto L_0x0c09;
                    case 171: goto L_0x0bf3;
                    case 172: goto L_0x0bdd;
                    case 173: goto L_0x0bc7;
                    case 174: goto L_0x0bb1;
                    case 175: goto L_0x0b9b;
                    case 176: goto L_0x0b85;
                    case 177: goto L_0x0b6f;
                    case 178: goto L_0x0b59;
                    case 179: goto L_0x0b43;
                    case 180: goto L_0x0b2d;
                    case 181: goto L_0x0b17;
                    case 182: goto L_0x0b01;
                    case 183: goto L_0x0aeb;
                    case 184: goto L_0x0ad5;
                    case 185: goto L_0x0abf;
                    case 186: goto L_0x0aa9;
                    case 187: goto L_0x0a93;
                    case 188: goto L_0x0a7d;
                    case 189: goto L_0x0a67;
                    case 190: goto L_0x0a51;
                    case 191: goto L_0x0a3b;
                    case 192: goto L_0x0a25;
                    case 193: goto L_0x0a0f;
                    case 194: goto L_0x09f9;
                    case 195: goto L_0x09e3;
                    case 196: goto L_0x09cd;
                    case 197: goto L_0x09b7;
                    case 198: goto L_0x09a1;
                    case 199: goto L_0x098b;
                    case 200: goto L_0x0975;
                    case 201: goto L_0x095f;
                    case 202: goto L_0x0949;
                    case 203: goto L_0x0933;
                    case 204: goto L_0x091d;
                    case 205: goto L_0x0907;
                    case 206: goto L_0x08f1;
                    case 207: goto L_0x08db;
                    case 208: goto L_0x08c5;
                    case 209: goto L_0x08af;
                    case 210: goto L_0x0899;
                    case 211: goto L_0x0883;
                    case 212: goto L_0x086d;
                    case 213: goto L_0x0857;
                    case 214: goto L_0x0841;
                    case 215: goto L_0x082b;
                    case 216: goto L_0x0815;
                    case 217: goto L_0x07ff;
                    case 218: goto L_0x07e9;
                    case 219: goto L_0x07d3;
                    case 220: goto L_0x07bd;
                    case 221: goto L_0x07a7;
                    case 222: goto L_0x0791;
                    case 223: goto L_0x077b;
                    case 224: goto L_0x0765;
                    case 225: goto L_0x074f;
                    case 226: goto L_0x0739;
                    case 227: goto L_0x0723;
                    case 228: goto L_0x070d;
                    case 229: goto L_0x06f7;
                    case 230: goto L_0x06e1;
                    case 231: goto L_0x06cb;
                    case 232: goto L_0x06b5;
                    case 233: goto L_0x069f;
                    case 234: goto L_0x0689;
                    case 235: goto L_0x0673;
                    case 236: goto L_0x065d;
                    case 237: goto L_0x0647;
                    case 238: goto L_0x0631;
                    case 239: goto L_0x061b;
                    case 240: goto L_0x0605;
                    case 241: goto L_0x05ef;
                    case 242: goto L_0x05d9;
                    case 243: goto L_0x05c3;
                    case 244: goto L_0x05ad;
                    case 245: goto L_0x0597;
                    case 246: goto L_0x0581;
                    case 247: goto L_0x056b;
                    case 248: goto L_0x0555;
                    case 249: goto L_0x053f;
                    case 250: goto L_0x0529;
                    case 251: goto L_0x0513;
                    case 252: goto L_0x04fd;
                    case 253: goto L_0x04e7;
                    case 254: goto L_0x04d1;
                    case 255: goto L_0x04bb;
                    case 256: goto L_0x04a5;
                    case 257: goto L_0x048f;
                    case 258: goto L_0x0479;
                    case 259: goto L_0x0463;
                    case 260: goto L_0x044d;
                    case 261: goto L_0x0437;
                    case 262: goto L_0x0421;
                    case 263: goto L_0x040b;
                    case 264: goto L_0x03f5;
                    case 265: goto L_0x03df;
                    case 266: goto L_0x03c9;
                    case 267: goto L_0x03b3;
                    case 268: goto L_0x039d;
                    case 269: goto L_0x0387;
                    case 270: goto L_0x0371;
                    case 271: goto L_0x035b;
                    case 272: goto L_0x0345;
                    case 273: goto L_0x032f;
                    case 274: goto L_0x0319;
                    case 275: goto L_0x0303;
                    case 276: goto L_0x02ed;
                    case 277: goto L_0x02d7;
                    case 278: goto L_0x02c1;
                    case 279: goto L_0x02ab;
                    case 280: goto L_0x0295;
                    case 281: goto L_0x027f;
                    case 282: goto L_0x0269;
                    case 283: goto L_0x0253;
                    case 284: goto L_0x023d;
                    case 285: goto L_0x0227;
                    case 286: goto L_0x0211;
                    case 287: goto L_0x01fb;
                    case 288: goto L_0x01e5;
                    case 289: goto L_0x01cf;
                    case 290: goto L_0x01b9;
                    case 291: goto L_0x01a3;
                    case 292: goto L_0x018d;
                    case 293: goto L_0x0177;
                    case 294: goto L_0x0161;
                    case 295: goto L_0x014b;
                    case 296: goto L_0x0135;
                    case 297: goto L_0x011f;
                    case 298: goto L_0x0109;
                    case 299: goto L_0x00f3;
                    case 300: goto L_0x00dd;
                    case 301: goto L_0x00c7;
                    case 302: goto L_0x00b1;
                    case 303: goto L_0x009b;
                    case 304: goto L_0x0085;
                    case 305: goto L_0x006f;
                    case 306: goto L_0x0059;
                    case 307: goto L_0x0043;
                    case 308: goto L_0x002d;
                    case 309: goto L_0x0017;
                    default: goto L_0x0010;
                }
            L_0x0010:
                java.lang.String r3 = "other"
                r4.writeString(r3)
                goto L_0x1a9e
            L_0x0017:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_reset"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaResetType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaResetType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaResetType r3 = r3.tfaResetValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x002d:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_remove_security_key"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaRemoveSecurityKeyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaRemoveSecurityKeyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaRemoveSecurityKeyType r3 = r3.tfaRemoveSecurityKeyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0043:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_remove_backup_phone"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaRemoveBackupPhoneType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaRemoveBackupPhoneType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaRemoveBackupPhoneType r3 = r3.tfaRemoveBackupPhoneValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0059:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_change_status"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaChangeStatusType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaChangeStatusType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaChangeStatusType r3 = r3.tfaChangeStatusValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x006f:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_change_backup_phone"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaChangeBackupPhoneType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaChangeBackupPhoneType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaChangeBackupPhoneType r3 = r3.tfaChangeBackupPhoneValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0085:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_add_security_key"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaAddSecurityKeyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaAddSecurityKeyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaAddSecurityKeyType r3 = r3.tfaAddSecurityKeyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x009b:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_add_backup_phone"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaAddBackupPhoneType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaAddBackupPhoneType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaAddBackupPhoneType r3 = r3.tfaAddBackupPhoneValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x00b1:
                r4.writeStartObject()
                java.lang.String r0 = "team_profile_remove_logo"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamProfileRemoveLogoType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamProfileRemoveLogoType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamProfileRemoveLogoType r3 = r3.teamProfileRemoveLogoValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x00c7:
                r4.writeStartObject()
                java.lang.String r0 = "team_profile_change_name"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamProfileChangeNameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamProfileChangeNameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamProfileChangeNameType r3 = r3.teamProfileChangeNameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x00dd:
                r4.writeStartObject()
                java.lang.String r0 = "team_profile_change_logo"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamProfileChangeLogoType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamProfileChangeLogoType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamProfileChangeLogoType r3 = r3.teamProfileChangeLogoValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x00f3:
                r4.writeStartObject()
                java.lang.String r0 = "team_profile_change_default_language"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamProfileChangeDefaultLanguageType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamProfileChangeDefaultLanguageType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamProfileChangeDefaultLanguageType r3 = r3.teamProfileChangeDefaultLanguageValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0109:
                r4.writeStartObject()
                java.lang.String r0 = "team_profile_add_logo"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamProfileAddLogoType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamProfileAddLogoType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamProfileAddLogoType r3 = r3.teamProfileAddLogoValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x011f:
                r4.writeStartObject()
                java.lang.String r0 = "team_merge_to"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamMergeToType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamMergeToType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamMergeToType r3 = r3.teamMergeToValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0135:
                r4.writeStartObject()
                java.lang.String r0 = "team_merge_from"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamMergeFromType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamMergeFromType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamMergeFromType r3 = r3.teamMergeFromValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x014b:
                r4.writeStartObject()
                java.lang.String r0 = "web_sessions_change_idle_length_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.WebSessionsChangeIdleLengthPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.WebSessionsChangeIdleLengthPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.WebSessionsChangeIdleLengthPolicyType r3 = r3.webSessionsChangeIdleLengthPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0161:
                r4.writeStartObject()
                java.lang.String r0 = "web_sessions_change_fixed_length_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.WebSessionsChangeFixedLengthPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.WebSessionsChangeFixedLengthPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.WebSessionsChangeFixedLengthPolicyType r3 = r3.webSessionsChangeFixedLengthPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0177:
                r4.writeStartObject()
                java.lang.String r0 = "viewer_info_policy_changed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ViewerInfoPolicyChangedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ViewerInfoPolicyChangedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ViewerInfoPolicyChangedType r3 = r3.viewerInfoPolicyChangedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x018d:
                r4.writeStartObject()
                java.lang.String r0 = "two_account_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TwoAccountChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TwoAccountChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TwoAccountChangePolicyType r3 = r3.twoAccountChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x01a3:
                r4.writeStartObject()
                java.lang.String r0 = "tfa_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TfaChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TfaChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TfaChangePolicyType r3 = r3.tfaChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x01b9:
                r4.writeStartObject()
                java.lang.String r0 = "team_selective_sync_policy_changed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamSelectiveSyncPolicyChangedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamSelectiveSyncPolicyChangedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamSelectiveSyncPolicyChangedType r3 = r3.teamSelectiveSyncPolicyChangedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x01cf:
                r4.writeStartObject()
                java.lang.String r0 = "sso_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoChangePolicyType r3 = r3.ssoChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x01e5:
                r4.writeStartObject()
                java.lang.String r0 = "smart_sync_opt_out"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SmartSyncOptOutType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SmartSyncOptOutType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SmartSyncOptOutType r3 = r3.smartSyncOptOutValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x01fb:
                r4.writeStartObject()
                java.lang.String r0 = "smart_sync_not_opt_out"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SmartSyncNotOptOutType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SmartSyncNotOptOutType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SmartSyncNotOptOutType r3 = r3.smartSyncNotOptOutValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0211:
                r4.writeStartObject()
                java.lang.String r0 = "smart_sync_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SmartSyncChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SmartSyncChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SmartSyncChangePolicyType r3 = r3.smartSyncChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0227:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_change_external_sharing_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseChangeExternalSharingPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseChangeExternalSharingPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseChangeExternalSharingPolicyType r3 = r3.showcaseChangeExternalSharingPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x023d:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_change_enabled_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseChangeEnabledPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseChangeEnabledPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseChangeEnabledPolicyType r3 = r3.showcaseChangeEnabledPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0253:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_change_download_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseChangeDownloadPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseChangeDownloadPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseChangeDownloadPolicyType r3 = r3.showcaseChangeDownloadPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0269:
                r4.writeStartObject()
                java.lang.String r0 = "sharing_change_member_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharingChangeMemberPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharingChangeMemberPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharingChangeMemberPolicyType r3 = r3.sharingChangeMemberPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x027f:
                r4.writeStartObject()
                java.lang.String r0 = "sharing_change_link_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharingChangeLinkPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharingChangeLinkPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharingChangeLinkPolicyType r3 = r3.sharingChangeLinkPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0295:
                r4.writeStartObject()
                java.lang.String r0 = "sharing_change_folder_join_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharingChangeFolderJoinPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharingChangeFolderJoinPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharingChangeFolderJoinPolicyType r3 = r3.sharingChangeFolderJoinPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x02ab:
                r4.writeStartObject()
                java.lang.String r0 = "permanent_delete_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PermanentDeleteChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PermanentDeleteChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PermanentDeleteChangePolicyType r3 = r3.permanentDeleteChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x02c1:
                r4.writeStartObject()
                java.lang.String r0 = "paper_enabled_users_group_removal"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperEnabledUsersGroupRemovalType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperEnabledUsersGroupRemovalType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperEnabledUsersGroupRemovalType r3 = r3.paperEnabledUsersGroupRemovalValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x02d7:
                r4.writeStartObject()
                java.lang.String r0 = "paper_enabled_users_group_addition"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperEnabledUsersGroupAdditionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperEnabledUsersGroupAdditionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperEnabledUsersGroupAdditionType r3 = r3.paperEnabledUsersGroupAdditionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x02ed:
                r4.writeStartObject()
                java.lang.String r0 = "paper_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperChangePolicyType r3 = r3.paperChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0303:
                r4.writeStartObject()
                java.lang.String r0 = "paper_change_member_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperChangeMemberPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperChangeMemberPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperChangeMemberPolicyType r3 = r3.paperChangeMemberPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0319:
                r4.writeStartObject()
                java.lang.String r0 = "paper_change_member_link_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperChangeMemberLinkPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperChangeMemberLinkPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperChangeMemberLinkPolicyType r3 = r3.paperChangeMemberLinkPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x032f:
                r4.writeStartObject()
                java.lang.String r0 = "paper_change_deployment_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperChangeDeploymentPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperChangeDeploymentPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperChangeDeploymentPolicyType r3 = r3.paperChangeDeploymentPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0345:
                r4.writeStartObject()
                java.lang.String r0 = "network_control_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.NetworkControlChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.NetworkControlChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.NetworkControlChangePolicyType r3 = r3.networkControlChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x035b:
                r4.writeStartObject()
                java.lang.String r0 = "microsoft_office_addin_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MicrosoftOfficeAddinChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MicrosoftOfficeAddinChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MicrosoftOfficeAddinChangePolicyType r3 = r3.microsoftOfficeAddinChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0371:
                r4.writeStartObject()
                java.lang.String r0 = "member_suggestions_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSuggestionsChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSuggestionsChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSuggestionsChangePolicyType r3 = r3.memberSuggestionsChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0387:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_remove_exception"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsRemoveExceptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsRemoveExceptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsRemoveExceptionType r3 = r3.memberSpaceLimitsRemoveExceptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x039d:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangePolicyType r3 = r3.memberSpaceLimitsChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x03b3:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_change_caps_type_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangeCapsTypePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsChangeCapsTypePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangeCapsTypePolicyType r3 = r3.memberSpaceLimitsChangeCapsTypePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x03c9:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_add_exception"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsAddExceptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsAddExceptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsAddExceptionType r3 = r3.memberSpaceLimitsAddExceptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x03df:
                r4.writeStartObject()
                java.lang.String r0 = "member_requests_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberRequestsChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberRequestsChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberRequestsChangePolicyType r3 = r3.memberRequestsChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x03f5:
                r4.writeStartObject()
                java.lang.String r0 = "group_user_management_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupUserManagementChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupUserManagementChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupUserManagementChangePolicyType r3 = r3.groupUserManagementChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x040b:
                r4.writeStartObject()
                java.lang.String r0 = "google_sso_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GoogleSsoChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GoogleSsoChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GoogleSsoChangePolicyType r3 = r3.googleSsoChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0421:
                r4.writeStartObject()
                java.lang.String r0 = "file_requests_emails_restricted_to_team_only"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestsEmailsRestrictedToTeamOnlyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestsEmailsRestrictedToTeamOnlyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestsEmailsRestrictedToTeamOnlyType r3 = r3.fileRequestsEmailsRestrictedToTeamOnlyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0437:
                r4.writeStartObject()
                java.lang.String r0 = "file_requests_emails_enabled"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestsEmailsEnabledType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestsEmailsEnabledType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestsEmailsEnabledType r3 = r3.fileRequestsEmailsEnabledValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x044d:
                r4.writeStartObject()
                java.lang.String r0 = "file_requests_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestsChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestsChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestsChangePolicyType r3 = r3.fileRequestsChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0463:
                r4.writeStartObject()
                java.lang.String r0 = "file_comments_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileCommentsChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileCommentsChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileCommentsChangePolicyType r3 = r3.fileCommentsChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0479:
                r4.writeStartObject()
                java.lang.String r0 = "extended_version_history_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ExtendedVersionHistoryChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ExtendedVersionHistoryChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ExtendedVersionHistoryChangePolicyType r3 = r3.extendedVersionHistoryChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x048f:
                r4.writeStartObject()
                java.lang.String r0 = "emm_remove_exception"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmRemoveExceptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmRemoveExceptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmRemoveExceptionType r3 = r3.emmRemoveExceptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x04a5:
                r4.writeStartObject()
                java.lang.String r0 = "emm_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmChangePolicyType r3 = r3.emmChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x04bb:
                r4.writeStartObject()
                java.lang.String r0 = "emm_add_exception"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmAddExceptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmAddExceptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmAddExceptionType r3 = r3.emmAddExceptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x04d1:
                r4.writeStartObject()
                java.lang.String r0 = "directory_restrictions_remove_members"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DirectoryRestrictionsRemoveMembersType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DirectoryRestrictionsRemoveMembersType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DirectoryRestrictionsRemoveMembersType r3 = r3.directoryRestrictionsRemoveMembersValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x04e7:
                r4.writeStartObject()
                java.lang.String r0 = "directory_restrictions_add_members"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DirectoryRestrictionsAddMembersType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DirectoryRestrictionsAddMembersType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DirectoryRestrictionsAddMembersType r3 = r3.directoryRestrictionsAddMembersValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x04fd:
                r4.writeStartObject()
                java.lang.String r0 = "device_approvals_change_unlink_action"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeUnlinkActionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceApprovalsChangeUnlinkActionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeUnlinkActionType r3 = r3.deviceApprovalsChangeUnlinkActionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0513:
                r4.writeStartObject()
                java.lang.String r0 = "device_approvals_change_overage_action"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeOverageActionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceApprovalsChangeOverageActionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeOverageActionType r3 = r3.deviceApprovalsChangeOverageActionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0529:
                r4.writeStartObject()
                java.lang.String r0 = "device_approvals_change_mobile_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeMobilePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceApprovalsChangeMobilePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeMobilePolicyType r3 = r3.deviceApprovalsChangeMobilePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x053f:
                r4.writeStartObject()
                java.lang.String r0 = "device_approvals_change_desktop_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeDesktopPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceApprovalsChangeDesktopPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceApprovalsChangeDesktopPolicyType r3 = r3.deviceApprovalsChangeDesktopPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0555:
                r4.writeStartObject()
                java.lang.String r0 = "data_placement_restriction_satisfy_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DataPlacementRestrictionSatisfyPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DataPlacementRestrictionSatisfyPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DataPlacementRestrictionSatisfyPolicyType r3 = r3.dataPlacementRestrictionSatisfyPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x056b:
                r4.writeStartObject()
                java.lang.String r0 = "data_placement_restriction_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DataPlacementRestrictionChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DataPlacementRestrictionChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DataPlacementRestrictionChangePolicyType r3 = r3.dataPlacementRestrictionChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0581:
                r4.writeStartObject()
                java.lang.String r0 = "allow_download_enabled"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AllowDownloadEnabledType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AllowDownloadEnabledType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AllowDownloadEnabledType r3 = r3.allowDownloadEnabledValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0597:
                r4.writeStartObject()
                java.lang.String r0 = "allow_download_disabled"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AllowDownloadDisabledType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AllowDownloadDisabledType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AllowDownloadDisabledType r3 = r3.allowDownloadDisabledValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x05ad:
                r4.writeStartObject()
                java.lang.String r0 = "account_capture_change_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AccountCaptureChangePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AccountCaptureChangePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AccountCaptureChangePolicyType r3 = r3.accountCaptureChangePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x05c3:
                r4.writeStartObject()
                java.lang.String r0 = "team_selective_sync_settings_changed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamSelectiveSyncSettingsChangedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamSelectiveSyncSettingsChangedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamSelectiveSyncSettingsChangedType r3 = r3.teamSelectiveSyncSettingsChangedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x05d9:
                r4.writeStartObject()
                java.lang.String r0 = "team_folder_rename"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamFolderRenameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamFolderRenameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamFolderRenameType r3 = r3.teamFolderRenameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x05ef:
                r4.writeStartObject()
                java.lang.String r0 = "team_folder_permanently_delete"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamFolderPermanentlyDeleteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamFolderPermanentlyDeleteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamFolderPermanentlyDeleteType r3 = r3.teamFolderPermanentlyDeleteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0605:
                r4.writeStartObject()
                java.lang.String r0 = "team_folder_downgrade"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamFolderDowngradeType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamFolderDowngradeType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamFolderDowngradeType r3 = r3.teamFolderDowngradeValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x061b:
                r4.writeStartObject()
                java.lang.String r0 = "team_folder_create"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamFolderCreateType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamFolderCreateType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamFolderCreateType r3 = r3.teamFolderCreateValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0631:
                r4.writeStartObject()
                java.lang.String r0 = "team_folder_change_status"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamFolderChangeStatusType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamFolderChangeStatusType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamFolderChangeStatusType r3 = r3.teamFolderChangeStatusValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0647:
                r4.writeStartObject()
                java.lang.String r0 = "sso_remove_logout_url"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoRemoveLogoutUrlType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoRemoveLogoutUrlType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoRemoveLogoutUrlType r3 = r3.ssoRemoveLogoutUrlValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x065d:
                r4.writeStartObject()
                java.lang.String r0 = "sso_remove_login_url"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoRemoveLoginUrlType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoRemoveLoginUrlType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoRemoveLoginUrlType r3 = r3.ssoRemoveLoginUrlValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0673:
                r4.writeStartObject()
                java.lang.String r0 = "sso_remove_cert"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoRemoveCertType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoRemoveCertType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoRemoveCertType r3 = r3.ssoRemoveCertValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0689:
                r4.writeStartObject()
                java.lang.String r0 = "sso_change_saml_identity_mode"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoChangeSamlIdentityModeType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoChangeSamlIdentityModeType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoChangeSamlIdentityModeType r3 = r3.ssoChangeSamlIdentityModeValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x069f:
                r4.writeStartObject()
                java.lang.String r0 = "sso_change_logout_url"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoChangeLogoutUrlType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoChangeLogoutUrlType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoChangeLogoutUrlType r3 = r3.ssoChangeLogoutUrlValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x06b5:
                r4.writeStartObject()
                java.lang.String r0 = "sso_change_login_url"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoChangeLoginUrlType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoChangeLoginUrlType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoChangeLoginUrlType r3 = r3.ssoChangeLoginUrlValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x06cb:
                r4.writeStartObject()
                java.lang.String r0 = "sso_change_cert"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoChangeCertType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoChangeCertType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoChangeCertType r3 = r3.ssoChangeCertValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x06e1:
                r4.writeStartObject()
                java.lang.String r0 = "sso_add_logout_url"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoAddLogoutUrlType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoAddLogoutUrlType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoAddLogoutUrlType r3 = r3.ssoAddLogoutUrlValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x06f7:
                r4.writeStartObject()
                java.lang.String r0 = "sso_add_login_url"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoAddLoginUrlType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoAddLoginUrlType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoAddLoginUrlType r3 = r3.ssoAddLoginUrlValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x070d:
                r4.writeStartObject()
                java.lang.String r0 = "sso_add_cert"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoAddCertType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoAddCertType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoAddCertType r3 = r3.ssoAddCertValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0723:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_view"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseViewType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseViewType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseViewType r3 = r3.showcaseViewValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0739:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_untrashed_deprecated"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseUntrashedDeprecatedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseUntrashedDeprecatedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseUntrashedDeprecatedType r3 = r3.showcaseUntrashedDeprecatedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x074f:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_untrashed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseUntrashedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseUntrashedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseUntrashedType r3 = r3.showcaseUntrashedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0765:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_unresolve_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseUnresolveCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseUnresolveCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseUnresolveCommentType r3 = r3.showcaseUnresolveCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x077b:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_trashed_deprecated"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseTrashedDeprecatedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseTrashedDeprecatedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseTrashedDeprecatedType r3 = r3.showcaseTrashedDeprecatedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0791:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_trashed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseTrashedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseTrashedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseTrashedType r3 = r3.showcaseTrashedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x07a7:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_restored"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseRestoredType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseRestoredType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseRestoredType r3 = r3.showcaseRestoredValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x07bd:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_resolve_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseResolveCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseResolveCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseResolveCommentType r3 = r3.showcaseResolveCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x07d3:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_request_access"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseRequestAccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseRequestAccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseRequestAccessType r3 = r3.showcaseRequestAccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x07e9:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_renamed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseRenamedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseRenamedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseRenamedType r3 = r3.showcaseRenamedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x07ff:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_remove_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseRemoveMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseRemoveMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseRemoveMemberType r3 = r3.showcaseRemoveMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0815:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_post_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcasePostCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcasePostCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcasePostCommentType r3 = r3.showcasePostCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x082b:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_permanently_deleted"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcasePermanentlyDeletedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcasePermanentlyDeletedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcasePermanentlyDeletedType r3 = r3.showcasePermanentlyDeletedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0841:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_file_view"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseFileViewType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseFileViewType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseFileViewType r3 = r3.showcaseFileViewValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0857:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_file_removed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseFileRemovedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseFileRemovedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseFileRemovedType r3 = r3.showcaseFileRemovedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x086d:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_file_download"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseFileDownloadType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseFileDownloadType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseFileDownloadType r3 = r3.showcaseFileDownloadValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0883:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_file_added"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseFileAddedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseFileAddedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseFileAddedType r3 = r3.showcaseFileAddedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0899:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_edit_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseEditCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseEditCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseEditCommentType r3 = r3.showcaseEditCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x08af:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_edited"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseEditedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseEditedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseEditedType r3 = r3.showcaseEditedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x08c5:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_delete_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseDeleteCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseDeleteCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseDeleteCommentType r3 = r3.showcaseDeleteCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x08db:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_created"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseCreatedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseCreatedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseCreatedType r3 = r3.showcaseCreatedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x08f1:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_archived"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseArchivedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseArchivedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseArchivedType r3 = r3.showcaseArchivedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0907:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_add_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseAddMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseAddMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseAddMemberType r3 = r3.showcaseAddMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x091d:
                r4.writeStartObject()
                java.lang.String r0 = "showcase_access_granted"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShowcaseAccessGrantedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShowcaseAccessGrantedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShowcaseAccessGrantedType r3 = r3.showcaseAccessGrantedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0933:
                r4.writeStartObject()
                java.lang.String r0 = "shmodel_group_share"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ShmodelGroupShareType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ShmodelGroupShareType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ShmodelGroupShareType r3 = r3.shmodelGroupShareValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0949:
                r4.writeStartObject()
                java.lang.String r0 = "shared_note_opened"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedNoteOpenedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedNoteOpenedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedNoteOpenedType r3 = r3.sharedNoteOpenedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x095f:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_view"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkViewType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkViewType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkViewType r3 = r3.sharedLinkViewValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0975:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_share"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkShareType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkShareType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkShareType r3 = r3.sharedLinkShareValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x098b:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_remove_expiry"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkRemoveExpiryType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkRemoveExpiryType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkRemoveExpiryType r3 = r3.sharedLinkRemoveExpiryValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x09a1:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_download"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkDownloadType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkDownloadType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkDownloadType r3 = r3.sharedLinkDownloadValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x09b7:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_disable"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkDisableType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkDisableType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkDisableType r3 = r3.sharedLinkDisableValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x09cd:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_create"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkCreateType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkCreateType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkCreateType r3 = r3.sharedLinkCreateValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x09e3:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_copy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkCopyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkCopyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkCopyType r3 = r3.sharedLinkCopyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x09f9:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_change_visibility"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkChangeVisibilityType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkChangeVisibilityType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkChangeVisibilityType r3 = r3.sharedLinkChangeVisibilityValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a0f:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_change_expiry"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkChangeExpiryType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkChangeExpiryType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkChangeExpiryType r3 = r3.sharedLinkChangeExpiryValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a25:
                r4.writeStartObject()
                java.lang.String r0 = "shared_link_add_expiry"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedLinkAddExpiryType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedLinkAddExpiryType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedLinkAddExpiryType r3 = r3.sharedLinkAddExpiryValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a3b:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_unmount"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderUnmountType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderUnmountType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderUnmountType r3 = r3.sharedFolderUnmountValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a51:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_transfer_ownership"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderTransferOwnershipType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderTransferOwnershipType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderTransferOwnershipType r3 = r3.sharedFolderTransferOwnershipValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a67:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_nest"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderNestType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderNestType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderNestType r3 = r3.sharedFolderNestValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a7d:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_mount"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderMountType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderMountType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderMountType r3 = r3.sharedFolderMountValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0a93:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_decline_invitation"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderDeclineInvitationType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderDeclineInvitationType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderDeclineInvitationType r3 = r3.sharedFolderDeclineInvitationValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0aa9:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_create"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderCreateType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderCreateType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderCreateType r3 = r3.sharedFolderCreateValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0abf:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_change_members_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderChangeMembersPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderChangeMembersPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderChangeMembersPolicyType r3 = r3.sharedFolderChangeMembersPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ad5:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_change_members_management_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderChangeMembersManagementPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderChangeMembersManagementPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderChangeMembersManagementPolicyType r3 = r3.sharedFolderChangeMembersManagementPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0aeb:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_change_members_inheritance_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderChangeMembersInheritancePolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderChangeMembersInheritancePolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderChangeMembersInheritancePolicyType r3 = r3.sharedFolderChangeMembersInheritancePolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b01:
                r4.writeStartObject()
                java.lang.String r0 = "shared_folder_change_link_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedFolderChangeLinkPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedFolderChangeLinkPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedFolderChangeLinkPolicyType r3 = r3.sharedFolderChangeLinkPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b17:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_view"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentViewType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentViewType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentViewType r3 = r3.sharedContentViewValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b2d:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_unshare"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentUnshareType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentUnshareType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentUnshareType r3 = r3.sharedContentUnshareValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b43:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_request_access"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentRequestAccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentRequestAccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentRequestAccessType r3 = r3.sharedContentRequestAccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b59:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_remove_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentRemoveMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentRemoveMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentRemoveMemberType r3 = r3.sharedContentRemoveMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b6f:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_remove_link_password"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentRemoveLinkPasswordType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentRemoveLinkPasswordType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentRemoveLinkPasswordType r3 = r3.sharedContentRemoveLinkPasswordValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b85:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_remove_link_expiry"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentRemoveLinkExpiryType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentRemoveLinkExpiryType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentRemoveLinkExpiryType r3 = r3.sharedContentRemoveLinkExpiryValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0b9b:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_remove_invitees"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentRemoveInviteesType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentRemoveInviteesType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentRemoveInviteesType r3 = r3.sharedContentRemoveInviteesValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0bb1:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_relinquish_membership"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentRelinquishMembershipType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentRelinquishMembershipType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentRelinquishMembershipType r3 = r3.sharedContentRelinquishMembershipValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0bc7:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_download"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentDownloadType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentDownloadType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentDownloadType r3 = r3.sharedContentDownloadValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0bdd:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_copy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentCopyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentCopyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentCopyType r3 = r3.sharedContentCopyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0bf3:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_claim_invitation"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentClaimInvitationType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentClaimInvitationType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentClaimInvitationType r3 = r3.sharedContentClaimInvitationValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c09:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_viewer_info_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeViewerInfoPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeViewerInfoPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeViewerInfoPolicyType r3 = r3.sharedContentChangeViewerInfoPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c1f:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_member_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeMemberRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeMemberRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeMemberRoleType r3 = r3.sharedContentChangeMemberRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c35:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_link_password"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeLinkPasswordType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeLinkPasswordType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeLinkPasswordType r3 = r3.sharedContentChangeLinkPasswordValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c4b:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_link_expiry"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeLinkExpiryType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeLinkExpiryType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeLinkExpiryType r3 = r3.sharedContentChangeLinkExpiryValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c61:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_link_audience"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeLinkAudienceType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeLinkAudienceType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeLinkAudienceType r3 = r3.sharedContentChangeLinkAudienceValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c77:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_invitee_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeInviteeRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeInviteeRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeInviteeRoleType r3 = r3.sharedContentChangeInviteeRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0c8d:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_change_downloads_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentChangeDownloadsPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentChangeDownloadsPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentChangeDownloadsPolicyType r3 = r3.sharedContentChangeDownloadsPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ca3:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_add_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentAddMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentAddMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentAddMemberType r3 = r3.sharedContentAddMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0cb9:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_add_link_password"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentAddLinkPasswordType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentAddLinkPasswordType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentAddLinkPasswordType r3 = r3.sharedContentAddLinkPasswordValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ccf:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_add_link_expiry"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentAddLinkExpiryType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentAddLinkExpiryType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentAddLinkExpiryType r3 = r3.sharedContentAddLinkExpiryValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ce5:
                r4.writeStartObject()
                java.lang.String r0 = "shared_content_add_invitees"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SharedContentAddInviteesType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SharedContentAddInviteesType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SharedContentAddInviteesType r3 = r3.sharedContentAddInviteesValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0cfb:
                r4.writeStartObject()
                java.lang.String r0 = "sf_team_uninvite"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfTeamUninviteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfTeamUninviteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfTeamUninviteType r3 = r3.sfTeamUninviteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d11:
                r4.writeStartObject()
                java.lang.String r0 = "sf_team_join_from_oob_link"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfTeamJoinFromOobLinkType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfTeamJoinFromOobLinkType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfTeamJoinFromOobLinkType r3 = r3.sfTeamJoinFromOobLinkValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d27:
                r4.writeStartObject()
                java.lang.String r0 = "sf_team_join"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfTeamJoinType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfTeamJoinType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfTeamJoinType r3 = r3.sfTeamJoinValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d3d:
                r4.writeStartObject()
                java.lang.String r0 = "sf_team_invite_change_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfTeamInviteChangeRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfTeamInviteChangeRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfTeamInviteChangeRoleType r3 = r3.sfTeamInviteChangeRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d53:
                r4.writeStartObject()
                java.lang.String r0 = "sf_team_invite"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfTeamInviteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfTeamInviteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfTeamInviteType r3 = r3.sfTeamInviteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d69:
                r4.writeStartObject()
                java.lang.String r0 = "sf_team_grant_access"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfTeamGrantAccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfTeamGrantAccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfTeamGrantAccessType r3 = r3.sfTeamGrantAccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d7f:
                r4.writeStartObject()
                java.lang.String r0 = "sf_invite_group"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfInviteGroupType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfInviteGroupType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfInviteGroupType r3 = r3.sfInviteGroupValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0d95:
                r4.writeStartObject()
                java.lang.String r0 = "sf_fb_uninvite"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfFbUninviteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfFbUninviteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfFbUninviteType r3 = r3.sfFbUninviteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0dab:
                r4.writeStartObject()
                java.lang.String r0 = "sf_fb_invite_change_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfFbInviteChangeRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfFbInviteChangeRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfFbInviteChangeRoleType r3 = r3.sfFbInviteChangeRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0dc1:
                r4.writeStartObject()
                java.lang.String r0 = "sf_fb_invite"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfFbInviteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfFbInviteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfFbInviteType r3 = r3.sfFbInviteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0dd7:
                r4.writeStartObject()
                java.lang.String r0 = "sf_external_invite_warn"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfExternalInviteWarnType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfExternalInviteWarnType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfExternalInviteWarnType r3 = r3.sfExternalInviteWarnValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ded:
                r4.writeStartObject()
                java.lang.String r0 = "sf_allow_non_members_to_view_shared_links"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfAllowNonMembersToViewSharedLinksType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfAllowNonMembersToViewSharedLinksType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfAllowNonMembersToViewSharedLinksType r3 = r3.sfAllowNonMembersToViewSharedLinksValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e03:
                r4.writeStartObject()
                java.lang.String r0 = "sf_add_group"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SfAddGroupType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SfAddGroupType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SfAddGroupType r3 = r3.sfAddGroupValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e19:
                r4.writeStartObject()
                java.lang.String r0 = "open_note_shared"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.OpenNoteSharedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.OpenNoteSharedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.OpenNoteSharedType r3 = r3.openNoteSharedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e2f:
                r4.writeStartObject()
                java.lang.String r0 = "note_share_receive"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.NoteShareReceiveType$Serializer r0 = com.dropbox.core.p005v2.teamlog.NoteShareReceiveType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.NoteShareReceiveType r3 = r3.noteShareReceiveValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e45:
                r4.writeStartObject()
                java.lang.String r0 = "note_shared"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.NoteSharedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.NoteSharedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.NoteSharedType r3 = r3.noteSharedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e5b:
                r4.writeStartObject()
                java.lang.String r0 = "note_acl_team_link"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.NoteAclTeamLinkType$Serializer r0 = com.dropbox.core.p005v2.teamlog.NoteAclTeamLinkType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.NoteAclTeamLinkType r3 = r3.noteAclTeamLinkValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e71:
                r4.writeStartObject()
                java.lang.String r0 = "note_acl_link"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.NoteAclLinkType$Serializer r0 = com.dropbox.core.p005v2.teamlog.NoteAclLinkType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.NoteAclLinkType r3 = r3.noteAclLinkValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e87:
                r4.writeStartObject()
                java.lang.String r0 = "note_acl_invite_only"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.NoteAclInviteOnlyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.NoteAclInviteOnlyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.NoteAclInviteOnlyType r3 = r3.noteAclInviteOnlyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0e9d:
                r4.writeStartObject()
                java.lang.String r0 = "collection_share"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.CollectionShareType$Serializer r0 = com.dropbox.core.p005v2.teamlog.CollectionShareType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.CollectionShareType r3 = r3.collectionShareValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0eb3:
                r4.writeStartObject()
                java.lang.String r0 = "team_activity_create_report"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.TeamActivityCreateReportType$Serializer r0 = com.dropbox.core.p005v2.teamlog.TeamActivityCreateReportType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.TeamActivityCreateReportType r3 = r3.teamActivityCreateReportValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ec9:
                r4.writeStartObject()
                java.lang.String r0 = "smart_sync_create_admin_privilege_report"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SmartSyncCreateAdminPrivilegeReportType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SmartSyncCreateAdminPrivilegeReportType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SmartSyncCreateAdminPrivilegeReportType r3 = r3.smartSyncCreateAdminPrivilegeReportValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0edf:
                r4.writeStartObject()
                java.lang.String r0 = "paper_admin_export_start"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperAdminExportStartType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperAdminExportStartType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperAdminExportStartType r3 = r3.paperAdminExportStartValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ef5:
                r4.writeStartObject()
                java.lang.String r0 = "export_members_report"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ExportMembersReportType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ExportMembersReportType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ExportMembersReportType r3 = r3.exportMembersReportValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f0b:
                r4.writeStartObject()
                java.lang.String r0 = "emm_create_usage_report"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmCreateUsageReportType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmCreateUsageReportType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmCreateUsageReportType r3 = r3.emmCreateUsageReportValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f21:
                r4.writeStartObject()
                java.lang.String r0 = "emm_create_exceptions_report"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmCreateExceptionsReportType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmCreateExceptionsReportType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmCreateExceptionsReportType r3 = r3.emmCreateExceptionsReportValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f37:
                r4.writeStartObject()
                java.lang.String r0 = "password_reset_all"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PasswordResetAllType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PasswordResetAllType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PasswordResetAllType r3 = r3.passwordResetAllValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f4d:
                r4.writeStartObject()
                java.lang.String r0 = "password_reset"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PasswordResetType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PasswordResetType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PasswordResetType r3 = r3.passwordResetValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f63:
                r4.writeStartObject()
                java.lang.String r0 = "password_change"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PasswordChangeType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PasswordChangeType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PasswordChangeType r3 = r3.passwordChangeValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f79:
                r4.writeStartObject()
                java.lang.String r0 = "paper_folder_team_invite"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperFolderTeamInviteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperFolderTeamInviteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperFolderTeamInviteType r3 = r3.paperFolderTeamInviteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0f8f:
                r4.writeStartObject()
                java.lang.String r0 = "paper_folder_followed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperFolderFollowedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperFolderFollowedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperFolderFollowedType r3 = r3.paperFolderFollowedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0fa5:
                r4.writeStartObject()
                java.lang.String r0 = "paper_folder_deleted"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperFolderDeletedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperFolderDeletedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperFolderDeletedType r3 = r3.paperFolderDeletedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0fbb:
                r4.writeStartObject()
                java.lang.String r0 = "paper_folder_change_subscription"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperFolderChangeSubscriptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperFolderChangeSubscriptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperFolderChangeSubscriptionType r3 = r3.paperFolderChangeSubscriptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0fd1:
                r4.writeStartObject()
                java.lang.String r0 = "paper_external_view_forbid"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperExternalViewForbidType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperExternalViewForbidType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperExternalViewForbidType r3 = r3.paperExternalViewForbidValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0fe7:
                r4.writeStartObject()
                java.lang.String r0 = "paper_external_view_default_team"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperExternalViewDefaultTeamType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperExternalViewDefaultTeamType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperExternalViewDefaultTeamType r3 = r3.paperExternalViewDefaultTeamValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x0ffd:
                r4.writeStartObject()
                java.lang.String r0 = "paper_external_view_allow"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperExternalViewAllowType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperExternalViewAllowType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperExternalViewAllowType r3 = r3.paperExternalViewAllowValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1013:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_view"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocViewType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocViewType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocViewType r3 = r3.paperDocViewValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1029:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_untrashed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocUntrashedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocUntrashedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocUntrashedType r3 = r3.paperDocUntrashedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x103f:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_unresolve_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocUnresolveCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocUnresolveCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocUnresolveCommentType r3 = r3.paperDocUnresolveCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1055:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_trashed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocTrashedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocTrashedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocTrashedType r3 = r3.paperDocTrashedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x106b:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_team_invite"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocTeamInviteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocTeamInviteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocTeamInviteType r3 = r3.paperDocTeamInviteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1081:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_slack_share"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocSlackShareType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocSlackShareType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocSlackShareType r3 = r3.paperDocSlackShareValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1097:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_revert"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocRevertType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocRevertType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocRevertType r3 = r3.paperDocRevertValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x10ad:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_resolve_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocResolveCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocResolveCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocResolveCommentType r3 = r3.paperDocResolveCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x10c3:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_request_access"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocRequestAccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocRequestAccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocRequestAccessType r3 = r3.paperDocRequestAccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x10d9:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_ownership_changed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocOwnershipChangedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocOwnershipChangedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocOwnershipChangedType r3 = r3.paperDocOwnershipChangedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x10ef:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_mention"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocMentionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocMentionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocMentionType r3 = r3.paperDocMentionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1105:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_followed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocFollowedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocFollowedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocFollowedType r3 = r3.paperDocFollowedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x111b:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_edit_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocEditCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocEditCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocEditCommentType r3 = r3.paperDocEditCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1131:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_edit"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocEditType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocEditType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocEditType r3 = r3.paperDocEditValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1147:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_download"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocDownloadType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocDownloadType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocDownloadType r3 = r3.paperDocDownloadValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x115d:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_delete_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocDeleteCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocDeleteCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocDeleteCommentType r3 = r3.paperDocDeleteCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1173:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_deleted"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocDeletedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocDeletedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocDeletedType r3 = r3.paperDocDeletedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1189:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_change_subscription"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocChangeSubscriptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocChangeSubscriptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocChangeSubscriptionType r3 = r3.paperDocChangeSubscriptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x119f:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_change_sharing_policy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocChangeSharingPolicyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocChangeSharingPolicyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocChangeSharingPolicyType r3 = r3.paperDocChangeSharingPolicyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x11b5:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_change_member_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocChangeMemberRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocChangeMemberRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocChangeMemberRoleType r3 = r3.paperDocChangeMemberRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x11cb:
                r4.writeStartObject()
                java.lang.String r0 = "paper_doc_add_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperDocAddCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperDocAddCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperDocAddCommentType r3 = r3.paperDocAddCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x11e1:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_restore"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentRestoreType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentRestoreType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentRestoreType r3 = r3.paperContentRestoreValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x11f7:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_rename"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentRenameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentRenameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentRenameType r3 = r3.paperContentRenameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x120d:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_remove_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentRemoveMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentRemoveMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentRemoveMemberType r3 = r3.paperContentRemoveMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1223:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_remove_from_folder"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentRemoveFromFolderType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentRemoveFromFolderType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentRemoveFromFolderType r3 = r3.paperContentRemoveFromFolderValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1239:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_permanently_delete"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentPermanentlyDeleteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentPermanentlyDeleteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentPermanentlyDeleteType r3 = r3.paperContentPermanentlyDeleteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x124f:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_create"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentCreateType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentCreateType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentCreateType r3 = r3.paperContentCreateValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1265:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_archive"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentArchiveType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentArchiveType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentArchiveType r3 = r3.paperContentArchiveValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x127b:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_add_to_folder"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentAddToFolderType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentAddToFolderType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentAddToFolderType r3 = r3.paperContentAddToFolderValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1291:
                r4.writeStartObject()
                java.lang.String r0 = "paper_content_add_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.PaperContentAddMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.PaperContentAddMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.PaperContentAddMemberType r3 = r3.paperContentAddMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x12a7:
                r4.writeStartObject()
                java.lang.String r0 = "secondary_mails_policy_changed"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SecondaryMailsPolicyChangedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SecondaryMailsPolicyChangedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SecondaryMailsPolicyChangedType r3 = r3.secondaryMailsPolicyChangedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x12bd:
                r4.writeStartObject()
                java.lang.String r0 = "member_transfer_account_contents"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberTransferAccountContentsType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberTransferAccountContentsType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberTransferAccountContentsType r3 = r3.memberTransferAccountContentsValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x12d3:
                r4.writeStartObject()
                java.lang.String r0 = "member_suggest"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSuggestType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSuggestType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSuggestType r3 = r3.memberSuggestValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x12e9:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_remove_custom_quota"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsRemoveCustomQuotaType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsRemoveCustomQuotaType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsRemoveCustomQuotaType r3 = r3.memberSpaceLimitsRemoveCustomQuotaValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x12ff:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_change_status"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangeStatusType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsChangeStatusType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangeStatusType r3 = r3.memberSpaceLimitsChangeStatusValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1315:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_change_custom_quota"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangeCustomQuotaType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsChangeCustomQuotaType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsChangeCustomQuotaType r3 = r3.memberSpaceLimitsChangeCustomQuotaValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x132b:
                r4.writeStartObject()
                java.lang.String r0 = "member_space_limits_add_custom_quota"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsAddCustomQuotaType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberSpaceLimitsAddCustomQuotaType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberSpaceLimitsAddCustomQuotaType r3 = r3.memberSpaceLimitsAddCustomQuotaValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1341:
                r4.writeStartObject()
                java.lang.String r0 = "member_permanently_delete_account_contents"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberPermanentlyDeleteAccountContentsType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberPermanentlyDeleteAccountContentsType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberPermanentlyDeleteAccountContentsType r3 = r3.memberPermanentlyDeleteAccountContentsValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1357:
                r4.writeStartObject()
                java.lang.String r0 = "member_delete_manual_contacts"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberDeleteManualContactsType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberDeleteManualContactsType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberDeleteManualContactsType r3 = r3.memberDeleteManualContactsValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x136d:
                r4.writeStartObject()
                java.lang.String r0 = "member_change_status"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberChangeStatusType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberChangeStatusType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberChangeStatusType r3 = r3.memberChangeStatusValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1383:
                r4.writeStartObject()
                java.lang.String r0 = "member_change_name"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberChangeNameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberChangeNameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberChangeNameType r3 = r3.memberChangeNameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1399:
                r4.writeStartObject()
                java.lang.String r0 = "member_change_membership_type"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberChangeMembershipTypeType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberChangeMembershipTypeType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberChangeMembershipTypeType r3 = r3.memberChangeMembershipTypeValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x13af:
                r4.writeStartObject()
                java.lang.String r0 = "member_change_email"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberChangeEmailType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberChangeEmailType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberChangeEmailType r3 = r3.memberChangeEmailValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x13c5:
                r4.writeStartObject()
                java.lang.String r0 = "member_change_admin_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberChangeAdminRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberChangeAdminRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberChangeAdminRoleType r3 = r3.memberChangeAdminRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x13db:
                r4.writeStartObject()
                java.lang.String r0 = "member_add_name"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.MemberAddNameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.MemberAddNameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.MemberAddNameType r3 = r3.memberAddNameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x13f1:
                r4.writeStartObject()
                java.lang.String r0 = "sso_error"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SsoErrorType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SsoErrorType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SsoErrorType r3 = r3.ssoErrorValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1407:
                r4.writeStartObject()
                java.lang.String r0 = "sign_in_as_session_start"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SignInAsSessionStartType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SignInAsSessionStartType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SignInAsSessionStartType r3 = r3.signInAsSessionStartValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x141d:
                r4.writeStartObject()
                java.lang.String r0 = "sign_in_as_session_end"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.SignInAsSessionEndType$Serializer r0 = com.dropbox.core.p005v2.teamlog.SignInAsSessionEndType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.SignInAsSessionEndType r3 = r3.signInAsSessionEndValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1433:
                r4.writeStartObject()
                java.lang.String r0 = "reseller_support_session_start"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ResellerSupportSessionStartType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ResellerSupportSessionStartType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ResellerSupportSessionStartType r3 = r3.resellerSupportSessionStartValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1449:
                r4.writeStartObject()
                java.lang.String r0 = "reseller_support_session_end"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.ResellerSupportSessionEndType$Serializer r0 = com.dropbox.core.p005v2.teamlog.ResellerSupportSessionEndType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.ResellerSupportSessionEndType r3 = r3.resellerSupportSessionEndValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x145f:
                r4.writeStartObject()
                java.lang.String r0 = "logout"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.LogoutType$Serializer r0 = com.dropbox.core.p005v2.teamlog.LogoutType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.LogoutType r3 = r3.logoutValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1475:
                r4.writeStartObject()
                java.lang.String r0 = "login_success"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.LoginSuccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.LoginSuccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.LoginSuccessType r3 = r3.loginSuccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x148b:
                r4.writeStartObject()
                java.lang.String r0 = "login_fail"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.LoginFailType$Serializer r0 = com.dropbox.core.p005v2.teamlog.LoginFailType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.LoginFailType r3 = r3.loginFailValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x14a1:
                r4.writeStartObject()
                java.lang.String r0 = "emm_error"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmErrorType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmErrorType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmErrorType r3 = r3.emmErrorValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x14b7:
                r4.writeStartObject()
                java.lang.String r0 = "group_rename"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupRenameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupRenameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupRenameType r3 = r3.groupRenameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x14cd:
                r4.writeStartObject()
                java.lang.String r0 = "group_remove_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupRemoveMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupRemoveMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupRemoveMemberType r3 = r3.groupRemoveMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x14e3:
                r4.writeStartObject()
                java.lang.String r0 = "group_remove_external_id"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupRemoveExternalIdType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupRemoveExternalIdType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupRemoveExternalIdType r3 = r3.groupRemoveExternalIdValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x14f9:
                r4.writeStartObject()
                java.lang.String r0 = "group_moved"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupMovedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupMovedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupMovedType r3 = r3.groupMovedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x150f:
                r4.writeStartObject()
                java.lang.String r0 = "group_join_policy_updated"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupJoinPolicyUpdatedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupJoinPolicyUpdatedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupJoinPolicyUpdatedType r3 = r3.groupJoinPolicyUpdatedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1525:
                r4.writeStartObject()
                java.lang.String r0 = "group_description_updated"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupDescriptionUpdatedType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupDescriptionUpdatedType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupDescriptionUpdatedType r3 = r3.groupDescriptionUpdatedValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x153b:
                r4.writeStartObject()
                java.lang.String r0 = "group_delete"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupDeleteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupDeleteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupDeleteType r3 = r3.groupDeleteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1551:
                r4.writeStartObject()
                java.lang.String r0 = "group_create"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupCreateType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupCreateType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupCreateType r3 = r3.groupCreateValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1567:
                r4.writeStartObject()
                java.lang.String r0 = "group_change_member_role"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupChangeMemberRoleType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupChangeMemberRoleType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupChangeMemberRoleType r3 = r3.groupChangeMemberRoleValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x157d:
                r4.writeStartObject()
                java.lang.String r0 = "group_change_management_type"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupChangeManagementTypeType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupChangeManagementTypeType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupChangeManagementTypeType r3 = r3.groupChangeManagementTypeValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1593:
                r4.writeStartObject()
                java.lang.String r0 = "group_change_external_id"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupChangeExternalIdType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupChangeExternalIdType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupChangeExternalIdType r3 = r3.groupChangeExternalIdValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x15a9:
                r4.writeStartObject()
                java.lang.String r0 = "group_add_member"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupAddMemberType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupAddMemberType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupAddMemberType r3 = r3.groupAddMemberValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x15bf:
                r4.writeStartObject()
                java.lang.String r0 = "group_add_external_id"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.GroupAddExternalIdType$Serializer r0 = com.dropbox.core.p005v2.teamlog.GroupAddExternalIdType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.GroupAddExternalIdType r3 = r3.groupAddExternalIdValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x15d5:
                r4.writeStartObject()
                java.lang.String r0 = "file_request_receive_file"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestReceiveFileType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestReceiveFileType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestReceiveFileType r3 = r3.fileRequestReceiveFileValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x15eb:
                r4.writeStartObject()
                java.lang.String r0 = "file_request_create"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestCreateType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestCreateType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestCreateType r3 = r3.fileRequestCreateValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1601:
                r4.writeStartObject()
                java.lang.String r0 = "file_request_close"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestCloseType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestCloseType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestCloseType r3 = r3.fileRequestCloseValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1617:
                r4.writeStartObject()
                java.lang.String r0 = "file_request_change"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRequestChangeType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRequestChangeType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRequestChangeType r3 = r3.fileRequestChangeValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x162d:
                r4.writeStartObject()
                java.lang.String r0 = "file_save_copy_reference"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileSaveCopyReferenceType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileSaveCopyReferenceType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileSaveCopyReferenceType r3 = r3.fileSaveCopyReferenceValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1643:
                r4.writeStartObject()
                java.lang.String r0 = "file_rollback_changes"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRollbackChangesType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRollbackChangesType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRollbackChangesType r3 = r3.fileRollbackChangesValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1659:
                r4.writeStartObject()
                java.lang.String r0 = "file_revert"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRevertType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRevertType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRevertType r3 = r3.fileRevertValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x166f:
                r4.writeStartObject()
                java.lang.String r0 = "file_restore"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRestoreType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRestoreType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRestoreType r3 = r3.fileRestoreValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1685:
                r4.writeStartObject()
                java.lang.String r0 = "file_rename"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileRenameType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileRenameType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileRenameType r3 = r3.fileRenameValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x169b:
                r4.writeStartObject()
                java.lang.String r0 = "file_preview"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FilePreviewType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FilePreviewType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FilePreviewType r3 = r3.filePreviewValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x16b1:
                r4.writeStartObject()
                java.lang.String r0 = "file_permanently_delete"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FilePermanentlyDeleteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FilePermanentlyDeleteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FilePermanentlyDeleteType r3 = r3.filePermanentlyDeleteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x16c7:
                r4.writeStartObject()
                java.lang.String r0 = "file_move"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileMoveType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileMoveType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileMoveType r3 = r3.fileMoveValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x16dd:
                r4.writeStartObject()
                java.lang.String r0 = "file_get_copy_reference"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileGetCopyReferenceType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileGetCopyReferenceType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileGetCopyReferenceType r3 = r3.fileGetCopyReferenceValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x16f3:
                r4.writeStartObject()
                java.lang.String r0 = "file_edit"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileEditType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileEditType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileEditType r3 = r3.fileEditValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1709:
                r4.writeStartObject()
                java.lang.String r0 = "file_download"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileDownloadType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileDownloadType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileDownloadType r3 = r3.fileDownloadValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x171f:
                r4.writeStartObject()
                java.lang.String r0 = "file_delete"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileDeleteType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileDeleteType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileDeleteType r3 = r3.fileDeleteValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1735:
                r4.writeStartObject()
                java.lang.String r0 = "file_copy"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileCopyType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileCopyType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileCopyType r3 = r3.fileCopyValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x174b:
                r4.writeStartObject()
                java.lang.String r0 = "file_add"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileAddType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileAddType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileAddType r3 = r3.fileAddValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1761:
                r4.writeStartObject()
                java.lang.String r0 = "create_folder"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.CreateFolderType$Serializer r0 = com.dropbox.core.p005v2.teamlog.CreateFolderType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.CreateFolderType r3 = r3.createFolderValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1777:
                r4.writeStartObject()
                java.lang.String r0 = "enabled_domain_invites"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EnabledDomainInvitesType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EnabledDomainInvitesType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EnabledDomainInvitesType r3 = r3.enabledDomainInvitesValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x178d:
                r4.writeStartObject()
                java.lang.String r0 = "domain_verification_remove_domain"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainVerificationRemoveDomainType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainVerificationRemoveDomainType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainVerificationRemoveDomainType r3 = r3.domainVerificationRemoveDomainValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x17a3:
                r4.writeStartObject()
                java.lang.String r0 = "domain_verification_add_domain_success"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainVerificationAddDomainSuccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainVerificationAddDomainSuccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainVerificationAddDomainSuccessType r3 = r3.domainVerificationAddDomainSuccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x17b9:
                r4.writeStartObject()
                java.lang.String r0 = "domain_verification_add_domain_fail"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainVerificationAddDomainFailType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainVerificationAddDomainFailType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainVerificationAddDomainFailType r3 = r3.domainVerificationAddDomainFailValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x17cf:
                r4.writeStartObject()
                java.lang.String r0 = "domain_invites_set_invite_new_user_pref_to_yes"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainInvitesSetInviteNewUserPrefToYesType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainInvitesSetInviteNewUserPrefToYesType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainInvitesSetInviteNewUserPrefToYesType r3 = r3.domainInvitesSetInviteNewUserPrefToYesValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x17e5:
                r4.writeStartObject()
                java.lang.String r0 = "domain_invites_set_invite_new_user_pref_to_no"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainInvitesSetInviteNewUserPrefToNoType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainInvitesSetInviteNewUserPrefToNoType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainInvitesSetInviteNewUserPrefToNoType r3 = r3.domainInvitesSetInviteNewUserPrefToNoValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x17fb:
                r4.writeStartObject()
                java.lang.String r0 = "domain_invites_request_to_join_team"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainInvitesRequestToJoinTeamType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainInvitesRequestToJoinTeamType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainInvitesRequestToJoinTeamType r3 = r3.domainInvitesRequestToJoinTeamValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1811:
                r4.writeStartObject()
                java.lang.String r0 = "domain_invites_email_existing_users"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainInvitesEmailExistingUsersType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainInvitesEmailExistingUsersType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainInvitesEmailExistingUsersType r3 = r3.domainInvitesEmailExistingUsersValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1827:
                r4.writeStartObject()
                java.lang.String r0 = "domain_invites_decline_request_to_join_team"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainInvitesDeclineRequestToJoinTeamType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainInvitesDeclineRequestToJoinTeamType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainInvitesDeclineRequestToJoinTeamType r3 = r3.domainInvitesDeclineRequestToJoinTeamValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x183d:
                r4.writeStartObject()
                java.lang.String r0 = "domain_invites_approve_request_to_join_team"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DomainInvitesApproveRequestToJoinTeamType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DomainInvitesApproveRequestToJoinTeamType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DomainInvitesApproveRequestToJoinTeamType r3 = r3.domainInvitesApproveRequestToJoinTeamValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1853:
                r4.writeStartObject()
                java.lang.String r0 = "disabled_domain_invites"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DisabledDomainInvitesType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DisabledDomainInvitesType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DisabledDomainInvitesType r3 = r3.disabledDomainInvitesValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1869:
                r4.writeStartObject()
                java.lang.String r0 = "account_capture_relinquish_account"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AccountCaptureRelinquishAccountType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AccountCaptureRelinquishAccountType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AccountCaptureRelinquishAccountType r3 = r3.accountCaptureRelinquishAccountValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x187f:
                r4.writeStartObject()
                java.lang.String r0 = "account_capture_notification_emails_sent"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AccountCaptureNotificationEmailsSentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AccountCaptureNotificationEmailsSentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AccountCaptureNotificationEmailsSentType r3 = r3.accountCaptureNotificationEmailsSentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1895:
                r4.writeStartObject()
                java.lang.String r0 = "account_capture_migrate_account"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AccountCaptureMigrateAccountType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AccountCaptureMigrateAccountType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AccountCaptureMigrateAccountType r3 = r3.accountCaptureMigrateAccountValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x18ab:
                r4.writeStartObject()
                java.lang.String r0 = "account_capture_change_availability"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AccountCaptureChangeAvailabilityType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AccountCaptureChangeAvailabilityType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AccountCaptureChangeAvailabilityType r3 = r3.accountCaptureChangeAvailabilityValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x18c1:
                r4.writeStartObject()
                java.lang.String r0 = "emm_refresh_auth_token"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.EmmRefreshAuthTokenType$Serializer r0 = com.dropbox.core.p005v2.teamlog.EmmRefreshAuthTokenType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.EmmRefreshAuthTokenType r3 = r3.emmRefreshAuthTokenValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x18d7:
                r4.writeStartObject()
                java.lang.String r0 = "device_unlink"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceUnlinkType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceUnlinkType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceUnlinkType r3 = r3.deviceUnlinkValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x18ed:
                r4.writeStartObject()
                java.lang.String r0 = "device_management_enabled"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceManagementEnabledType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceManagementEnabledType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceManagementEnabledType r3 = r3.deviceManagementEnabledValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1903:
                r4.writeStartObject()
                java.lang.String r0 = "device_management_disabled"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceManagementDisabledType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceManagementDisabledType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceManagementDisabledType r3 = r3.deviceManagementDisabledValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1919:
                r4.writeStartObject()
                java.lang.String r0 = "device_link_success"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceLinkSuccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceLinkSuccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceLinkSuccessType r3 = r3.deviceLinkSuccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x192f:
                r4.writeStartObject()
                java.lang.String r0 = "device_link_fail"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceLinkFailType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceLinkFailType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceLinkFailType r3 = r3.deviceLinkFailValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1945:
                r4.writeStartObject()
                java.lang.String r0 = "device_delete_on_unlink_success"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceDeleteOnUnlinkSuccessType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceDeleteOnUnlinkSuccessType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceDeleteOnUnlinkSuccessType r3 = r3.deviceDeleteOnUnlinkSuccessValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x195b:
                r4.writeStartObject()
                java.lang.String r0 = "device_delete_on_unlink_fail"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceDeleteOnUnlinkFailType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceDeleteOnUnlinkFailType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceDeleteOnUnlinkFailType r3 = r3.deviceDeleteOnUnlinkFailValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1971:
                r4.writeStartObject()
                java.lang.String r0 = "device_change_ip_web"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceChangeIpWebType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceChangeIpWebType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceChangeIpWebType r3 = r3.deviceChangeIpWebValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1987:
                r4.writeStartObject()
                java.lang.String r0 = "device_change_ip_mobile"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceChangeIpMobileType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceChangeIpMobileType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceChangeIpMobileType r3 = r3.deviceChangeIpMobileValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x199d:
                r4.writeStartObject()
                java.lang.String r0 = "device_change_ip_desktop"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.DeviceChangeIpDesktopType$Serializer r0 = com.dropbox.core.p005v2.teamlog.DeviceChangeIpDesktopType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.DeviceChangeIpDesktopType r3 = r3.deviceChangeIpDesktopValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x19b3:
                r4.writeStartObject()
                java.lang.String r0 = "file_unresolve_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileUnresolveCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileUnresolveCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileUnresolveCommentType r3 = r3.fileUnresolveCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x19c9:
                r4.writeStartObject()
                java.lang.String r0 = "file_unlike_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileUnlikeCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileUnlikeCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileUnlikeCommentType r3 = r3.fileUnlikeCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x19df:
                r4.writeStartObject()
                java.lang.String r0 = "file_resolve_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileResolveCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileResolveCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileResolveCommentType r3 = r3.fileResolveCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x19f5:
                r4.writeStartObject()
                java.lang.String r0 = "file_like_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileLikeCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileLikeCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileLikeCommentType r3 = r3.fileLikeCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a0b:
                r4.writeStartObject()
                java.lang.String r0 = "file_delete_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileDeleteCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileDeleteCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileDeleteCommentType r3 = r3.fileDeleteCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a21:
                r4.writeStartObject()
                java.lang.String r0 = "file_change_comment_subscription"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileChangeCommentSubscriptionType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileChangeCommentSubscriptionType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileChangeCommentSubscriptionType r3 = r3.fileChangeCommentSubscriptionValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a36:
                r4.writeStartObject()
                java.lang.String r0 = "file_add_comment"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.FileAddCommentType$Serializer r0 = com.dropbox.core.p005v2.teamlog.FileAddCommentType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.FileAddCommentType r3 = r3.fileAddCommentValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a4b:
                r4.writeStartObject()
                java.lang.String r0 = "app_unlink_user"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AppUnlinkUserType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AppUnlinkUserType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AppUnlinkUserType r3 = r3.appUnlinkUserValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a60:
                r4.writeStartObject()
                java.lang.String r0 = "app_unlink_team"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AppUnlinkTeamType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AppUnlinkTeamType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AppUnlinkTeamType r3 = r3.appUnlinkTeamValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a75:
                r4.writeStartObject()
                java.lang.String r0 = "app_link_user"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AppLinkUserType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AppLinkUserType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AppLinkUserType r3 = r3.appLinkUserValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
                goto L_0x1a9e
            L_0x1a8a:
                r4.writeStartObject()
                java.lang.String r0 = "app_link_team"
                r2.writeTag(r0, r4)
                com.dropbox.core.v2.teamlog.AppLinkTeamType$Serializer r0 = com.dropbox.core.p005v2.teamlog.AppLinkTeamType.Serializer.INSTANCE
                com.dropbox.core.v2.teamlog.AppLinkTeamType r3 = r3.appLinkTeamValue
                r0.serialize(r3, r4, r1)
                r4.writeEndObject()
            L_0x1a9e:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.dropbox.core.p005v2.teamlog.EventType.Serializer.serialize(com.dropbox.core.v2.teamlog.EventType, com.fasterxml.jackson.core.JsonGenerator):void");
        }

        public EventType deserialize(JsonParser jsonParser) throws IOException, JsonParseException {
            boolean z;
            String str;
            EventType eventType;
            if (jsonParser.getCurrentToken() == JsonToken.VALUE_STRING) {
                str = getStringValue(jsonParser);
                jsonParser.nextToken();
                z = true;
            } else {
                expectStartObject(jsonParser);
                str = readTag(jsonParser);
                z = false;
            }
            if (str != null) {
                if ("app_link_team".equals(str)) {
                    eventType = EventType.appLinkTeam(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("app_link_user".equals(str)) {
                    eventType = EventType.appLinkUser(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("app_unlink_team".equals(str)) {
                    eventType = EventType.appUnlinkTeam(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("app_unlink_user".equals(str)) {
                    eventType = EventType.appUnlinkUser(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_add_comment".equals(str)) {
                    eventType = EventType.fileAddComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_change_comment_subscription".equals(str)) {
                    eventType = EventType.fileChangeCommentSubscription(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_delete_comment".equals(str)) {
                    eventType = EventType.fileDeleteComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_like_comment".equals(str)) {
                    eventType = EventType.fileLikeComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_resolve_comment".equals(str)) {
                    eventType = EventType.fileResolveComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_unlike_comment".equals(str)) {
                    eventType = EventType.fileUnlikeComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_unresolve_comment".equals(str)) {
                    eventType = EventType.fileUnresolveComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_change_ip_desktop".equals(str)) {
                    eventType = EventType.deviceChangeIpDesktop(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_change_ip_mobile".equals(str)) {
                    eventType = EventType.deviceChangeIpMobile(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_change_ip_web".equals(str)) {
                    eventType = EventType.deviceChangeIpWeb(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_delete_on_unlink_fail".equals(str)) {
                    eventType = EventType.deviceDeleteOnUnlinkFail(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_delete_on_unlink_success".equals(str)) {
                    eventType = EventType.deviceDeleteOnUnlinkSuccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_link_fail".equals(str)) {
                    eventType = EventType.deviceLinkFail(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_link_success".equals(str)) {
                    eventType = EventType.deviceLinkSuccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_management_disabled".equals(str)) {
                    eventType = EventType.deviceManagementDisabled(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_management_enabled".equals(str)) {
                    eventType = EventType.deviceManagementEnabled(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_unlink".equals(str)) {
                    eventType = EventType.deviceUnlink(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_refresh_auth_token".equals(str)) {
                    eventType = EventType.emmRefreshAuthToken(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("account_capture_change_availability".equals(str)) {
                    eventType = EventType.accountCaptureChangeAvailability(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("account_capture_migrate_account".equals(str)) {
                    eventType = EventType.accountCaptureMigrateAccount(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("account_capture_notification_emails_sent".equals(str)) {
                    eventType = EventType.accountCaptureNotificationEmailsSent(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("account_capture_relinquish_account".equals(str)) {
                    eventType = EventType.accountCaptureRelinquishAccount(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("disabled_domain_invites".equals(str)) {
                    eventType = EventType.disabledDomainInvites(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_invites_approve_request_to_join_team".equals(str)) {
                    eventType = EventType.domainInvitesApproveRequestToJoinTeam(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_invites_decline_request_to_join_team".equals(str)) {
                    eventType = EventType.domainInvitesDeclineRequestToJoinTeam(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_invites_email_existing_users".equals(str)) {
                    eventType = EventType.domainInvitesEmailExistingUsers(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_invites_request_to_join_team".equals(str)) {
                    eventType = EventType.domainInvitesRequestToJoinTeam(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_invites_set_invite_new_user_pref_to_no".equals(str)) {
                    eventType = EventType.domainInvitesSetInviteNewUserPrefToNo(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_invites_set_invite_new_user_pref_to_yes".equals(str)) {
                    eventType = EventType.domainInvitesSetInviteNewUserPrefToYes(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_verification_add_domain_fail".equals(str)) {
                    eventType = EventType.domainVerificationAddDomainFail(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_verification_add_domain_success".equals(str)) {
                    eventType = EventType.domainVerificationAddDomainSuccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("domain_verification_remove_domain".equals(str)) {
                    eventType = EventType.domainVerificationRemoveDomain(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("enabled_domain_invites".equals(str)) {
                    eventType = EventType.enabledDomainInvites(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("create_folder".equals(str)) {
                    eventType = EventType.createFolder(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_add".equals(str)) {
                    eventType = EventType.fileAdd(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_copy".equals(str)) {
                    eventType = EventType.fileCopy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_delete".equals(str)) {
                    eventType = EventType.fileDelete(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_download".equals(str)) {
                    eventType = EventType.fileDownload(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_edit".equals(str)) {
                    eventType = EventType.fileEdit(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_get_copy_reference".equals(str)) {
                    eventType = EventType.fileGetCopyReference(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_move".equals(str)) {
                    eventType = EventType.fileMove(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_permanently_delete".equals(str)) {
                    eventType = EventType.filePermanentlyDelete(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_preview".equals(str)) {
                    eventType = EventType.filePreview(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_rename".equals(str)) {
                    eventType = EventType.fileRename(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_restore".equals(str)) {
                    eventType = EventType.fileRestore(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_revert".equals(str)) {
                    eventType = EventType.fileRevert(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_rollback_changes".equals(str)) {
                    eventType = EventType.fileRollbackChanges(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_save_copy_reference".equals(str)) {
                    eventType = EventType.fileSaveCopyReference(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_request_change".equals(str)) {
                    eventType = EventType.fileRequestChange(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_request_close".equals(str)) {
                    eventType = EventType.fileRequestClose(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_request_create".equals(str)) {
                    eventType = EventType.fileRequestCreate(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_request_receive_file".equals(str)) {
                    eventType = EventType.fileRequestReceiveFile(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_add_external_id".equals(str)) {
                    eventType = EventType.groupAddExternalId(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_add_member".equals(str)) {
                    eventType = EventType.groupAddMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_change_external_id".equals(str)) {
                    eventType = EventType.groupChangeExternalId(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_change_management_type".equals(str)) {
                    eventType = EventType.groupChangeManagementType(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_change_member_role".equals(str)) {
                    eventType = EventType.groupChangeMemberRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_create".equals(str)) {
                    eventType = EventType.groupCreate(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_delete".equals(str)) {
                    eventType = EventType.groupDelete(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_description_updated".equals(str)) {
                    eventType = EventType.groupDescriptionUpdated(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_join_policy_updated".equals(str)) {
                    eventType = EventType.groupJoinPolicyUpdated(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_moved".equals(str)) {
                    eventType = EventType.groupMoved(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_remove_external_id".equals(str)) {
                    eventType = EventType.groupRemoveExternalId(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_remove_member".equals(str)) {
                    eventType = EventType.groupRemoveMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_rename".equals(str)) {
                    eventType = EventType.groupRename(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_error".equals(str)) {
                    eventType = EventType.emmError(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("login_fail".equals(str)) {
                    eventType = EventType.loginFail(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("login_success".equals(str)) {
                    eventType = EventType.loginSuccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("logout".equals(str)) {
                    eventType = EventType.logout(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("reseller_support_session_end".equals(str)) {
                    eventType = EventType.resellerSupportSessionEnd(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("reseller_support_session_start".equals(str)) {
                    eventType = EventType.resellerSupportSessionStart(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sign_in_as_session_end".equals(str)) {
                    eventType = EventType.signInAsSessionEnd(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sign_in_as_session_start".equals(str)) {
                    eventType = EventType.signInAsSessionStart(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_error".equals(str)) {
                    eventType = EventType.ssoError(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_add_name".equals(str)) {
                    eventType = EventType.memberAddName(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_change_admin_role".equals(str)) {
                    eventType = EventType.memberChangeAdminRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_change_email".equals(str)) {
                    eventType = EventType.memberChangeEmail(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_change_membership_type".equals(str)) {
                    eventType = EventType.memberChangeMembershipType(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_change_name".equals(str)) {
                    eventType = EventType.memberChangeName(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_change_status".equals(str)) {
                    eventType = EventType.memberChangeStatus(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_delete_manual_contacts".equals(str)) {
                    eventType = EventType.memberDeleteManualContacts(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_permanently_delete_account_contents".equals(str)) {
                    eventType = EventType.memberPermanentlyDeleteAccountContents(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_add_custom_quota".equals(str)) {
                    eventType = EventType.memberSpaceLimitsAddCustomQuota(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_change_custom_quota".equals(str)) {
                    eventType = EventType.memberSpaceLimitsChangeCustomQuota(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_change_status".equals(str)) {
                    eventType = EventType.memberSpaceLimitsChangeStatus(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_remove_custom_quota".equals(str)) {
                    eventType = EventType.memberSpaceLimitsRemoveCustomQuota(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_suggest".equals(str)) {
                    eventType = EventType.memberSuggest(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_transfer_account_contents".equals(str)) {
                    eventType = EventType.memberTransferAccountContents(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("secondary_mails_policy_changed".equals(str)) {
                    eventType = EventType.secondaryMailsPolicyChanged(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_add_member".equals(str)) {
                    eventType = EventType.paperContentAddMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_add_to_folder".equals(str)) {
                    eventType = EventType.paperContentAddToFolder(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_archive".equals(str)) {
                    eventType = EventType.paperContentArchive(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_create".equals(str)) {
                    eventType = EventType.paperContentCreate(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_permanently_delete".equals(str)) {
                    eventType = EventType.paperContentPermanentlyDelete(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_remove_from_folder".equals(str)) {
                    eventType = EventType.paperContentRemoveFromFolder(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_remove_member".equals(str)) {
                    eventType = EventType.paperContentRemoveMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_rename".equals(str)) {
                    eventType = EventType.paperContentRename(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_content_restore".equals(str)) {
                    eventType = EventType.paperContentRestore(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_add_comment".equals(str)) {
                    eventType = EventType.paperDocAddComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_change_member_role".equals(str)) {
                    eventType = EventType.paperDocChangeMemberRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_change_sharing_policy".equals(str)) {
                    eventType = EventType.paperDocChangeSharingPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_change_subscription".equals(str)) {
                    eventType = EventType.paperDocChangeSubscription(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_deleted".equals(str)) {
                    eventType = EventType.paperDocDeleted(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_delete_comment".equals(str)) {
                    eventType = EventType.paperDocDeleteComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_download".equals(str)) {
                    eventType = EventType.paperDocDownload(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_edit".equals(str)) {
                    eventType = EventType.paperDocEdit(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_edit_comment".equals(str)) {
                    eventType = EventType.paperDocEditComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_followed".equals(str)) {
                    eventType = EventType.paperDocFollowed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_mention".equals(str)) {
                    eventType = EventType.paperDocMention(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_ownership_changed".equals(str)) {
                    eventType = EventType.paperDocOwnershipChanged(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_request_access".equals(str)) {
                    eventType = EventType.paperDocRequestAccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_resolve_comment".equals(str)) {
                    eventType = EventType.paperDocResolveComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_revert".equals(str)) {
                    eventType = EventType.paperDocRevert(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_slack_share".equals(str)) {
                    eventType = EventType.paperDocSlackShare(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_team_invite".equals(str)) {
                    eventType = EventType.paperDocTeamInvite(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_trashed".equals(str)) {
                    eventType = EventType.paperDocTrashed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_unresolve_comment".equals(str)) {
                    eventType = EventType.paperDocUnresolveComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_untrashed".equals(str)) {
                    eventType = EventType.paperDocUntrashed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_doc_view".equals(str)) {
                    eventType = EventType.paperDocView(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_external_view_allow".equals(str)) {
                    eventType = EventType.paperExternalViewAllow(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_external_view_default_team".equals(str)) {
                    eventType = EventType.paperExternalViewDefaultTeam(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_external_view_forbid".equals(str)) {
                    eventType = EventType.paperExternalViewForbid(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_folder_change_subscription".equals(str)) {
                    eventType = EventType.paperFolderChangeSubscription(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_folder_deleted".equals(str)) {
                    eventType = EventType.paperFolderDeleted(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_folder_followed".equals(str)) {
                    eventType = EventType.paperFolderFollowed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_folder_team_invite".equals(str)) {
                    eventType = EventType.paperFolderTeamInvite(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("password_change".equals(str)) {
                    eventType = EventType.passwordChange(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("password_reset".equals(str)) {
                    eventType = EventType.passwordReset(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("password_reset_all".equals(str)) {
                    eventType = EventType.passwordResetAll(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_create_exceptions_report".equals(str)) {
                    eventType = EventType.emmCreateExceptionsReport(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_create_usage_report".equals(str)) {
                    eventType = EventType.emmCreateUsageReport(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("export_members_report".equals(str)) {
                    eventType = EventType.exportMembersReport(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_admin_export_start".equals(str)) {
                    eventType = EventType.paperAdminExportStart(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("smart_sync_create_admin_privilege_report".equals(str)) {
                    eventType = EventType.smartSyncCreateAdminPrivilegeReport(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_activity_create_report".equals(str)) {
                    eventType = EventType.teamActivityCreateReport(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("collection_share".equals(str)) {
                    eventType = EventType.collectionShare(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("note_acl_invite_only".equals(str)) {
                    eventType = EventType.noteAclInviteOnly(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("note_acl_link".equals(str)) {
                    eventType = EventType.noteAclLink(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("note_acl_team_link".equals(str)) {
                    eventType = EventType.noteAclTeamLink(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("note_shared".equals(str)) {
                    eventType = EventType.noteShared(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("note_share_receive".equals(str)) {
                    eventType = EventType.noteShareReceive(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("open_note_shared".equals(str)) {
                    eventType = EventType.openNoteShared(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_add_group".equals(str)) {
                    eventType = EventType.sfAddGroup(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_allow_non_members_to_view_shared_links".equals(str)) {
                    eventType = EventType.sfAllowNonMembersToViewSharedLinks(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_external_invite_warn".equals(str)) {
                    eventType = EventType.sfExternalInviteWarn(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_fb_invite".equals(str)) {
                    eventType = EventType.sfFbInvite(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_fb_invite_change_role".equals(str)) {
                    eventType = EventType.sfFbInviteChangeRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_fb_uninvite".equals(str)) {
                    eventType = EventType.sfFbUninvite(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_invite_group".equals(str)) {
                    eventType = EventType.sfInviteGroup(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_team_grant_access".equals(str)) {
                    eventType = EventType.sfTeamGrantAccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_team_invite".equals(str)) {
                    eventType = EventType.sfTeamInvite(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_team_invite_change_role".equals(str)) {
                    eventType = EventType.sfTeamInviteChangeRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_team_join".equals(str)) {
                    eventType = EventType.sfTeamJoin(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_team_join_from_oob_link".equals(str)) {
                    eventType = EventType.sfTeamJoinFromOobLink(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sf_team_uninvite".equals(str)) {
                    eventType = EventType.sfTeamUninvite(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_add_invitees".equals(str)) {
                    eventType = EventType.sharedContentAddInvitees(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_add_link_expiry".equals(str)) {
                    eventType = EventType.sharedContentAddLinkExpiry(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_add_link_password".equals(str)) {
                    eventType = EventType.sharedContentAddLinkPassword(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_add_member".equals(str)) {
                    eventType = EventType.sharedContentAddMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_downloads_policy".equals(str)) {
                    eventType = EventType.sharedContentChangeDownloadsPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_invitee_role".equals(str)) {
                    eventType = EventType.sharedContentChangeInviteeRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_link_audience".equals(str)) {
                    eventType = EventType.sharedContentChangeLinkAudience(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_link_expiry".equals(str)) {
                    eventType = EventType.sharedContentChangeLinkExpiry(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_link_password".equals(str)) {
                    eventType = EventType.sharedContentChangeLinkPassword(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_member_role".equals(str)) {
                    eventType = EventType.sharedContentChangeMemberRole(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_change_viewer_info_policy".equals(str)) {
                    eventType = EventType.sharedContentChangeViewerInfoPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_claim_invitation".equals(str)) {
                    eventType = EventType.sharedContentClaimInvitation(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_copy".equals(str)) {
                    eventType = EventType.sharedContentCopy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_download".equals(str)) {
                    eventType = EventType.sharedContentDownload(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_relinquish_membership".equals(str)) {
                    eventType = EventType.sharedContentRelinquishMembership(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_remove_invitees".equals(str)) {
                    eventType = EventType.sharedContentRemoveInvitees(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_remove_link_expiry".equals(str)) {
                    eventType = EventType.sharedContentRemoveLinkExpiry(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_remove_link_password".equals(str)) {
                    eventType = EventType.sharedContentRemoveLinkPassword(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_remove_member".equals(str)) {
                    eventType = EventType.sharedContentRemoveMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_request_access".equals(str)) {
                    eventType = EventType.sharedContentRequestAccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_unshare".equals(str)) {
                    eventType = EventType.sharedContentUnshare(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_content_view".equals(str)) {
                    eventType = EventType.sharedContentView(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_change_link_policy".equals(str)) {
                    eventType = EventType.sharedFolderChangeLinkPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_change_members_inheritance_policy".equals(str)) {
                    eventType = EventType.sharedFolderChangeMembersInheritancePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_change_members_management_policy".equals(str)) {
                    eventType = EventType.sharedFolderChangeMembersManagementPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_change_members_policy".equals(str)) {
                    eventType = EventType.sharedFolderChangeMembersPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_create".equals(str)) {
                    eventType = EventType.sharedFolderCreate(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_decline_invitation".equals(str)) {
                    eventType = EventType.sharedFolderDeclineInvitation(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_mount".equals(str)) {
                    eventType = EventType.sharedFolderMount(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_nest".equals(str)) {
                    eventType = EventType.sharedFolderNest(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_transfer_ownership".equals(str)) {
                    eventType = EventType.sharedFolderTransferOwnership(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_folder_unmount".equals(str)) {
                    eventType = EventType.sharedFolderUnmount(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_add_expiry".equals(str)) {
                    eventType = EventType.sharedLinkAddExpiry(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_change_expiry".equals(str)) {
                    eventType = EventType.sharedLinkChangeExpiry(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_change_visibility".equals(str)) {
                    eventType = EventType.sharedLinkChangeVisibility(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_copy".equals(str)) {
                    eventType = EventType.sharedLinkCopy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_create".equals(str)) {
                    eventType = EventType.sharedLinkCreate(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_disable".equals(str)) {
                    eventType = EventType.sharedLinkDisable(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_download".equals(str)) {
                    eventType = EventType.sharedLinkDownload(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_remove_expiry".equals(str)) {
                    eventType = EventType.sharedLinkRemoveExpiry(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_share".equals(str)) {
                    eventType = EventType.sharedLinkShare(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_link_view".equals(str)) {
                    eventType = EventType.sharedLinkView(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shared_note_opened".equals(str)) {
                    eventType = EventType.sharedNoteOpened(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("shmodel_group_share".equals(str)) {
                    eventType = EventType.shmodelGroupShare(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_access_granted".equals(str)) {
                    eventType = EventType.showcaseAccessGranted(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_add_member".equals(str)) {
                    eventType = EventType.showcaseAddMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_archived".equals(str)) {
                    eventType = EventType.showcaseArchived(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_created".equals(str)) {
                    eventType = EventType.showcaseCreated(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_delete_comment".equals(str)) {
                    eventType = EventType.showcaseDeleteComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_edited".equals(str)) {
                    eventType = EventType.showcaseEdited(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_edit_comment".equals(str)) {
                    eventType = EventType.showcaseEditComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_file_added".equals(str)) {
                    eventType = EventType.showcaseFileAdded(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_file_download".equals(str)) {
                    eventType = EventType.showcaseFileDownload(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_file_removed".equals(str)) {
                    eventType = EventType.showcaseFileRemoved(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_file_view".equals(str)) {
                    eventType = EventType.showcaseFileView(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_permanently_deleted".equals(str)) {
                    eventType = EventType.showcasePermanentlyDeleted(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_post_comment".equals(str)) {
                    eventType = EventType.showcasePostComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_remove_member".equals(str)) {
                    eventType = EventType.showcaseRemoveMember(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_renamed".equals(str)) {
                    eventType = EventType.showcaseRenamed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_request_access".equals(str)) {
                    eventType = EventType.showcaseRequestAccess(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_resolve_comment".equals(str)) {
                    eventType = EventType.showcaseResolveComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_restored".equals(str)) {
                    eventType = EventType.showcaseRestored(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_trashed".equals(str)) {
                    eventType = EventType.showcaseTrashed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_trashed_deprecated".equals(str)) {
                    eventType = EventType.showcaseTrashedDeprecated(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_unresolve_comment".equals(str)) {
                    eventType = EventType.showcaseUnresolveComment(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_untrashed".equals(str)) {
                    eventType = EventType.showcaseUntrashed(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_untrashed_deprecated".equals(str)) {
                    eventType = EventType.showcaseUntrashedDeprecated(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_view".equals(str)) {
                    eventType = EventType.showcaseView(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_add_cert".equals(str)) {
                    eventType = EventType.ssoAddCert(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_add_login_url".equals(str)) {
                    eventType = EventType.ssoAddLoginUrl(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_add_logout_url".equals(str)) {
                    eventType = EventType.ssoAddLogoutUrl(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_change_cert".equals(str)) {
                    eventType = EventType.ssoChangeCert(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_change_login_url".equals(str)) {
                    eventType = EventType.ssoChangeLoginUrl(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_change_logout_url".equals(str)) {
                    eventType = EventType.ssoChangeLogoutUrl(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_change_saml_identity_mode".equals(str)) {
                    eventType = EventType.ssoChangeSamlIdentityMode(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_remove_cert".equals(str)) {
                    eventType = EventType.ssoRemoveCert(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_remove_login_url".equals(str)) {
                    eventType = EventType.ssoRemoveLoginUrl(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_remove_logout_url".equals(str)) {
                    eventType = EventType.ssoRemoveLogoutUrl(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_folder_change_status".equals(str)) {
                    eventType = EventType.teamFolderChangeStatus(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_folder_create".equals(str)) {
                    eventType = EventType.teamFolderCreate(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_folder_downgrade".equals(str)) {
                    eventType = EventType.teamFolderDowngrade(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_folder_permanently_delete".equals(str)) {
                    eventType = EventType.teamFolderPermanentlyDelete(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_folder_rename".equals(str)) {
                    eventType = EventType.teamFolderRename(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_selective_sync_settings_changed".equals(str)) {
                    eventType = EventType.teamSelectiveSyncSettingsChanged(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("account_capture_change_policy".equals(str)) {
                    eventType = EventType.accountCaptureChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("allow_download_disabled".equals(str)) {
                    eventType = EventType.allowDownloadDisabled(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("allow_download_enabled".equals(str)) {
                    eventType = EventType.allowDownloadEnabled(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("data_placement_restriction_change_policy".equals(str)) {
                    eventType = EventType.dataPlacementRestrictionChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("data_placement_restriction_satisfy_policy".equals(str)) {
                    eventType = EventType.dataPlacementRestrictionSatisfyPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_approvals_change_desktop_policy".equals(str)) {
                    eventType = EventType.deviceApprovalsChangeDesktopPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_approvals_change_mobile_policy".equals(str)) {
                    eventType = EventType.deviceApprovalsChangeMobilePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_approvals_change_overage_action".equals(str)) {
                    eventType = EventType.deviceApprovalsChangeOverageAction(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("device_approvals_change_unlink_action".equals(str)) {
                    eventType = EventType.deviceApprovalsChangeUnlinkAction(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("directory_restrictions_add_members".equals(str)) {
                    eventType = EventType.directoryRestrictionsAddMembers(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("directory_restrictions_remove_members".equals(str)) {
                    eventType = EventType.directoryRestrictionsRemoveMembers(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_add_exception".equals(str)) {
                    eventType = EventType.emmAddException(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_change_policy".equals(str)) {
                    eventType = EventType.emmChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("emm_remove_exception".equals(str)) {
                    eventType = EventType.emmRemoveException(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("extended_version_history_change_policy".equals(str)) {
                    eventType = EventType.extendedVersionHistoryChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_comments_change_policy".equals(str)) {
                    eventType = EventType.fileCommentsChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_requests_change_policy".equals(str)) {
                    eventType = EventType.fileRequestsChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_requests_emails_enabled".equals(str)) {
                    eventType = EventType.fileRequestsEmailsEnabled(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("file_requests_emails_restricted_to_team_only".equals(str)) {
                    eventType = EventType.fileRequestsEmailsRestrictedToTeamOnly(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("google_sso_change_policy".equals(str)) {
                    eventType = EventType.googleSsoChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("group_user_management_change_policy".equals(str)) {
                    eventType = EventType.groupUserManagementChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_requests_change_policy".equals(str)) {
                    eventType = EventType.memberRequestsChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_add_exception".equals(str)) {
                    eventType = EventType.memberSpaceLimitsAddException(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_change_caps_type_policy".equals(str)) {
                    eventType = EventType.memberSpaceLimitsChangeCapsTypePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_change_policy".equals(str)) {
                    eventType = EventType.memberSpaceLimitsChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_space_limits_remove_exception".equals(str)) {
                    eventType = EventType.memberSpaceLimitsRemoveException(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("member_suggestions_change_policy".equals(str)) {
                    eventType = EventType.memberSuggestionsChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("microsoft_office_addin_change_policy".equals(str)) {
                    eventType = EventType.microsoftOfficeAddinChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("network_control_change_policy".equals(str)) {
                    eventType = EventType.networkControlChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_change_deployment_policy".equals(str)) {
                    eventType = EventType.paperChangeDeploymentPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_change_member_link_policy".equals(str)) {
                    eventType = EventType.paperChangeMemberLinkPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_change_member_policy".equals(str)) {
                    eventType = EventType.paperChangeMemberPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_change_policy".equals(str)) {
                    eventType = EventType.paperChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_enabled_users_group_addition".equals(str)) {
                    eventType = EventType.paperEnabledUsersGroupAddition(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("paper_enabled_users_group_removal".equals(str)) {
                    eventType = EventType.paperEnabledUsersGroupRemoval(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("permanent_delete_change_policy".equals(str)) {
                    eventType = EventType.permanentDeleteChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sharing_change_folder_join_policy".equals(str)) {
                    eventType = EventType.sharingChangeFolderJoinPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sharing_change_link_policy".equals(str)) {
                    eventType = EventType.sharingChangeLinkPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sharing_change_member_policy".equals(str)) {
                    eventType = EventType.sharingChangeMemberPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_change_download_policy".equals(str)) {
                    eventType = EventType.showcaseChangeDownloadPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_change_enabled_policy".equals(str)) {
                    eventType = EventType.showcaseChangeEnabledPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("showcase_change_external_sharing_policy".equals(str)) {
                    eventType = EventType.showcaseChangeExternalSharingPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("smart_sync_change_policy".equals(str)) {
                    eventType = EventType.smartSyncChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("smart_sync_not_opt_out".equals(str)) {
                    eventType = EventType.smartSyncNotOptOut(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("smart_sync_opt_out".equals(str)) {
                    eventType = EventType.smartSyncOptOut(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("sso_change_policy".equals(str)) {
                    eventType = EventType.ssoChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_selective_sync_policy_changed".equals(str)) {
                    eventType = EventType.teamSelectiveSyncPolicyChanged(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_change_policy".equals(str)) {
                    eventType = EventType.tfaChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("two_account_change_policy".equals(str)) {
                    eventType = EventType.twoAccountChangePolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("viewer_info_policy_changed".equals(str)) {
                    eventType = EventType.viewerInfoPolicyChanged(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("web_sessions_change_fixed_length_policy".equals(str)) {
                    eventType = EventType.webSessionsChangeFixedLengthPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("web_sessions_change_idle_length_policy".equals(str)) {
                    eventType = EventType.webSessionsChangeIdleLengthPolicy(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_merge_from".equals(str)) {
                    eventType = EventType.teamMergeFrom(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_merge_to".equals(str)) {
                    eventType = EventType.teamMergeTo(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_profile_add_logo".equals(str)) {
                    eventType = EventType.teamProfileAddLogo(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_profile_change_default_language".equals(str)) {
                    eventType = EventType.teamProfileChangeDefaultLanguage(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_profile_change_logo".equals(str)) {
                    eventType = EventType.teamProfileChangeLogo(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_profile_change_name".equals(str)) {
                    eventType = EventType.teamProfileChangeName(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("team_profile_remove_logo".equals(str)) {
                    eventType = EventType.teamProfileRemoveLogo(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_add_backup_phone".equals(str)) {
                    eventType = EventType.tfaAddBackupPhone(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_add_security_key".equals(str)) {
                    eventType = EventType.tfaAddSecurityKey(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_change_backup_phone".equals(str)) {
                    eventType = EventType.tfaChangeBackupPhone(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_change_status".equals(str)) {
                    eventType = EventType.tfaChangeStatus(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_remove_backup_phone".equals(str)) {
                    eventType = EventType.tfaRemoveBackupPhone(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_remove_security_key".equals(str)) {
                    eventType = EventType.tfaRemoveSecurityKey(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else if ("tfa_reset".equals(str)) {
                    eventType = EventType.tfaReset(Serializer.INSTANCE.deserialize(jsonParser, true));
                } else {
                    eventType = EventType.OTHER;
                }
                if (!z) {
                    skipFields(jsonParser);
                    expectEndObject(jsonParser);
                }
                return eventType;
            }
            throw new JsonParseException(jsonParser, "Required field missing: .tag");
        }
    }

    /* renamed from: com.dropbox.core.v2.teamlog.EventType$Tag */
    public enum Tag {
        APP_LINK_TEAM,
        APP_LINK_USER,
        APP_UNLINK_TEAM,
        APP_UNLINK_USER,
        FILE_ADD_COMMENT,
        FILE_CHANGE_COMMENT_SUBSCRIPTION,
        FILE_DELETE_COMMENT,
        FILE_LIKE_COMMENT,
        FILE_RESOLVE_COMMENT,
        FILE_UNLIKE_COMMENT,
        FILE_UNRESOLVE_COMMENT,
        DEVICE_CHANGE_IP_DESKTOP,
        DEVICE_CHANGE_IP_MOBILE,
        DEVICE_CHANGE_IP_WEB,
        DEVICE_DELETE_ON_UNLINK_FAIL,
        DEVICE_DELETE_ON_UNLINK_SUCCESS,
        DEVICE_LINK_FAIL,
        DEVICE_LINK_SUCCESS,
        DEVICE_MANAGEMENT_DISABLED,
        DEVICE_MANAGEMENT_ENABLED,
        DEVICE_UNLINK,
        EMM_REFRESH_AUTH_TOKEN,
        ACCOUNT_CAPTURE_CHANGE_AVAILABILITY,
        ACCOUNT_CAPTURE_MIGRATE_ACCOUNT,
        ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT,
        ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT,
        DISABLED_DOMAIN_INVITES,
        DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM,
        DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM,
        DOMAIN_INVITES_EMAIL_EXISTING_USERS,
        DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM,
        DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO,
        DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES,
        DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL,
        DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS,
        DOMAIN_VERIFICATION_REMOVE_DOMAIN,
        ENABLED_DOMAIN_INVITES,
        CREATE_FOLDER,
        FILE_ADD,
        FILE_COPY,
        FILE_DELETE,
        FILE_DOWNLOAD,
        FILE_EDIT,
        FILE_GET_COPY_REFERENCE,
        FILE_MOVE,
        FILE_PERMANENTLY_DELETE,
        FILE_PREVIEW,
        FILE_RENAME,
        FILE_RESTORE,
        FILE_REVERT,
        FILE_ROLLBACK_CHANGES,
        FILE_SAVE_COPY_REFERENCE,
        FILE_REQUEST_CHANGE,
        FILE_REQUEST_CLOSE,
        FILE_REQUEST_CREATE,
        FILE_REQUEST_RECEIVE_FILE,
        GROUP_ADD_EXTERNAL_ID,
        GROUP_ADD_MEMBER,
        GROUP_CHANGE_EXTERNAL_ID,
        GROUP_CHANGE_MANAGEMENT_TYPE,
        GROUP_CHANGE_MEMBER_ROLE,
        GROUP_CREATE,
        GROUP_DELETE,
        GROUP_DESCRIPTION_UPDATED,
        GROUP_JOIN_POLICY_UPDATED,
        GROUP_MOVED,
        GROUP_REMOVE_EXTERNAL_ID,
        GROUP_REMOVE_MEMBER,
        GROUP_RENAME,
        EMM_ERROR,
        LOGIN_FAIL,
        LOGIN_SUCCESS,
        LOGOUT,
        RESELLER_SUPPORT_SESSION_END,
        RESELLER_SUPPORT_SESSION_START,
        SIGN_IN_AS_SESSION_END,
        SIGN_IN_AS_SESSION_START,
        SSO_ERROR,
        MEMBER_ADD_NAME,
        MEMBER_CHANGE_ADMIN_ROLE,
        MEMBER_CHANGE_EMAIL,
        MEMBER_CHANGE_MEMBERSHIP_TYPE,
        MEMBER_CHANGE_NAME,
        MEMBER_CHANGE_STATUS,
        MEMBER_DELETE_MANUAL_CONTACTS,
        MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS,
        MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA,
        MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA,
        MEMBER_SPACE_LIMITS_CHANGE_STATUS,
        MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA,
        MEMBER_SUGGEST,
        MEMBER_TRANSFER_ACCOUNT_CONTENTS,
        SECONDARY_MAILS_POLICY_CHANGED,
        PAPER_CONTENT_ADD_MEMBER,
        PAPER_CONTENT_ADD_TO_FOLDER,
        PAPER_CONTENT_ARCHIVE,
        PAPER_CONTENT_CREATE,
        PAPER_CONTENT_PERMANENTLY_DELETE,
        PAPER_CONTENT_REMOVE_FROM_FOLDER,
        PAPER_CONTENT_REMOVE_MEMBER,
        PAPER_CONTENT_RENAME,
        PAPER_CONTENT_RESTORE,
        PAPER_DOC_ADD_COMMENT,
        PAPER_DOC_CHANGE_MEMBER_ROLE,
        PAPER_DOC_CHANGE_SHARING_POLICY,
        PAPER_DOC_CHANGE_SUBSCRIPTION,
        PAPER_DOC_DELETED,
        PAPER_DOC_DELETE_COMMENT,
        PAPER_DOC_DOWNLOAD,
        PAPER_DOC_EDIT,
        PAPER_DOC_EDIT_COMMENT,
        PAPER_DOC_FOLLOWED,
        PAPER_DOC_MENTION,
        PAPER_DOC_OWNERSHIP_CHANGED,
        PAPER_DOC_REQUEST_ACCESS,
        PAPER_DOC_RESOLVE_COMMENT,
        PAPER_DOC_REVERT,
        PAPER_DOC_SLACK_SHARE,
        PAPER_DOC_TEAM_INVITE,
        PAPER_DOC_TRASHED,
        PAPER_DOC_UNRESOLVE_COMMENT,
        PAPER_DOC_UNTRASHED,
        PAPER_DOC_VIEW,
        PAPER_EXTERNAL_VIEW_ALLOW,
        PAPER_EXTERNAL_VIEW_DEFAULT_TEAM,
        PAPER_EXTERNAL_VIEW_FORBID,
        PAPER_FOLDER_CHANGE_SUBSCRIPTION,
        PAPER_FOLDER_DELETED,
        PAPER_FOLDER_FOLLOWED,
        PAPER_FOLDER_TEAM_INVITE,
        PASSWORD_CHANGE,
        PASSWORD_RESET,
        PASSWORD_RESET_ALL,
        EMM_CREATE_EXCEPTIONS_REPORT,
        EMM_CREATE_USAGE_REPORT,
        EXPORT_MEMBERS_REPORT,
        PAPER_ADMIN_EXPORT_START,
        SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT,
        TEAM_ACTIVITY_CREATE_REPORT,
        COLLECTION_SHARE,
        NOTE_ACL_INVITE_ONLY,
        NOTE_ACL_LINK,
        NOTE_ACL_TEAM_LINK,
        NOTE_SHARED,
        NOTE_SHARE_RECEIVE,
        OPEN_NOTE_SHARED,
        SF_ADD_GROUP,
        SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS,
        SF_EXTERNAL_INVITE_WARN,
        SF_FB_INVITE,
        SF_FB_INVITE_CHANGE_ROLE,
        SF_FB_UNINVITE,
        SF_INVITE_GROUP,
        SF_TEAM_GRANT_ACCESS,
        SF_TEAM_INVITE,
        SF_TEAM_INVITE_CHANGE_ROLE,
        SF_TEAM_JOIN,
        SF_TEAM_JOIN_FROM_OOB_LINK,
        SF_TEAM_UNINVITE,
        SHARED_CONTENT_ADD_INVITEES,
        SHARED_CONTENT_ADD_LINK_EXPIRY,
        SHARED_CONTENT_ADD_LINK_PASSWORD,
        SHARED_CONTENT_ADD_MEMBER,
        SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY,
        SHARED_CONTENT_CHANGE_INVITEE_ROLE,
        SHARED_CONTENT_CHANGE_LINK_AUDIENCE,
        SHARED_CONTENT_CHANGE_LINK_EXPIRY,
        SHARED_CONTENT_CHANGE_LINK_PASSWORD,
        SHARED_CONTENT_CHANGE_MEMBER_ROLE,
        SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY,
        SHARED_CONTENT_CLAIM_INVITATION,
        SHARED_CONTENT_COPY,
        SHARED_CONTENT_DOWNLOAD,
        SHARED_CONTENT_RELINQUISH_MEMBERSHIP,
        SHARED_CONTENT_REMOVE_INVITEES,
        SHARED_CONTENT_REMOVE_LINK_EXPIRY,
        SHARED_CONTENT_REMOVE_LINK_PASSWORD,
        SHARED_CONTENT_REMOVE_MEMBER,
        SHARED_CONTENT_REQUEST_ACCESS,
        SHARED_CONTENT_UNSHARE,
        SHARED_CONTENT_VIEW,
        SHARED_FOLDER_CHANGE_LINK_POLICY,
        SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY,
        SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY,
        SHARED_FOLDER_CHANGE_MEMBERS_POLICY,
        SHARED_FOLDER_CREATE,
        SHARED_FOLDER_DECLINE_INVITATION,
        SHARED_FOLDER_MOUNT,
        SHARED_FOLDER_NEST,
        SHARED_FOLDER_TRANSFER_OWNERSHIP,
        SHARED_FOLDER_UNMOUNT,
        SHARED_LINK_ADD_EXPIRY,
        SHARED_LINK_CHANGE_EXPIRY,
        SHARED_LINK_CHANGE_VISIBILITY,
        SHARED_LINK_COPY,
        SHARED_LINK_CREATE,
        SHARED_LINK_DISABLE,
        SHARED_LINK_DOWNLOAD,
        SHARED_LINK_REMOVE_EXPIRY,
        SHARED_LINK_SHARE,
        SHARED_LINK_VIEW,
        SHARED_NOTE_OPENED,
        SHMODEL_GROUP_SHARE,
        SHOWCASE_ACCESS_GRANTED,
        SHOWCASE_ADD_MEMBER,
        SHOWCASE_ARCHIVED,
        SHOWCASE_CREATED,
        SHOWCASE_DELETE_COMMENT,
        SHOWCASE_EDITED,
        SHOWCASE_EDIT_COMMENT,
        SHOWCASE_FILE_ADDED,
        SHOWCASE_FILE_DOWNLOAD,
        SHOWCASE_FILE_REMOVED,
        SHOWCASE_FILE_VIEW,
        SHOWCASE_PERMANENTLY_DELETED,
        SHOWCASE_POST_COMMENT,
        SHOWCASE_REMOVE_MEMBER,
        SHOWCASE_RENAMED,
        SHOWCASE_REQUEST_ACCESS,
        SHOWCASE_RESOLVE_COMMENT,
        SHOWCASE_RESTORED,
        SHOWCASE_TRASHED,
        SHOWCASE_TRASHED_DEPRECATED,
        SHOWCASE_UNRESOLVE_COMMENT,
        SHOWCASE_UNTRASHED,
        SHOWCASE_UNTRASHED_DEPRECATED,
        SHOWCASE_VIEW,
        SSO_ADD_CERT,
        SSO_ADD_LOGIN_URL,
        SSO_ADD_LOGOUT_URL,
        SSO_CHANGE_CERT,
        SSO_CHANGE_LOGIN_URL,
        SSO_CHANGE_LOGOUT_URL,
        SSO_CHANGE_SAML_IDENTITY_MODE,
        SSO_REMOVE_CERT,
        SSO_REMOVE_LOGIN_URL,
        SSO_REMOVE_LOGOUT_URL,
        TEAM_FOLDER_CHANGE_STATUS,
        TEAM_FOLDER_CREATE,
        TEAM_FOLDER_DOWNGRADE,
        TEAM_FOLDER_PERMANENTLY_DELETE,
        TEAM_FOLDER_RENAME,
        TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED,
        ACCOUNT_CAPTURE_CHANGE_POLICY,
        ALLOW_DOWNLOAD_DISABLED,
        ALLOW_DOWNLOAD_ENABLED,
        DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY,
        DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY,
        DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY,
        DEVICE_APPROVALS_CHANGE_MOBILE_POLICY,
        DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION,
        DEVICE_APPROVALS_CHANGE_UNLINK_ACTION,
        DIRECTORY_RESTRICTIONS_ADD_MEMBERS,
        DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS,
        EMM_ADD_EXCEPTION,
        EMM_CHANGE_POLICY,
        EMM_REMOVE_EXCEPTION,
        EXTENDED_VERSION_HISTORY_CHANGE_POLICY,
        FILE_COMMENTS_CHANGE_POLICY,
        FILE_REQUESTS_CHANGE_POLICY,
        FILE_REQUESTS_EMAILS_ENABLED,
        FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY,
        GOOGLE_SSO_CHANGE_POLICY,
        GROUP_USER_MANAGEMENT_CHANGE_POLICY,
        MEMBER_REQUESTS_CHANGE_POLICY,
        MEMBER_SPACE_LIMITS_ADD_EXCEPTION,
        MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY,
        MEMBER_SPACE_LIMITS_CHANGE_POLICY,
        MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION,
        MEMBER_SUGGESTIONS_CHANGE_POLICY,
        MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY,
        NETWORK_CONTROL_CHANGE_POLICY,
        PAPER_CHANGE_DEPLOYMENT_POLICY,
        PAPER_CHANGE_MEMBER_LINK_POLICY,
        PAPER_CHANGE_MEMBER_POLICY,
        PAPER_CHANGE_POLICY,
        PAPER_ENABLED_USERS_GROUP_ADDITION,
        PAPER_ENABLED_USERS_GROUP_REMOVAL,
        PERMANENT_DELETE_CHANGE_POLICY,
        SHARING_CHANGE_FOLDER_JOIN_POLICY,
        SHARING_CHANGE_LINK_POLICY,
        SHARING_CHANGE_MEMBER_POLICY,
        SHOWCASE_CHANGE_DOWNLOAD_POLICY,
        SHOWCASE_CHANGE_ENABLED_POLICY,
        SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY,
        SMART_SYNC_CHANGE_POLICY,
        SMART_SYNC_NOT_OPT_OUT,
        SMART_SYNC_OPT_OUT,
        SSO_CHANGE_POLICY,
        TEAM_SELECTIVE_SYNC_POLICY_CHANGED,
        TFA_CHANGE_POLICY,
        TWO_ACCOUNT_CHANGE_POLICY,
        VIEWER_INFO_POLICY_CHANGED,
        WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY,
        WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY,
        TEAM_MERGE_FROM,
        TEAM_MERGE_TO,
        TEAM_PROFILE_ADD_LOGO,
        TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE,
        TEAM_PROFILE_CHANGE_LOGO,
        TEAM_PROFILE_CHANGE_NAME,
        TEAM_PROFILE_REMOVE_LOGO,
        TFA_ADD_BACKUP_PHONE,
        TFA_ADD_SECURITY_KEY,
        TFA_CHANGE_BACKUP_PHONE,
        TFA_CHANGE_STATUS,
        TFA_REMOVE_BACKUP_PHONE,
        TFA_REMOVE_SECURITY_KEY,
        TFA_RESET,
        OTHER
    }

    private EventType() {
    }

    private EventType withTag(Tag tag) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        return eventType;
    }

    private EventType withTagAndAppLinkTeam(Tag tag, AppLinkTeamType appLinkTeamType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.appLinkTeamValue = appLinkTeamType;
        return eventType;
    }

    private EventType withTagAndAppLinkUser(Tag tag, AppLinkUserType appLinkUserType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.appLinkUserValue = appLinkUserType;
        return eventType;
    }

    private EventType withTagAndAppUnlinkTeam(Tag tag, AppUnlinkTeamType appUnlinkTeamType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.appUnlinkTeamValue = appUnlinkTeamType;
        return eventType;
    }

    private EventType withTagAndAppUnlinkUser(Tag tag, AppUnlinkUserType appUnlinkUserType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.appUnlinkUserValue = appUnlinkUserType;
        return eventType;
    }

    private EventType withTagAndFileAddComment(Tag tag, FileAddCommentType fileAddCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileAddCommentValue = fileAddCommentType;
        return eventType;
    }

    private EventType withTagAndFileChangeCommentSubscription(Tag tag, FileChangeCommentSubscriptionType fileChangeCommentSubscriptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileChangeCommentSubscriptionValue = fileChangeCommentSubscriptionType;
        return eventType;
    }

    private EventType withTagAndFileDeleteComment(Tag tag, FileDeleteCommentType fileDeleteCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileDeleteCommentValue = fileDeleteCommentType;
        return eventType;
    }

    private EventType withTagAndFileLikeComment(Tag tag, FileLikeCommentType fileLikeCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileLikeCommentValue = fileLikeCommentType;
        return eventType;
    }

    private EventType withTagAndFileResolveComment(Tag tag, FileResolveCommentType fileResolveCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileResolveCommentValue = fileResolveCommentType;
        return eventType;
    }

    private EventType withTagAndFileUnlikeComment(Tag tag, FileUnlikeCommentType fileUnlikeCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileUnlikeCommentValue = fileUnlikeCommentType;
        return eventType;
    }

    private EventType withTagAndFileUnresolveComment(Tag tag, FileUnresolveCommentType fileUnresolveCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileUnresolveCommentValue = fileUnresolveCommentType;
        return eventType;
    }

    private EventType withTagAndDeviceChangeIpDesktop(Tag tag, DeviceChangeIpDesktopType deviceChangeIpDesktopType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceChangeIpDesktopValue = deviceChangeIpDesktopType;
        return eventType;
    }

    private EventType withTagAndDeviceChangeIpMobile(Tag tag, DeviceChangeIpMobileType deviceChangeIpMobileType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceChangeIpMobileValue = deviceChangeIpMobileType;
        return eventType;
    }

    private EventType withTagAndDeviceChangeIpWeb(Tag tag, DeviceChangeIpWebType deviceChangeIpWebType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceChangeIpWebValue = deviceChangeIpWebType;
        return eventType;
    }

    private EventType withTagAndDeviceDeleteOnUnlinkFail(Tag tag, DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceDeleteOnUnlinkFailValue = deviceDeleteOnUnlinkFailType;
        return eventType;
    }

    private EventType withTagAndDeviceDeleteOnUnlinkSuccess(Tag tag, DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceDeleteOnUnlinkSuccessValue = deviceDeleteOnUnlinkSuccessType;
        return eventType;
    }

    private EventType withTagAndDeviceLinkFail(Tag tag, DeviceLinkFailType deviceLinkFailType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceLinkFailValue = deviceLinkFailType;
        return eventType;
    }

    private EventType withTagAndDeviceLinkSuccess(Tag tag, DeviceLinkSuccessType deviceLinkSuccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceLinkSuccessValue = deviceLinkSuccessType;
        return eventType;
    }

    private EventType withTagAndDeviceManagementDisabled(Tag tag, DeviceManagementDisabledType deviceManagementDisabledType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceManagementDisabledValue = deviceManagementDisabledType;
        return eventType;
    }

    private EventType withTagAndDeviceManagementEnabled(Tag tag, DeviceManagementEnabledType deviceManagementEnabledType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceManagementEnabledValue = deviceManagementEnabledType;
        return eventType;
    }

    private EventType withTagAndDeviceUnlink(Tag tag, DeviceUnlinkType deviceUnlinkType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceUnlinkValue = deviceUnlinkType;
        return eventType;
    }

    private EventType withTagAndEmmRefreshAuthToken(Tag tag, EmmRefreshAuthTokenType emmRefreshAuthTokenType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmRefreshAuthTokenValue = emmRefreshAuthTokenType;
        return eventType;
    }

    private EventType withTagAndAccountCaptureChangeAvailability(Tag tag, AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.accountCaptureChangeAvailabilityValue = accountCaptureChangeAvailabilityType;
        return eventType;
    }

    private EventType withTagAndAccountCaptureMigrateAccount(Tag tag, AccountCaptureMigrateAccountType accountCaptureMigrateAccountType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.accountCaptureMigrateAccountValue = accountCaptureMigrateAccountType;
        return eventType;
    }

    private EventType withTagAndAccountCaptureNotificationEmailsSent(Tag tag, AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.accountCaptureNotificationEmailsSentValue = accountCaptureNotificationEmailsSentType;
        return eventType;
    }

    private EventType withTagAndAccountCaptureRelinquishAccount(Tag tag, AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.accountCaptureRelinquishAccountValue = accountCaptureRelinquishAccountType;
        return eventType;
    }

    private EventType withTagAndDisabledDomainInvites(Tag tag, DisabledDomainInvitesType disabledDomainInvitesType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.disabledDomainInvitesValue = disabledDomainInvitesType;
        return eventType;
    }

    private EventType withTagAndDomainInvitesApproveRequestToJoinTeam(Tag tag, DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainInvitesApproveRequestToJoinTeamValue = domainInvitesApproveRequestToJoinTeamType;
        return eventType;
    }

    private EventType withTagAndDomainInvitesDeclineRequestToJoinTeam(Tag tag, DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainInvitesDeclineRequestToJoinTeamValue = domainInvitesDeclineRequestToJoinTeamType;
        return eventType;
    }

    private EventType withTagAndDomainInvitesEmailExistingUsers(Tag tag, DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainInvitesEmailExistingUsersValue = domainInvitesEmailExistingUsersType;
        return eventType;
    }

    private EventType withTagAndDomainInvitesRequestToJoinTeam(Tag tag, DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainInvitesRequestToJoinTeamValue = domainInvitesRequestToJoinTeamType;
        return eventType;
    }

    private EventType withTagAndDomainInvitesSetInviteNewUserPrefToNo(Tag tag, DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainInvitesSetInviteNewUserPrefToNoValue = domainInvitesSetInviteNewUserPrefToNoType;
        return eventType;
    }

    private EventType withTagAndDomainInvitesSetInviteNewUserPrefToYes(Tag tag, DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainInvitesSetInviteNewUserPrefToYesValue = domainInvitesSetInviteNewUserPrefToYesType;
        return eventType;
    }

    private EventType withTagAndDomainVerificationAddDomainFail(Tag tag, DomainVerificationAddDomainFailType domainVerificationAddDomainFailType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainVerificationAddDomainFailValue = domainVerificationAddDomainFailType;
        return eventType;
    }

    private EventType withTagAndDomainVerificationAddDomainSuccess(Tag tag, DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainVerificationAddDomainSuccessValue = domainVerificationAddDomainSuccessType;
        return eventType;
    }

    private EventType withTagAndDomainVerificationRemoveDomain(Tag tag, DomainVerificationRemoveDomainType domainVerificationRemoveDomainType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.domainVerificationRemoveDomainValue = domainVerificationRemoveDomainType;
        return eventType;
    }

    private EventType withTagAndEnabledDomainInvites(Tag tag, EnabledDomainInvitesType enabledDomainInvitesType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.enabledDomainInvitesValue = enabledDomainInvitesType;
        return eventType;
    }

    private EventType withTagAndCreateFolder(Tag tag, CreateFolderType createFolderType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.createFolderValue = createFolderType;
        return eventType;
    }

    private EventType withTagAndFileAdd(Tag tag, FileAddType fileAddType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileAddValue = fileAddType;
        return eventType;
    }

    private EventType withTagAndFileCopy(Tag tag, FileCopyType fileCopyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileCopyValue = fileCopyType;
        return eventType;
    }

    private EventType withTagAndFileDelete(Tag tag, FileDeleteType fileDeleteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileDeleteValue = fileDeleteType;
        return eventType;
    }

    private EventType withTagAndFileDownload(Tag tag, FileDownloadType fileDownloadType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileDownloadValue = fileDownloadType;
        return eventType;
    }

    private EventType withTagAndFileEdit(Tag tag, FileEditType fileEditType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileEditValue = fileEditType;
        return eventType;
    }

    private EventType withTagAndFileGetCopyReference(Tag tag, FileGetCopyReferenceType fileGetCopyReferenceType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileGetCopyReferenceValue = fileGetCopyReferenceType;
        return eventType;
    }

    private EventType withTagAndFileMove(Tag tag, FileMoveType fileMoveType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileMoveValue = fileMoveType;
        return eventType;
    }

    private EventType withTagAndFilePermanentlyDelete(Tag tag, FilePermanentlyDeleteType filePermanentlyDeleteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.filePermanentlyDeleteValue = filePermanentlyDeleteType;
        return eventType;
    }

    private EventType withTagAndFilePreview(Tag tag, FilePreviewType filePreviewType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.filePreviewValue = filePreviewType;
        return eventType;
    }

    private EventType withTagAndFileRename(Tag tag, FileRenameType fileRenameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRenameValue = fileRenameType;
        return eventType;
    }

    private EventType withTagAndFileRestore(Tag tag, FileRestoreType fileRestoreType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRestoreValue = fileRestoreType;
        return eventType;
    }

    private EventType withTagAndFileRevert(Tag tag, FileRevertType fileRevertType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRevertValue = fileRevertType;
        return eventType;
    }

    private EventType withTagAndFileRollbackChanges(Tag tag, FileRollbackChangesType fileRollbackChangesType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRollbackChangesValue = fileRollbackChangesType;
        return eventType;
    }

    private EventType withTagAndFileSaveCopyReference(Tag tag, FileSaveCopyReferenceType fileSaveCopyReferenceType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileSaveCopyReferenceValue = fileSaveCopyReferenceType;
        return eventType;
    }

    private EventType withTagAndFileRequestChange(Tag tag, FileRequestChangeType fileRequestChangeType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestChangeValue = fileRequestChangeType;
        return eventType;
    }

    private EventType withTagAndFileRequestClose(Tag tag, FileRequestCloseType fileRequestCloseType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestCloseValue = fileRequestCloseType;
        return eventType;
    }

    private EventType withTagAndFileRequestCreate(Tag tag, FileRequestCreateType fileRequestCreateType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestCreateValue = fileRequestCreateType;
        return eventType;
    }

    private EventType withTagAndFileRequestReceiveFile(Tag tag, FileRequestReceiveFileType fileRequestReceiveFileType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestReceiveFileValue = fileRequestReceiveFileType;
        return eventType;
    }

    private EventType withTagAndGroupAddExternalId(Tag tag, GroupAddExternalIdType groupAddExternalIdType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupAddExternalIdValue = groupAddExternalIdType;
        return eventType;
    }

    private EventType withTagAndGroupAddMember(Tag tag, GroupAddMemberType groupAddMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupAddMemberValue = groupAddMemberType;
        return eventType;
    }

    private EventType withTagAndGroupChangeExternalId(Tag tag, GroupChangeExternalIdType groupChangeExternalIdType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupChangeExternalIdValue = groupChangeExternalIdType;
        return eventType;
    }

    private EventType withTagAndGroupChangeManagementType(Tag tag, GroupChangeManagementTypeType groupChangeManagementTypeType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupChangeManagementTypeValue = groupChangeManagementTypeType;
        return eventType;
    }

    private EventType withTagAndGroupChangeMemberRole(Tag tag, GroupChangeMemberRoleType groupChangeMemberRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupChangeMemberRoleValue = groupChangeMemberRoleType;
        return eventType;
    }

    private EventType withTagAndGroupCreate(Tag tag, GroupCreateType groupCreateType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupCreateValue = groupCreateType;
        return eventType;
    }

    private EventType withTagAndGroupDelete(Tag tag, GroupDeleteType groupDeleteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupDeleteValue = groupDeleteType;
        return eventType;
    }

    private EventType withTagAndGroupDescriptionUpdated(Tag tag, GroupDescriptionUpdatedType groupDescriptionUpdatedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupDescriptionUpdatedValue = groupDescriptionUpdatedType;
        return eventType;
    }

    private EventType withTagAndGroupJoinPolicyUpdated(Tag tag, GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupJoinPolicyUpdatedValue = groupJoinPolicyUpdatedType;
        return eventType;
    }

    private EventType withTagAndGroupMoved(Tag tag, GroupMovedType groupMovedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupMovedValue = groupMovedType;
        return eventType;
    }

    private EventType withTagAndGroupRemoveExternalId(Tag tag, GroupRemoveExternalIdType groupRemoveExternalIdType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupRemoveExternalIdValue = groupRemoveExternalIdType;
        return eventType;
    }

    private EventType withTagAndGroupRemoveMember(Tag tag, GroupRemoveMemberType groupRemoveMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupRemoveMemberValue = groupRemoveMemberType;
        return eventType;
    }

    private EventType withTagAndGroupRename(Tag tag, GroupRenameType groupRenameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupRenameValue = groupRenameType;
        return eventType;
    }

    private EventType withTagAndEmmError(Tag tag, EmmErrorType emmErrorType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmErrorValue = emmErrorType;
        return eventType;
    }

    private EventType withTagAndLoginFail(Tag tag, LoginFailType loginFailType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.loginFailValue = loginFailType;
        return eventType;
    }

    private EventType withTagAndLoginSuccess(Tag tag, LoginSuccessType loginSuccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.loginSuccessValue = loginSuccessType;
        return eventType;
    }

    private EventType withTagAndLogout(Tag tag, LogoutType logoutType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.logoutValue = logoutType;
        return eventType;
    }

    private EventType withTagAndResellerSupportSessionEnd(Tag tag, ResellerSupportSessionEndType resellerSupportSessionEndType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.resellerSupportSessionEndValue = resellerSupportSessionEndType;
        return eventType;
    }

    private EventType withTagAndResellerSupportSessionStart(Tag tag, ResellerSupportSessionStartType resellerSupportSessionStartType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.resellerSupportSessionStartValue = resellerSupportSessionStartType;
        return eventType;
    }

    private EventType withTagAndSignInAsSessionEnd(Tag tag, SignInAsSessionEndType signInAsSessionEndType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.signInAsSessionEndValue = signInAsSessionEndType;
        return eventType;
    }

    private EventType withTagAndSignInAsSessionStart(Tag tag, SignInAsSessionStartType signInAsSessionStartType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.signInAsSessionStartValue = signInAsSessionStartType;
        return eventType;
    }

    private EventType withTagAndSsoError(Tag tag, SsoErrorType ssoErrorType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoErrorValue = ssoErrorType;
        return eventType;
    }

    private EventType withTagAndMemberAddName(Tag tag, MemberAddNameType memberAddNameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberAddNameValue = memberAddNameType;
        return eventType;
    }

    private EventType withTagAndMemberChangeAdminRole(Tag tag, MemberChangeAdminRoleType memberChangeAdminRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberChangeAdminRoleValue = memberChangeAdminRoleType;
        return eventType;
    }

    private EventType withTagAndMemberChangeEmail(Tag tag, MemberChangeEmailType memberChangeEmailType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberChangeEmailValue = memberChangeEmailType;
        return eventType;
    }

    private EventType withTagAndMemberChangeMembershipType(Tag tag, MemberChangeMembershipTypeType memberChangeMembershipTypeType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberChangeMembershipTypeValue = memberChangeMembershipTypeType;
        return eventType;
    }

    private EventType withTagAndMemberChangeName(Tag tag, MemberChangeNameType memberChangeNameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberChangeNameValue = memberChangeNameType;
        return eventType;
    }

    private EventType withTagAndMemberChangeStatus(Tag tag, MemberChangeStatusType memberChangeStatusType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberChangeStatusValue = memberChangeStatusType;
        return eventType;
    }

    private EventType withTagAndMemberDeleteManualContacts(Tag tag, MemberDeleteManualContactsType memberDeleteManualContactsType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberDeleteManualContactsValue = memberDeleteManualContactsType;
        return eventType;
    }

    private EventType withTagAndMemberPermanentlyDeleteAccountContents(Tag tag, MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberPermanentlyDeleteAccountContentsValue = memberPermanentlyDeleteAccountContentsType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsAddCustomQuota(Tag tag, MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsAddCustomQuotaValue = memberSpaceLimitsAddCustomQuotaType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsChangeCustomQuota(Tag tag, MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsChangeCustomQuotaValue = memberSpaceLimitsChangeCustomQuotaType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsChangeStatus(Tag tag, MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsChangeStatusValue = memberSpaceLimitsChangeStatusType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsRemoveCustomQuota(Tag tag, MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsRemoveCustomQuotaValue = memberSpaceLimitsRemoveCustomQuotaType;
        return eventType;
    }

    private EventType withTagAndMemberSuggest(Tag tag, MemberSuggestType memberSuggestType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSuggestValue = memberSuggestType;
        return eventType;
    }

    private EventType withTagAndMemberTransferAccountContents(Tag tag, MemberTransferAccountContentsType memberTransferAccountContentsType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberTransferAccountContentsValue = memberTransferAccountContentsType;
        return eventType;
    }

    private EventType withTagAndSecondaryMailsPolicyChanged(Tag tag, SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.secondaryMailsPolicyChangedValue = secondaryMailsPolicyChangedType;
        return eventType;
    }

    private EventType withTagAndPaperContentAddMember(Tag tag, PaperContentAddMemberType paperContentAddMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentAddMemberValue = paperContentAddMemberType;
        return eventType;
    }

    private EventType withTagAndPaperContentAddToFolder(Tag tag, PaperContentAddToFolderType paperContentAddToFolderType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentAddToFolderValue = paperContentAddToFolderType;
        return eventType;
    }

    private EventType withTagAndPaperContentArchive(Tag tag, PaperContentArchiveType paperContentArchiveType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentArchiveValue = paperContentArchiveType;
        return eventType;
    }

    private EventType withTagAndPaperContentCreate(Tag tag, PaperContentCreateType paperContentCreateType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentCreateValue = paperContentCreateType;
        return eventType;
    }

    private EventType withTagAndPaperContentPermanentlyDelete(Tag tag, PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentPermanentlyDeleteValue = paperContentPermanentlyDeleteType;
        return eventType;
    }

    private EventType withTagAndPaperContentRemoveFromFolder(Tag tag, PaperContentRemoveFromFolderType paperContentRemoveFromFolderType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentRemoveFromFolderValue = paperContentRemoveFromFolderType;
        return eventType;
    }

    private EventType withTagAndPaperContentRemoveMember(Tag tag, PaperContentRemoveMemberType paperContentRemoveMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentRemoveMemberValue = paperContentRemoveMemberType;
        return eventType;
    }

    private EventType withTagAndPaperContentRename(Tag tag, PaperContentRenameType paperContentRenameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentRenameValue = paperContentRenameType;
        return eventType;
    }

    private EventType withTagAndPaperContentRestore(Tag tag, PaperContentRestoreType paperContentRestoreType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperContentRestoreValue = paperContentRestoreType;
        return eventType;
    }

    private EventType withTagAndPaperDocAddComment(Tag tag, PaperDocAddCommentType paperDocAddCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocAddCommentValue = paperDocAddCommentType;
        return eventType;
    }

    private EventType withTagAndPaperDocChangeMemberRole(Tag tag, PaperDocChangeMemberRoleType paperDocChangeMemberRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocChangeMemberRoleValue = paperDocChangeMemberRoleType;
        return eventType;
    }

    private EventType withTagAndPaperDocChangeSharingPolicy(Tag tag, PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocChangeSharingPolicyValue = paperDocChangeSharingPolicyType;
        return eventType;
    }

    private EventType withTagAndPaperDocChangeSubscription(Tag tag, PaperDocChangeSubscriptionType paperDocChangeSubscriptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocChangeSubscriptionValue = paperDocChangeSubscriptionType;
        return eventType;
    }

    private EventType withTagAndPaperDocDeleted(Tag tag, PaperDocDeletedType paperDocDeletedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocDeletedValue = paperDocDeletedType;
        return eventType;
    }

    private EventType withTagAndPaperDocDeleteComment(Tag tag, PaperDocDeleteCommentType paperDocDeleteCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocDeleteCommentValue = paperDocDeleteCommentType;
        return eventType;
    }

    private EventType withTagAndPaperDocDownload(Tag tag, PaperDocDownloadType paperDocDownloadType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocDownloadValue = paperDocDownloadType;
        return eventType;
    }

    private EventType withTagAndPaperDocEdit(Tag tag, PaperDocEditType paperDocEditType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocEditValue = paperDocEditType;
        return eventType;
    }

    private EventType withTagAndPaperDocEditComment(Tag tag, PaperDocEditCommentType paperDocEditCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocEditCommentValue = paperDocEditCommentType;
        return eventType;
    }

    private EventType withTagAndPaperDocFollowed(Tag tag, PaperDocFollowedType paperDocFollowedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocFollowedValue = paperDocFollowedType;
        return eventType;
    }

    private EventType withTagAndPaperDocMention(Tag tag, PaperDocMentionType paperDocMentionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocMentionValue = paperDocMentionType;
        return eventType;
    }

    private EventType withTagAndPaperDocOwnershipChanged(Tag tag, PaperDocOwnershipChangedType paperDocOwnershipChangedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocOwnershipChangedValue = paperDocOwnershipChangedType;
        return eventType;
    }

    private EventType withTagAndPaperDocRequestAccess(Tag tag, PaperDocRequestAccessType paperDocRequestAccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocRequestAccessValue = paperDocRequestAccessType;
        return eventType;
    }

    private EventType withTagAndPaperDocResolveComment(Tag tag, PaperDocResolveCommentType paperDocResolveCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocResolveCommentValue = paperDocResolveCommentType;
        return eventType;
    }

    private EventType withTagAndPaperDocRevert(Tag tag, PaperDocRevertType paperDocRevertType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocRevertValue = paperDocRevertType;
        return eventType;
    }

    private EventType withTagAndPaperDocSlackShare(Tag tag, PaperDocSlackShareType paperDocSlackShareType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocSlackShareValue = paperDocSlackShareType;
        return eventType;
    }

    private EventType withTagAndPaperDocTeamInvite(Tag tag, PaperDocTeamInviteType paperDocTeamInviteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocTeamInviteValue = paperDocTeamInviteType;
        return eventType;
    }

    private EventType withTagAndPaperDocTrashed(Tag tag, PaperDocTrashedType paperDocTrashedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocTrashedValue = paperDocTrashedType;
        return eventType;
    }

    private EventType withTagAndPaperDocUnresolveComment(Tag tag, PaperDocUnresolveCommentType paperDocUnresolveCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocUnresolveCommentValue = paperDocUnresolveCommentType;
        return eventType;
    }

    private EventType withTagAndPaperDocUntrashed(Tag tag, PaperDocUntrashedType paperDocUntrashedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocUntrashedValue = paperDocUntrashedType;
        return eventType;
    }

    private EventType withTagAndPaperDocView(Tag tag, PaperDocViewType paperDocViewType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperDocViewValue = paperDocViewType;
        return eventType;
    }

    private EventType withTagAndPaperExternalViewAllow(Tag tag, PaperExternalViewAllowType paperExternalViewAllowType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperExternalViewAllowValue = paperExternalViewAllowType;
        return eventType;
    }

    private EventType withTagAndPaperExternalViewDefaultTeam(Tag tag, PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperExternalViewDefaultTeamValue = paperExternalViewDefaultTeamType;
        return eventType;
    }

    private EventType withTagAndPaperExternalViewForbid(Tag tag, PaperExternalViewForbidType paperExternalViewForbidType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperExternalViewForbidValue = paperExternalViewForbidType;
        return eventType;
    }

    private EventType withTagAndPaperFolderChangeSubscription(Tag tag, PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperFolderChangeSubscriptionValue = paperFolderChangeSubscriptionType;
        return eventType;
    }

    private EventType withTagAndPaperFolderDeleted(Tag tag, PaperFolderDeletedType paperFolderDeletedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperFolderDeletedValue = paperFolderDeletedType;
        return eventType;
    }

    private EventType withTagAndPaperFolderFollowed(Tag tag, PaperFolderFollowedType paperFolderFollowedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperFolderFollowedValue = paperFolderFollowedType;
        return eventType;
    }

    private EventType withTagAndPaperFolderTeamInvite(Tag tag, PaperFolderTeamInviteType paperFolderTeamInviteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperFolderTeamInviteValue = paperFolderTeamInviteType;
        return eventType;
    }

    private EventType withTagAndPasswordChange(Tag tag, PasswordChangeType passwordChangeType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.passwordChangeValue = passwordChangeType;
        return eventType;
    }

    private EventType withTagAndPasswordReset(Tag tag, PasswordResetType passwordResetType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.passwordResetValue = passwordResetType;
        return eventType;
    }

    private EventType withTagAndPasswordResetAll(Tag tag, PasswordResetAllType passwordResetAllType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.passwordResetAllValue = passwordResetAllType;
        return eventType;
    }

    private EventType withTagAndEmmCreateExceptionsReport(Tag tag, EmmCreateExceptionsReportType emmCreateExceptionsReportType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmCreateExceptionsReportValue = emmCreateExceptionsReportType;
        return eventType;
    }

    private EventType withTagAndEmmCreateUsageReport(Tag tag, EmmCreateUsageReportType emmCreateUsageReportType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmCreateUsageReportValue = emmCreateUsageReportType;
        return eventType;
    }

    private EventType withTagAndExportMembersReport(Tag tag, ExportMembersReportType exportMembersReportType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.exportMembersReportValue = exportMembersReportType;
        return eventType;
    }

    private EventType withTagAndPaperAdminExportStart(Tag tag, PaperAdminExportStartType paperAdminExportStartType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperAdminExportStartValue = paperAdminExportStartType;
        return eventType;
    }

    private EventType withTagAndSmartSyncCreateAdminPrivilegeReport(Tag tag, SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.smartSyncCreateAdminPrivilegeReportValue = smartSyncCreateAdminPrivilegeReportType;
        return eventType;
    }

    private EventType withTagAndTeamActivityCreateReport(Tag tag, TeamActivityCreateReportType teamActivityCreateReportType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamActivityCreateReportValue = teamActivityCreateReportType;
        return eventType;
    }

    private EventType withTagAndCollectionShare(Tag tag, CollectionShareType collectionShareType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.collectionShareValue = collectionShareType;
        return eventType;
    }

    private EventType withTagAndNoteAclInviteOnly(Tag tag, NoteAclInviteOnlyType noteAclInviteOnlyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.noteAclInviteOnlyValue = noteAclInviteOnlyType;
        return eventType;
    }

    private EventType withTagAndNoteAclLink(Tag tag, NoteAclLinkType noteAclLinkType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.noteAclLinkValue = noteAclLinkType;
        return eventType;
    }

    private EventType withTagAndNoteAclTeamLink(Tag tag, NoteAclTeamLinkType noteAclTeamLinkType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.noteAclTeamLinkValue = noteAclTeamLinkType;
        return eventType;
    }

    private EventType withTagAndNoteShared(Tag tag, NoteSharedType noteSharedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.noteSharedValue = noteSharedType;
        return eventType;
    }

    private EventType withTagAndNoteShareReceive(Tag tag, NoteShareReceiveType noteShareReceiveType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.noteShareReceiveValue = noteShareReceiveType;
        return eventType;
    }

    private EventType withTagAndOpenNoteShared(Tag tag, OpenNoteSharedType openNoteSharedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.openNoteSharedValue = openNoteSharedType;
        return eventType;
    }

    private EventType withTagAndSfAddGroup(Tag tag, SfAddGroupType sfAddGroupType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfAddGroupValue = sfAddGroupType;
        return eventType;
    }

    private EventType withTagAndSfAllowNonMembersToViewSharedLinks(Tag tag, SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfAllowNonMembersToViewSharedLinksValue = sfAllowNonMembersToViewSharedLinksType;
        return eventType;
    }

    private EventType withTagAndSfExternalInviteWarn(Tag tag, SfExternalInviteWarnType sfExternalInviteWarnType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfExternalInviteWarnValue = sfExternalInviteWarnType;
        return eventType;
    }

    private EventType withTagAndSfFbInvite(Tag tag, SfFbInviteType sfFbInviteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfFbInviteValue = sfFbInviteType;
        return eventType;
    }

    private EventType withTagAndSfFbInviteChangeRole(Tag tag, SfFbInviteChangeRoleType sfFbInviteChangeRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfFbInviteChangeRoleValue = sfFbInviteChangeRoleType;
        return eventType;
    }

    private EventType withTagAndSfFbUninvite(Tag tag, SfFbUninviteType sfFbUninviteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfFbUninviteValue = sfFbUninviteType;
        return eventType;
    }

    private EventType withTagAndSfInviteGroup(Tag tag, SfInviteGroupType sfInviteGroupType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfInviteGroupValue = sfInviteGroupType;
        return eventType;
    }

    private EventType withTagAndSfTeamGrantAccess(Tag tag, SfTeamGrantAccessType sfTeamGrantAccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfTeamGrantAccessValue = sfTeamGrantAccessType;
        return eventType;
    }

    private EventType withTagAndSfTeamInvite(Tag tag, SfTeamInviteType sfTeamInviteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfTeamInviteValue = sfTeamInviteType;
        return eventType;
    }

    private EventType withTagAndSfTeamInviteChangeRole(Tag tag, SfTeamInviteChangeRoleType sfTeamInviteChangeRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfTeamInviteChangeRoleValue = sfTeamInviteChangeRoleType;
        return eventType;
    }

    private EventType withTagAndSfTeamJoin(Tag tag, SfTeamJoinType sfTeamJoinType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfTeamJoinValue = sfTeamJoinType;
        return eventType;
    }

    private EventType withTagAndSfTeamJoinFromOobLink(Tag tag, SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfTeamJoinFromOobLinkValue = sfTeamJoinFromOobLinkType;
        return eventType;
    }

    private EventType withTagAndSfTeamUninvite(Tag tag, SfTeamUninviteType sfTeamUninviteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sfTeamUninviteValue = sfTeamUninviteType;
        return eventType;
    }

    private EventType withTagAndSharedContentAddInvitees(Tag tag, SharedContentAddInviteesType sharedContentAddInviteesType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentAddInviteesValue = sharedContentAddInviteesType;
        return eventType;
    }

    private EventType withTagAndSharedContentAddLinkExpiry(Tag tag, SharedContentAddLinkExpiryType sharedContentAddLinkExpiryType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentAddLinkExpiryValue = sharedContentAddLinkExpiryType;
        return eventType;
    }

    private EventType withTagAndSharedContentAddLinkPassword(Tag tag, SharedContentAddLinkPasswordType sharedContentAddLinkPasswordType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentAddLinkPasswordValue = sharedContentAddLinkPasswordType;
        return eventType;
    }

    private EventType withTagAndSharedContentAddMember(Tag tag, SharedContentAddMemberType sharedContentAddMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentAddMemberValue = sharedContentAddMemberType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeDownloadsPolicy(Tag tag, SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeDownloadsPolicyValue = sharedContentChangeDownloadsPolicyType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeInviteeRole(Tag tag, SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeInviteeRoleValue = sharedContentChangeInviteeRoleType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeLinkAudience(Tag tag, SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeLinkAudienceValue = sharedContentChangeLinkAudienceType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeLinkExpiry(Tag tag, SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeLinkExpiryValue = sharedContentChangeLinkExpiryType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeLinkPassword(Tag tag, SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeLinkPasswordValue = sharedContentChangeLinkPasswordType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeMemberRole(Tag tag, SharedContentChangeMemberRoleType sharedContentChangeMemberRoleType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeMemberRoleValue = sharedContentChangeMemberRoleType;
        return eventType;
    }

    private EventType withTagAndSharedContentChangeViewerInfoPolicy(Tag tag, SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentChangeViewerInfoPolicyValue = sharedContentChangeViewerInfoPolicyType;
        return eventType;
    }

    private EventType withTagAndSharedContentClaimInvitation(Tag tag, SharedContentClaimInvitationType sharedContentClaimInvitationType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentClaimInvitationValue = sharedContentClaimInvitationType;
        return eventType;
    }

    private EventType withTagAndSharedContentCopy(Tag tag, SharedContentCopyType sharedContentCopyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentCopyValue = sharedContentCopyType;
        return eventType;
    }

    private EventType withTagAndSharedContentDownload(Tag tag, SharedContentDownloadType sharedContentDownloadType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentDownloadValue = sharedContentDownloadType;
        return eventType;
    }

    private EventType withTagAndSharedContentRelinquishMembership(Tag tag, SharedContentRelinquishMembershipType sharedContentRelinquishMembershipType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentRelinquishMembershipValue = sharedContentRelinquishMembershipType;
        return eventType;
    }

    private EventType withTagAndSharedContentRemoveInvitees(Tag tag, SharedContentRemoveInviteesType sharedContentRemoveInviteesType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentRemoveInviteesValue = sharedContentRemoveInviteesType;
        return eventType;
    }

    private EventType withTagAndSharedContentRemoveLinkExpiry(Tag tag, SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentRemoveLinkExpiryValue = sharedContentRemoveLinkExpiryType;
        return eventType;
    }

    private EventType withTagAndSharedContentRemoveLinkPassword(Tag tag, SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentRemoveLinkPasswordValue = sharedContentRemoveLinkPasswordType;
        return eventType;
    }

    private EventType withTagAndSharedContentRemoveMember(Tag tag, SharedContentRemoveMemberType sharedContentRemoveMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentRemoveMemberValue = sharedContentRemoveMemberType;
        return eventType;
    }

    private EventType withTagAndSharedContentRequestAccess(Tag tag, SharedContentRequestAccessType sharedContentRequestAccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentRequestAccessValue = sharedContentRequestAccessType;
        return eventType;
    }

    private EventType withTagAndSharedContentUnshare(Tag tag, SharedContentUnshareType sharedContentUnshareType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentUnshareValue = sharedContentUnshareType;
        return eventType;
    }

    private EventType withTagAndSharedContentView(Tag tag, SharedContentViewType sharedContentViewType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedContentViewValue = sharedContentViewType;
        return eventType;
    }

    private EventType withTagAndSharedFolderChangeLinkPolicy(Tag tag, SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderChangeLinkPolicyValue = sharedFolderChangeLinkPolicyType;
        return eventType;
    }

    private EventType withTagAndSharedFolderChangeMembersInheritancePolicy(Tag tag, SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderChangeMembersInheritancePolicyValue = sharedFolderChangeMembersInheritancePolicyType;
        return eventType;
    }

    private EventType withTagAndSharedFolderChangeMembersManagementPolicy(Tag tag, SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderChangeMembersManagementPolicyValue = sharedFolderChangeMembersManagementPolicyType;
        return eventType;
    }

    private EventType withTagAndSharedFolderChangeMembersPolicy(Tag tag, SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderChangeMembersPolicyValue = sharedFolderChangeMembersPolicyType;
        return eventType;
    }

    private EventType withTagAndSharedFolderCreate(Tag tag, SharedFolderCreateType sharedFolderCreateType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderCreateValue = sharedFolderCreateType;
        return eventType;
    }

    private EventType withTagAndSharedFolderDeclineInvitation(Tag tag, SharedFolderDeclineInvitationType sharedFolderDeclineInvitationType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderDeclineInvitationValue = sharedFolderDeclineInvitationType;
        return eventType;
    }

    private EventType withTagAndSharedFolderMount(Tag tag, SharedFolderMountType sharedFolderMountType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderMountValue = sharedFolderMountType;
        return eventType;
    }

    private EventType withTagAndSharedFolderNest(Tag tag, SharedFolderNestType sharedFolderNestType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderNestValue = sharedFolderNestType;
        return eventType;
    }

    private EventType withTagAndSharedFolderTransferOwnership(Tag tag, SharedFolderTransferOwnershipType sharedFolderTransferOwnershipType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderTransferOwnershipValue = sharedFolderTransferOwnershipType;
        return eventType;
    }

    private EventType withTagAndSharedFolderUnmount(Tag tag, SharedFolderUnmountType sharedFolderUnmountType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedFolderUnmountValue = sharedFolderUnmountType;
        return eventType;
    }

    private EventType withTagAndSharedLinkAddExpiry(Tag tag, SharedLinkAddExpiryType sharedLinkAddExpiryType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkAddExpiryValue = sharedLinkAddExpiryType;
        return eventType;
    }

    private EventType withTagAndSharedLinkChangeExpiry(Tag tag, SharedLinkChangeExpiryType sharedLinkChangeExpiryType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkChangeExpiryValue = sharedLinkChangeExpiryType;
        return eventType;
    }

    private EventType withTagAndSharedLinkChangeVisibility(Tag tag, SharedLinkChangeVisibilityType sharedLinkChangeVisibilityType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkChangeVisibilityValue = sharedLinkChangeVisibilityType;
        return eventType;
    }

    private EventType withTagAndSharedLinkCopy(Tag tag, SharedLinkCopyType sharedLinkCopyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkCopyValue = sharedLinkCopyType;
        return eventType;
    }

    private EventType withTagAndSharedLinkCreate(Tag tag, SharedLinkCreateType sharedLinkCreateType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkCreateValue = sharedLinkCreateType;
        return eventType;
    }

    private EventType withTagAndSharedLinkDisable(Tag tag, SharedLinkDisableType sharedLinkDisableType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkDisableValue = sharedLinkDisableType;
        return eventType;
    }

    private EventType withTagAndSharedLinkDownload(Tag tag, SharedLinkDownloadType sharedLinkDownloadType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkDownloadValue = sharedLinkDownloadType;
        return eventType;
    }

    private EventType withTagAndSharedLinkRemoveExpiry(Tag tag, SharedLinkRemoveExpiryType sharedLinkRemoveExpiryType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkRemoveExpiryValue = sharedLinkRemoveExpiryType;
        return eventType;
    }

    private EventType withTagAndSharedLinkShare(Tag tag, SharedLinkShareType sharedLinkShareType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkShareValue = sharedLinkShareType;
        return eventType;
    }

    private EventType withTagAndSharedLinkView(Tag tag, SharedLinkViewType sharedLinkViewType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedLinkViewValue = sharedLinkViewType;
        return eventType;
    }

    private EventType withTagAndSharedNoteOpened(Tag tag, SharedNoteOpenedType sharedNoteOpenedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharedNoteOpenedValue = sharedNoteOpenedType;
        return eventType;
    }

    private EventType withTagAndShmodelGroupShare(Tag tag, ShmodelGroupShareType shmodelGroupShareType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.shmodelGroupShareValue = shmodelGroupShareType;
        return eventType;
    }

    private EventType withTagAndShowcaseAccessGranted(Tag tag, ShowcaseAccessGrantedType showcaseAccessGrantedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseAccessGrantedValue = showcaseAccessGrantedType;
        return eventType;
    }

    private EventType withTagAndShowcaseAddMember(Tag tag, ShowcaseAddMemberType showcaseAddMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseAddMemberValue = showcaseAddMemberType;
        return eventType;
    }

    private EventType withTagAndShowcaseArchived(Tag tag, ShowcaseArchivedType showcaseArchivedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseArchivedValue = showcaseArchivedType;
        return eventType;
    }

    private EventType withTagAndShowcaseCreated(Tag tag, ShowcaseCreatedType showcaseCreatedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseCreatedValue = showcaseCreatedType;
        return eventType;
    }

    private EventType withTagAndShowcaseDeleteComment(Tag tag, ShowcaseDeleteCommentType showcaseDeleteCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseDeleteCommentValue = showcaseDeleteCommentType;
        return eventType;
    }

    private EventType withTagAndShowcaseEdited(Tag tag, ShowcaseEditedType showcaseEditedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseEditedValue = showcaseEditedType;
        return eventType;
    }

    private EventType withTagAndShowcaseEditComment(Tag tag, ShowcaseEditCommentType showcaseEditCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseEditCommentValue = showcaseEditCommentType;
        return eventType;
    }

    private EventType withTagAndShowcaseFileAdded(Tag tag, ShowcaseFileAddedType showcaseFileAddedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseFileAddedValue = showcaseFileAddedType;
        return eventType;
    }

    private EventType withTagAndShowcaseFileDownload(Tag tag, ShowcaseFileDownloadType showcaseFileDownloadType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseFileDownloadValue = showcaseFileDownloadType;
        return eventType;
    }

    private EventType withTagAndShowcaseFileRemoved(Tag tag, ShowcaseFileRemovedType showcaseFileRemovedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseFileRemovedValue = showcaseFileRemovedType;
        return eventType;
    }

    private EventType withTagAndShowcaseFileView(Tag tag, ShowcaseFileViewType showcaseFileViewType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseFileViewValue = showcaseFileViewType;
        return eventType;
    }

    private EventType withTagAndShowcasePermanentlyDeleted(Tag tag, ShowcasePermanentlyDeletedType showcasePermanentlyDeletedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcasePermanentlyDeletedValue = showcasePermanentlyDeletedType;
        return eventType;
    }

    private EventType withTagAndShowcasePostComment(Tag tag, ShowcasePostCommentType showcasePostCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcasePostCommentValue = showcasePostCommentType;
        return eventType;
    }

    private EventType withTagAndShowcaseRemoveMember(Tag tag, ShowcaseRemoveMemberType showcaseRemoveMemberType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseRemoveMemberValue = showcaseRemoveMemberType;
        return eventType;
    }

    private EventType withTagAndShowcaseRenamed(Tag tag, ShowcaseRenamedType showcaseRenamedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseRenamedValue = showcaseRenamedType;
        return eventType;
    }

    private EventType withTagAndShowcaseRequestAccess(Tag tag, ShowcaseRequestAccessType showcaseRequestAccessType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseRequestAccessValue = showcaseRequestAccessType;
        return eventType;
    }

    private EventType withTagAndShowcaseResolveComment(Tag tag, ShowcaseResolveCommentType showcaseResolveCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseResolveCommentValue = showcaseResolveCommentType;
        return eventType;
    }

    private EventType withTagAndShowcaseRestored(Tag tag, ShowcaseRestoredType showcaseRestoredType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseRestoredValue = showcaseRestoredType;
        return eventType;
    }

    private EventType withTagAndShowcaseTrashed(Tag tag, ShowcaseTrashedType showcaseTrashedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseTrashedValue = showcaseTrashedType;
        return eventType;
    }

    private EventType withTagAndShowcaseTrashedDeprecated(Tag tag, ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseTrashedDeprecatedValue = showcaseTrashedDeprecatedType;
        return eventType;
    }

    private EventType withTagAndShowcaseUnresolveComment(Tag tag, ShowcaseUnresolveCommentType showcaseUnresolveCommentType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseUnresolveCommentValue = showcaseUnresolveCommentType;
        return eventType;
    }

    private EventType withTagAndShowcaseUntrashed(Tag tag, ShowcaseUntrashedType showcaseUntrashedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseUntrashedValue = showcaseUntrashedType;
        return eventType;
    }

    private EventType withTagAndShowcaseUntrashedDeprecated(Tag tag, ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseUntrashedDeprecatedValue = showcaseUntrashedDeprecatedType;
        return eventType;
    }

    private EventType withTagAndShowcaseView(Tag tag, ShowcaseViewType showcaseViewType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseViewValue = showcaseViewType;
        return eventType;
    }

    private EventType withTagAndSsoAddCert(Tag tag, SsoAddCertType ssoAddCertType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoAddCertValue = ssoAddCertType;
        return eventType;
    }

    private EventType withTagAndSsoAddLoginUrl(Tag tag, SsoAddLoginUrlType ssoAddLoginUrlType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoAddLoginUrlValue = ssoAddLoginUrlType;
        return eventType;
    }

    private EventType withTagAndSsoAddLogoutUrl(Tag tag, SsoAddLogoutUrlType ssoAddLogoutUrlType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoAddLogoutUrlValue = ssoAddLogoutUrlType;
        return eventType;
    }

    private EventType withTagAndSsoChangeCert(Tag tag, SsoChangeCertType ssoChangeCertType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoChangeCertValue = ssoChangeCertType;
        return eventType;
    }

    private EventType withTagAndSsoChangeLoginUrl(Tag tag, SsoChangeLoginUrlType ssoChangeLoginUrlType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoChangeLoginUrlValue = ssoChangeLoginUrlType;
        return eventType;
    }

    private EventType withTagAndSsoChangeLogoutUrl(Tag tag, SsoChangeLogoutUrlType ssoChangeLogoutUrlType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoChangeLogoutUrlValue = ssoChangeLogoutUrlType;
        return eventType;
    }

    private EventType withTagAndSsoChangeSamlIdentityMode(Tag tag, SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoChangeSamlIdentityModeValue = ssoChangeSamlIdentityModeType;
        return eventType;
    }

    private EventType withTagAndSsoRemoveCert(Tag tag, SsoRemoveCertType ssoRemoveCertType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoRemoveCertValue = ssoRemoveCertType;
        return eventType;
    }

    private EventType withTagAndSsoRemoveLoginUrl(Tag tag, SsoRemoveLoginUrlType ssoRemoveLoginUrlType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoRemoveLoginUrlValue = ssoRemoveLoginUrlType;
        return eventType;
    }

    private EventType withTagAndSsoRemoveLogoutUrl(Tag tag, SsoRemoveLogoutUrlType ssoRemoveLogoutUrlType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoRemoveLogoutUrlValue = ssoRemoveLogoutUrlType;
        return eventType;
    }

    private EventType withTagAndTeamFolderChangeStatus(Tag tag, TeamFolderChangeStatusType teamFolderChangeStatusType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamFolderChangeStatusValue = teamFolderChangeStatusType;
        return eventType;
    }

    private EventType withTagAndTeamFolderCreate(Tag tag, TeamFolderCreateType teamFolderCreateType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamFolderCreateValue = teamFolderCreateType;
        return eventType;
    }

    private EventType withTagAndTeamFolderDowngrade(Tag tag, TeamFolderDowngradeType teamFolderDowngradeType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamFolderDowngradeValue = teamFolderDowngradeType;
        return eventType;
    }

    private EventType withTagAndTeamFolderPermanentlyDelete(Tag tag, TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamFolderPermanentlyDeleteValue = teamFolderPermanentlyDeleteType;
        return eventType;
    }

    private EventType withTagAndTeamFolderRename(Tag tag, TeamFolderRenameType teamFolderRenameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamFolderRenameValue = teamFolderRenameType;
        return eventType;
    }

    private EventType withTagAndTeamSelectiveSyncSettingsChanged(Tag tag, TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamSelectiveSyncSettingsChangedValue = teamSelectiveSyncSettingsChangedType;
        return eventType;
    }

    private EventType withTagAndAccountCaptureChangePolicy(Tag tag, AccountCaptureChangePolicyType accountCaptureChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.accountCaptureChangePolicyValue = accountCaptureChangePolicyType;
        return eventType;
    }

    private EventType withTagAndAllowDownloadDisabled(Tag tag, AllowDownloadDisabledType allowDownloadDisabledType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.allowDownloadDisabledValue = allowDownloadDisabledType;
        return eventType;
    }

    private EventType withTagAndAllowDownloadEnabled(Tag tag, AllowDownloadEnabledType allowDownloadEnabledType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.allowDownloadEnabledValue = allowDownloadEnabledType;
        return eventType;
    }

    private EventType withTagAndDataPlacementRestrictionChangePolicy(Tag tag, DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.dataPlacementRestrictionChangePolicyValue = dataPlacementRestrictionChangePolicyType;
        return eventType;
    }

    private EventType withTagAndDataPlacementRestrictionSatisfyPolicy(Tag tag, DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.dataPlacementRestrictionSatisfyPolicyValue = dataPlacementRestrictionSatisfyPolicyType;
        return eventType;
    }

    private EventType withTagAndDeviceApprovalsChangeDesktopPolicy(Tag tag, DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceApprovalsChangeDesktopPolicyValue = deviceApprovalsChangeDesktopPolicyType;
        return eventType;
    }

    private EventType withTagAndDeviceApprovalsChangeMobilePolicy(Tag tag, DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceApprovalsChangeMobilePolicyValue = deviceApprovalsChangeMobilePolicyType;
        return eventType;
    }

    private EventType withTagAndDeviceApprovalsChangeOverageAction(Tag tag, DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceApprovalsChangeOverageActionValue = deviceApprovalsChangeOverageActionType;
        return eventType;
    }

    private EventType withTagAndDeviceApprovalsChangeUnlinkAction(Tag tag, DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.deviceApprovalsChangeUnlinkActionValue = deviceApprovalsChangeUnlinkActionType;
        return eventType;
    }

    private EventType withTagAndDirectoryRestrictionsAddMembers(Tag tag, DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.directoryRestrictionsAddMembersValue = directoryRestrictionsAddMembersType;
        return eventType;
    }

    private EventType withTagAndDirectoryRestrictionsRemoveMembers(Tag tag, DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.directoryRestrictionsRemoveMembersValue = directoryRestrictionsRemoveMembersType;
        return eventType;
    }

    private EventType withTagAndEmmAddException(Tag tag, EmmAddExceptionType emmAddExceptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmAddExceptionValue = emmAddExceptionType;
        return eventType;
    }

    private EventType withTagAndEmmChangePolicy(Tag tag, EmmChangePolicyType emmChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmChangePolicyValue = emmChangePolicyType;
        return eventType;
    }

    private EventType withTagAndEmmRemoveException(Tag tag, EmmRemoveExceptionType emmRemoveExceptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.emmRemoveExceptionValue = emmRemoveExceptionType;
        return eventType;
    }

    private EventType withTagAndExtendedVersionHistoryChangePolicy(Tag tag, ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.extendedVersionHistoryChangePolicyValue = extendedVersionHistoryChangePolicyType;
        return eventType;
    }

    private EventType withTagAndFileCommentsChangePolicy(Tag tag, FileCommentsChangePolicyType fileCommentsChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileCommentsChangePolicyValue = fileCommentsChangePolicyType;
        return eventType;
    }

    private EventType withTagAndFileRequestsChangePolicy(Tag tag, FileRequestsChangePolicyType fileRequestsChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestsChangePolicyValue = fileRequestsChangePolicyType;
        return eventType;
    }

    private EventType withTagAndFileRequestsEmailsEnabled(Tag tag, FileRequestsEmailsEnabledType fileRequestsEmailsEnabledType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestsEmailsEnabledValue = fileRequestsEmailsEnabledType;
        return eventType;
    }

    private EventType withTagAndFileRequestsEmailsRestrictedToTeamOnly(Tag tag, FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.fileRequestsEmailsRestrictedToTeamOnlyValue = fileRequestsEmailsRestrictedToTeamOnlyType;
        return eventType;
    }

    private EventType withTagAndGoogleSsoChangePolicy(Tag tag, GoogleSsoChangePolicyType googleSsoChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.googleSsoChangePolicyValue = googleSsoChangePolicyType;
        return eventType;
    }

    private EventType withTagAndGroupUserManagementChangePolicy(Tag tag, GroupUserManagementChangePolicyType groupUserManagementChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.groupUserManagementChangePolicyValue = groupUserManagementChangePolicyType;
        return eventType;
    }

    private EventType withTagAndMemberRequestsChangePolicy(Tag tag, MemberRequestsChangePolicyType memberRequestsChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberRequestsChangePolicyValue = memberRequestsChangePolicyType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsAddException(Tag tag, MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsAddExceptionValue = memberSpaceLimitsAddExceptionType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsChangeCapsTypePolicy(Tag tag, MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsChangeCapsTypePolicyValue = memberSpaceLimitsChangeCapsTypePolicyType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsChangePolicy(Tag tag, MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsChangePolicyValue = memberSpaceLimitsChangePolicyType;
        return eventType;
    }

    private EventType withTagAndMemberSpaceLimitsRemoveException(Tag tag, MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSpaceLimitsRemoveExceptionValue = memberSpaceLimitsRemoveExceptionType;
        return eventType;
    }

    private EventType withTagAndMemberSuggestionsChangePolicy(Tag tag, MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.memberSuggestionsChangePolicyValue = memberSuggestionsChangePolicyType;
        return eventType;
    }

    private EventType withTagAndMicrosoftOfficeAddinChangePolicy(Tag tag, MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.microsoftOfficeAddinChangePolicyValue = microsoftOfficeAddinChangePolicyType;
        return eventType;
    }

    private EventType withTagAndNetworkControlChangePolicy(Tag tag, NetworkControlChangePolicyType networkControlChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.networkControlChangePolicyValue = networkControlChangePolicyType;
        return eventType;
    }

    private EventType withTagAndPaperChangeDeploymentPolicy(Tag tag, PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperChangeDeploymentPolicyValue = paperChangeDeploymentPolicyType;
        return eventType;
    }

    private EventType withTagAndPaperChangeMemberLinkPolicy(Tag tag, PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperChangeMemberLinkPolicyValue = paperChangeMemberLinkPolicyType;
        return eventType;
    }

    private EventType withTagAndPaperChangeMemberPolicy(Tag tag, PaperChangeMemberPolicyType paperChangeMemberPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperChangeMemberPolicyValue = paperChangeMemberPolicyType;
        return eventType;
    }

    private EventType withTagAndPaperChangePolicy(Tag tag, PaperChangePolicyType paperChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperChangePolicyValue = paperChangePolicyType;
        return eventType;
    }

    private EventType withTagAndPaperEnabledUsersGroupAddition(Tag tag, PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperEnabledUsersGroupAdditionValue = paperEnabledUsersGroupAdditionType;
        return eventType;
    }

    private EventType withTagAndPaperEnabledUsersGroupRemoval(Tag tag, PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.paperEnabledUsersGroupRemovalValue = paperEnabledUsersGroupRemovalType;
        return eventType;
    }

    private EventType withTagAndPermanentDeleteChangePolicy(Tag tag, PermanentDeleteChangePolicyType permanentDeleteChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.permanentDeleteChangePolicyValue = permanentDeleteChangePolicyType;
        return eventType;
    }

    private EventType withTagAndSharingChangeFolderJoinPolicy(Tag tag, SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharingChangeFolderJoinPolicyValue = sharingChangeFolderJoinPolicyType;
        return eventType;
    }

    private EventType withTagAndSharingChangeLinkPolicy(Tag tag, SharingChangeLinkPolicyType sharingChangeLinkPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharingChangeLinkPolicyValue = sharingChangeLinkPolicyType;
        return eventType;
    }

    private EventType withTagAndSharingChangeMemberPolicy(Tag tag, SharingChangeMemberPolicyType sharingChangeMemberPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.sharingChangeMemberPolicyValue = sharingChangeMemberPolicyType;
        return eventType;
    }

    private EventType withTagAndShowcaseChangeDownloadPolicy(Tag tag, ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseChangeDownloadPolicyValue = showcaseChangeDownloadPolicyType;
        return eventType;
    }

    private EventType withTagAndShowcaseChangeEnabledPolicy(Tag tag, ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseChangeEnabledPolicyValue = showcaseChangeEnabledPolicyType;
        return eventType;
    }

    private EventType withTagAndShowcaseChangeExternalSharingPolicy(Tag tag, ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.showcaseChangeExternalSharingPolicyValue = showcaseChangeExternalSharingPolicyType;
        return eventType;
    }

    private EventType withTagAndSmartSyncChangePolicy(Tag tag, SmartSyncChangePolicyType smartSyncChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.smartSyncChangePolicyValue = smartSyncChangePolicyType;
        return eventType;
    }

    private EventType withTagAndSmartSyncNotOptOut(Tag tag, SmartSyncNotOptOutType smartSyncNotOptOutType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.smartSyncNotOptOutValue = smartSyncNotOptOutType;
        return eventType;
    }

    private EventType withTagAndSmartSyncOptOut(Tag tag, SmartSyncOptOutType smartSyncOptOutType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.smartSyncOptOutValue = smartSyncOptOutType;
        return eventType;
    }

    private EventType withTagAndSsoChangePolicy(Tag tag, SsoChangePolicyType ssoChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.ssoChangePolicyValue = ssoChangePolicyType;
        return eventType;
    }

    private EventType withTagAndTeamSelectiveSyncPolicyChanged(Tag tag, TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamSelectiveSyncPolicyChangedValue = teamSelectiveSyncPolicyChangedType;
        return eventType;
    }

    private EventType withTagAndTfaChangePolicy(Tag tag, TfaChangePolicyType tfaChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaChangePolicyValue = tfaChangePolicyType;
        return eventType;
    }

    private EventType withTagAndTwoAccountChangePolicy(Tag tag, TwoAccountChangePolicyType twoAccountChangePolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.twoAccountChangePolicyValue = twoAccountChangePolicyType;
        return eventType;
    }

    private EventType withTagAndViewerInfoPolicyChanged(Tag tag, ViewerInfoPolicyChangedType viewerInfoPolicyChangedType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.viewerInfoPolicyChangedValue = viewerInfoPolicyChangedType;
        return eventType;
    }

    private EventType withTagAndWebSessionsChangeFixedLengthPolicy(Tag tag, WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.webSessionsChangeFixedLengthPolicyValue = webSessionsChangeFixedLengthPolicyType;
        return eventType;
    }

    private EventType withTagAndWebSessionsChangeIdleLengthPolicy(Tag tag, WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.webSessionsChangeIdleLengthPolicyValue = webSessionsChangeIdleLengthPolicyType;
        return eventType;
    }

    private EventType withTagAndTeamMergeFrom(Tag tag, TeamMergeFromType teamMergeFromType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamMergeFromValue = teamMergeFromType;
        return eventType;
    }

    private EventType withTagAndTeamMergeTo(Tag tag, TeamMergeToType teamMergeToType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamMergeToValue = teamMergeToType;
        return eventType;
    }

    private EventType withTagAndTeamProfileAddLogo(Tag tag, TeamProfileAddLogoType teamProfileAddLogoType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamProfileAddLogoValue = teamProfileAddLogoType;
        return eventType;
    }

    private EventType withTagAndTeamProfileChangeDefaultLanguage(Tag tag, TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamProfileChangeDefaultLanguageValue = teamProfileChangeDefaultLanguageType;
        return eventType;
    }

    private EventType withTagAndTeamProfileChangeLogo(Tag tag, TeamProfileChangeLogoType teamProfileChangeLogoType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamProfileChangeLogoValue = teamProfileChangeLogoType;
        return eventType;
    }

    private EventType withTagAndTeamProfileChangeName(Tag tag, TeamProfileChangeNameType teamProfileChangeNameType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamProfileChangeNameValue = teamProfileChangeNameType;
        return eventType;
    }

    private EventType withTagAndTeamProfileRemoveLogo(Tag tag, TeamProfileRemoveLogoType teamProfileRemoveLogoType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.teamProfileRemoveLogoValue = teamProfileRemoveLogoType;
        return eventType;
    }

    private EventType withTagAndTfaAddBackupPhone(Tag tag, TfaAddBackupPhoneType tfaAddBackupPhoneType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaAddBackupPhoneValue = tfaAddBackupPhoneType;
        return eventType;
    }

    private EventType withTagAndTfaAddSecurityKey(Tag tag, TfaAddSecurityKeyType tfaAddSecurityKeyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaAddSecurityKeyValue = tfaAddSecurityKeyType;
        return eventType;
    }

    private EventType withTagAndTfaChangeBackupPhone(Tag tag, TfaChangeBackupPhoneType tfaChangeBackupPhoneType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaChangeBackupPhoneValue = tfaChangeBackupPhoneType;
        return eventType;
    }

    private EventType withTagAndTfaChangeStatus(Tag tag, TfaChangeStatusType tfaChangeStatusType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaChangeStatusValue = tfaChangeStatusType;
        return eventType;
    }

    private EventType withTagAndTfaRemoveBackupPhone(Tag tag, TfaRemoveBackupPhoneType tfaRemoveBackupPhoneType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaRemoveBackupPhoneValue = tfaRemoveBackupPhoneType;
        return eventType;
    }

    private EventType withTagAndTfaRemoveSecurityKey(Tag tag, TfaRemoveSecurityKeyType tfaRemoveSecurityKeyType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaRemoveSecurityKeyValue = tfaRemoveSecurityKeyType;
        return eventType;
    }

    private EventType withTagAndTfaReset(Tag tag, TfaResetType tfaResetType) {
        EventType eventType = new EventType();
        eventType._tag = tag;
        eventType.tfaResetValue = tfaResetType;
        return eventType;
    }

    public Tag tag() {
        return this._tag;
    }

    public boolean isAppLinkTeam() {
        return this._tag == Tag.APP_LINK_TEAM;
    }

    public static EventType appLinkTeam(AppLinkTeamType appLinkTeamType) {
        if (appLinkTeamType != null) {
            return new EventType().withTagAndAppLinkTeam(Tag.APP_LINK_TEAM, appLinkTeamType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AppLinkTeamType getAppLinkTeamValue() {
        if (this._tag == Tag.APP_LINK_TEAM) {
            return this.appLinkTeamValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.APP_LINK_TEAM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAppLinkUser() {
        return this._tag == Tag.APP_LINK_USER;
    }

    public static EventType appLinkUser(AppLinkUserType appLinkUserType) {
        if (appLinkUserType != null) {
            return new EventType().withTagAndAppLinkUser(Tag.APP_LINK_USER, appLinkUserType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AppLinkUserType getAppLinkUserValue() {
        if (this._tag == Tag.APP_LINK_USER) {
            return this.appLinkUserValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.APP_LINK_USER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAppUnlinkTeam() {
        return this._tag == Tag.APP_UNLINK_TEAM;
    }

    public static EventType appUnlinkTeam(AppUnlinkTeamType appUnlinkTeamType) {
        if (appUnlinkTeamType != null) {
            return new EventType().withTagAndAppUnlinkTeam(Tag.APP_UNLINK_TEAM, appUnlinkTeamType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AppUnlinkTeamType getAppUnlinkTeamValue() {
        if (this._tag == Tag.APP_UNLINK_TEAM) {
            return this.appUnlinkTeamValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.APP_UNLINK_TEAM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAppUnlinkUser() {
        return this._tag == Tag.APP_UNLINK_USER;
    }

    public static EventType appUnlinkUser(AppUnlinkUserType appUnlinkUserType) {
        if (appUnlinkUserType != null) {
            return new EventType().withTagAndAppUnlinkUser(Tag.APP_UNLINK_USER, appUnlinkUserType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AppUnlinkUserType getAppUnlinkUserValue() {
        if (this._tag == Tag.APP_UNLINK_USER) {
            return this.appUnlinkUserValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.APP_UNLINK_USER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileAddComment() {
        return this._tag == Tag.FILE_ADD_COMMENT;
    }

    public static EventType fileAddComment(FileAddCommentType fileAddCommentType) {
        if (fileAddCommentType != null) {
            return new EventType().withTagAndFileAddComment(Tag.FILE_ADD_COMMENT, fileAddCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileAddCommentType getFileAddCommentValue() {
        if (this._tag == Tag.FILE_ADD_COMMENT) {
            return this.fileAddCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_ADD_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileChangeCommentSubscription() {
        return this._tag == Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION;
    }

    public static EventType fileChangeCommentSubscription(FileChangeCommentSubscriptionType fileChangeCommentSubscriptionType) {
        if (fileChangeCommentSubscriptionType != null) {
            return new EventType().withTagAndFileChangeCommentSubscription(Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION, fileChangeCommentSubscriptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileChangeCommentSubscriptionType getFileChangeCommentSubscriptionValue() {
        if (this._tag == Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION) {
            return this.fileChangeCommentSubscriptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileDeleteComment() {
        return this._tag == Tag.FILE_DELETE_COMMENT;
    }

    public static EventType fileDeleteComment(FileDeleteCommentType fileDeleteCommentType) {
        if (fileDeleteCommentType != null) {
            return new EventType().withTagAndFileDeleteComment(Tag.FILE_DELETE_COMMENT, fileDeleteCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileDeleteCommentType getFileDeleteCommentValue() {
        if (this._tag == Tag.FILE_DELETE_COMMENT) {
            return this.fileDeleteCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_DELETE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileLikeComment() {
        return this._tag == Tag.FILE_LIKE_COMMENT;
    }

    public static EventType fileLikeComment(FileLikeCommentType fileLikeCommentType) {
        if (fileLikeCommentType != null) {
            return new EventType().withTagAndFileLikeComment(Tag.FILE_LIKE_COMMENT, fileLikeCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileLikeCommentType getFileLikeCommentValue() {
        if (this._tag == Tag.FILE_LIKE_COMMENT) {
            return this.fileLikeCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_LIKE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileResolveComment() {
        return this._tag == Tag.FILE_RESOLVE_COMMENT;
    }

    public static EventType fileResolveComment(FileResolveCommentType fileResolveCommentType) {
        if (fileResolveCommentType != null) {
            return new EventType().withTagAndFileResolveComment(Tag.FILE_RESOLVE_COMMENT, fileResolveCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileResolveCommentType getFileResolveCommentValue() {
        if (this._tag == Tag.FILE_RESOLVE_COMMENT) {
            return this.fileResolveCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_RESOLVE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileUnlikeComment() {
        return this._tag == Tag.FILE_UNLIKE_COMMENT;
    }

    public static EventType fileUnlikeComment(FileUnlikeCommentType fileUnlikeCommentType) {
        if (fileUnlikeCommentType != null) {
            return new EventType().withTagAndFileUnlikeComment(Tag.FILE_UNLIKE_COMMENT, fileUnlikeCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileUnlikeCommentType getFileUnlikeCommentValue() {
        if (this._tag == Tag.FILE_UNLIKE_COMMENT) {
            return this.fileUnlikeCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_UNLIKE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileUnresolveComment() {
        return this._tag == Tag.FILE_UNRESOLVE_COMMENT;
    }

    public static EventType fileUnresolveComment(FileUnresolveCommentType fileUnresolveCommentType) {
        if (fileUnresolveCommentType != null) {
            return new EventType().withTagAndFileUnresolveComment(Tag.FILE_UNRESOLVE_COMMENT, fileUnresolveCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileUnresolveCommentType getFileUnresolveCommentValue() {
        if (this._tag == Tag.FILE_UNRESOLVE_COMMENT) {
            return this.fileUnresolveCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_UNRESOLVE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceChangeIpDesktop() {
        return this._tag == Tag.DEVICE_CHANGE_IP_DESKTOP;
    }

    public static EventType deviceChangeIpDesktop(DeviceChangeIpDesktopType deviceChangeIpDesktopType) {
        if (deviceChangeIpDesktopType != null) {
            return new EventType().withTagAndDeviceChangeIpDesktop(Tag.DEVICE_CHANGE_IP_DESKTOP, deviceChangeIpDesktopType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceChangeIpDesktopType getDeviceChangeIpDesktopValue() {
        if (this._tag == Tag.DEVICE_CHANGE_IP_DESKTOP) {
            return this.deviceChangeIpDesktopValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_CHANGE_IP_DESKTOP, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceChangeIpMobile() {
        return this._tag == Tag.DEVICE_CHANGE_IP_MOBILE;
    }

    public static EventType deviceChangeIpMobile(DeviceChangeIpMobileType deviceChangeIpMobileType) {
        if (deviceChangeIpMobileType != null) {
            return new EventType().withTagAndDeviceChangeIpMobile(Tag.DEVICE_CHANGE_IP_MOBILE, deviceChangeIpMobileType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceChangeIpMobileType getDeviceChangeIpMobileValue() {
        if (this._tag == Tag.DEVICE_CHANGE_IP_MOBILE) {
            return this.deviceChangeIpMobileValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_CHANGE_IP_MOBILE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceChangeIpWeb() {
        return this._tag == Tag.DEVICE_CHANGE_IP_WEB;
    }

    public static EventType deviceChangeIpWeb(DeviceChangeIpWebType deviceChangeIpWebType) {
        if (deviceChangeIpWebType != null) {
            return new EventType().withTagAndDeviceChangeIpWeb(Tag.DEVICE_CHANGE_IP_WEB, deviceChangeIpWebType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceChangeIpWebType getDeviceChangeIpWebValue() {
        if (this._tag == Tag.DEVICE_CHANGE_IP_WEB) {
            return this.deviceChangeIpWebValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_CHANGE_IP_WEB, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceDeleteOnUnlinkFail() {
        return this._tag == Tag.DEVICE_DELETE_ON_UNLINK_FAIL;
    }

    public static EventType deviceDeleteOnUnlinkFail(DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailType) {
        if (deviceDeleteOnUnlinkFailType != null) {
            return new EventType().withTagAndDeviceDeleteOnUnlinkFail(Tag.DEVICE_DELETE_ON_UNLINK_FAIL, deviceDeleteOnUnlinkFailType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceDeleteOnUnlinkFailType getDeviceDeleteOnUnlinkFailValue() {
        if (this._tag == Tag.DEVICE_DELETE_ON_UNLINK_FAIL) {
            return this.deviceDeleteOnUnlinkFailValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_DELETE_ON_UNLINK_FAIL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceDeleteOnUnlinkSuccess() {
        return this._tag == Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS;
    }

    public static EventType deviceDeleteOnUnlinkSuccess(DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessType) {
        if (deviceDeleteOnUnlinkSuccessType != null) {
            return new EventType().withTagAndDeviceDeleteOnUnlinkSuccess(Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS, deviceDeleteOnUnlinkSuccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceDeleteOnUnlinkSuccessType getDeviceDeleteOnUnlinkSuccessValue() {
        if (this._tag == Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS) {
            return this.deviceDeleteOnUnlinkSuccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceLinkFail() {
        return this._tag == Tag.DEVICE_LINK_FAIL;
    }

    public static EventType deviceLinkFail(DeviceLinkFailType deviceLinkFailType) {
        if (deviceLinkFailType != null) {
            return new EventType().withTagAndDeviceLinkFail(Tag.DEVICE_LINK_FAIL, deviceLinkFailType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceLinkFailType getDeviceLinkFailValue() {
        if (this._tag == Tag.DEVICE_LINK_FAIL) {
            return this.deviceLinkFailValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_LINK_FAIL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceLinkSuccess() {
        return this._tag == Tag.DEVICE_LINK_SUCCESS;
    }

    public static EventType deviceLinkSuccess(DeviceLinkSuccessType deviceLinkSuccessType) {
        if (deviceLinkSuccessType != null) {
            return new EventType().withTagAndDeviceLinkSuccess(Tag.DEVICE_LINK_SUCCESS, deviceLinkSuccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceLinkSuccessType getDeviceLinkSuccessValue() {
        if (this._tag == Tag.DEVICE_LINK_SUCCESS) {
            return this.deviceLinkSuccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_LINK_SUCCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceManagementDisabled() {
        return this._tag == Tag.DEVICE_MANAGEMENT_DISABLED;
    }

    public static EventType deviceManagementDisabled(DeviceManagementDisabledType deviceManagementDisabledType) {
        if (deviceManagementDisabledType != null) {
            return new EventType().withTagAndDeviceManagementDisabled(Tag.DEVICE_MANAGEMENT_DISABLED, deviceManagementDisabledType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceManagementDisabledType getDeviceManagementDisabledValue() {
        if (this._tag == Tag.DEVICE_MANAGEMENT_DISABLED) {
            return this.deviceManagementDisabledValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_MANAGEMENT_DISABLED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceManagementEnabled() {
        return this._tag == Tag.DEVICE_MANAGEMENT_ENABLED;
    }

    public static EventType deviceManagementEnabled(DeviceManagementEnabledType deviceManagementEnabledType) {
        if (deviceManagementEnabledType != null) {
            return new EventType().withTagAndDeviceManagementEnabled(Tag.DEVICE_MANAGEMENT_ENABLED, deviceManagementEnabledType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceManagementEnabledType getDeviceManagementEnabledValue() {
        if (this._tag == Tag.DEVICE_MANAGEMENT_ENABLED) {
            return this.deviceManagementEnabledValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_MANAGEMENT_ENABLED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceUnlink() {
        return this._tag == Tag.DEVICE_UNLINK;
    }

    public static EventType deviceUnlink(DeviceUnlinkType deviceUnlinkType) {
        if (deviceUnlinkType != null) {
            return new EventType().withTagAndDeviceUnlink(Tag.DEVICE_UNLINK, deviceUnlinkType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceUnlinkType getDeviceUnlinkValue() {
        if (this._tag == Tag.DEVICE_UNLINK) {
            return this.deviceUnlinkValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_UNLINK, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmRefreshAuthToken() {
        return this._tag == Tag.EMM_REFRESH_AUTH_TOKEN;
    }

    public static EventType emmRefreshAuthToken(EmmRefreshAuthTokenType emmRefreshAuthTokenType) {
        if (emmRefreshAuthTokenType != null) {
            return new EventType().withTagAndEmmRefreshAuthToken(Tag.EMM_REFRESH_AUTH_TOKEN, emmRefreshAuthTokenType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmRefreshAuthTokenType getEmmRefreshAuthTokenValue() {
        if (this._tag == Tag.EMM_REFRESH_AUTH_TOKEN) {
            return this.emmRefreshAuthTokenValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_REFRESH_AUTH_TOKEN, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAccountCaptureChangeAvailability() {
        return this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY;
    }

    public static EventType accountCaptureChangeAvailability(AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityType) {
        if (accountCaptureChangeAvailabilityType != null) {
            return new EventType().withTagAndAccountCaptureChangeAvailability(Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY, accountCaptureChangeAvailabilityType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AccountCaptureChangeAvailabilityType getAccountCaptureChangeAvailabilityValue() {
        if (this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY) {
            return this.accountCaptureChangeAvailabilityValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAccountCaptureMigrateAccount() {
        return this._tag == Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT;
    }

    public static EventType accountCaptureMigrateAccount(AccountCaptureMigrateAccountType accountCaptureMigrateAccountType) {
        if (accountCaptureMigrateAccountType != null) {
            return new EventType().withTagAndAccountCaptureMigrateAccount(Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT, accountCaptureMigrateAccountType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AccountCaptureMigrateAccountType getAccountCaptureMigrateAccountValue() {
        if (this._tag == Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT) {
            return this.accountCaptureMigrateAccountValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAccountCaptureNotificationEmailsSent() {
        return this._tag == Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT;
    }

    public static EventType accountCaptureNotificationEmailsSent(AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentType) {
        if (accountCaptureNotificationEmailsSentType != null) {
            return new EventType().withTagAndAccountCaptureNotificationEmailsSent(Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT, accountCaptureNotificationEmailsSentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AccountCaptureNotificationEmailsSentType getAccountCaptureNotificationEmailsSentValue() {
        if (this._tag == Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT) {
            return this.accountCaptureNotificationEmailsSentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAccountCaptureRelinquishAccount() {
        return this._tag == Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT;
    }

    public static EventType accountCaptureRelinquishAccount(AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountType) {
        if (accountCaptureRelinquishAccountType != null) {
            return new EventType().withTagAndAccountCaptureRelinquishAccount(Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT, accountCaptureRelinquishAccountType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AccountCaptureRelinquishAccountType getAccountCaptureRelinquishAccountValue() {
        if (this._tag == Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT) {
            return this.accountCaptureRelinquishAccountValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDisabledDomainInvites() {
        return this._tag == Tag.DISABLED_DOMAIN_INVITES;
    }

    public static EventType disabledDomainInvites(DisabledDomainInvitesType disabledDomainInvitesType) {
        if (disabledDomainInvitesType != null) {
            return new EventType().withTagAndDisabledDomainInvites(Tag.DISABLED_DOMAIN_INVITES, disabledDomainInvitesType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DisabledDomainInvitesType getDisabledDomainInvitesValue() {
        if (this._tag == Tag.DISABLED_DOMAIN_INVITES) {
            return this.disabledDomainInvitesValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DISABLED_DOMAIN_INVITES, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainInvitesApproveRequestToJoinTeam() {
        return this._tag == Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM;
    }

    public static EventType domainInvitesApproveRequestToJoinTeam(DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamType) {
        if (domainInvitesApproveRequestToJoinTeamType != null) {
            return new EventType().withTagAndDomainInvitesApproveRequestToJoinTeam(Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM, domainInvitesApproveRequestToJoinTeamType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainInvitesApproveRequestToJoinTeamType getDomainInvitesApproveRequestToJoinTeamValue() {
        if (this._tag == Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM) {
            return this.domainInvitesApproveRequestToJoinTeamValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainInvitesDeclineRequestToJoinTeam() {
        return this._tag == Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM;
    }

    public static EventType domainInvitesDeclineRequestToJoinTeam(DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamType) {
        if (domainInvitesDeclineRequestToJoinTeamType != null) {
            return new EventType().withTagAndDomainInvitesDeclineRequestToJoinTeam(Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM, domainInvitesDeclineRequestToJoinTeamType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainInvitesDeclineRequestToJoinTeamType getDomainInvitesDeclineRequestToJoinTeamValue() {
        if (this._tag == Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM) {
            return this.domainInvitesDeclineRequestToJoinTeamValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainInvitesEmailExistingUsers() {
        return this._tag == Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS;
    }

    public static EventType domainInvitesEmailExistingUsers(DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersType) {
        if (domainInvitesEmailExistingUsersType != null) {
            return new EventType().withTagAndDomainInvitesEmailExistingUsers(Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS, domainInvitesEmailExistingUsersType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainInvitesEmailExistingUsersType getDomainInvitesEmailExistingUsersValue() {
        if (this._tag == Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS) {
            return this.domainInvitesEmailExistingUsersValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainInvitesRequestToJoinTeam() {
        return this._tag == Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM;
    }

    public static EventType domainInvitesRequestToJoinTeam(DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamType) {
        if (domainInvitesRequestToJoinTeamType != null) {
            return new EventType().withTagAndDomainInvitesRequestToJoinTeam(Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM, domainInvitesRequestToJoinTeamType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainInvitesRequestToJoinTeamType getDomainInvitesRequestToJoinTeamValue() {
        if (this._tag == Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM) {
            return this.domainInvitesRequestToJoinTeamValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainInvitesSetInviteNewUserPrefToNo() {
        return this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO;
    }

    public static EventType domainInvitesSetInviteNewUserPrefToNo(DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoType) {
        if (domainInvitesSetInviteNewUserPrefToNoType != null) {
            return new EventType().withTagAndDomainInvitesSetInviteNewUserPrefToNo(Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO, domainInvitesSetInviteNewUserPrefToNoType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainInvitesSetInviteNewUserPrefToNoType getDomainInvitesSetInviteNewUserPrefToNoValue() {
        if (this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO) {
            return this.domainInvitesSetInviteNewUserPrefToNoValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainInvitesSetInviteNewUserPrefToYes() {
        return this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES;
    }

    public static EventType domainInvitesSetInviteNewUserPrefToYes(DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesType) {
        if (domainInvitesSetInviteNewUserPrefToYesType != null) {
            return new EventType().withTagAndDomainInvitesSetInviteNewUserPrefToYes(Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES, domainInvitesSetInviteNewUserPrefToYesType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainInvitesSetInviteNewUserPrefToYesType getDomainInvitesSetInviteNewUserPrefToYesValue() {
        if (this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES) {
            return this.domainInvitesSetInviteNewUserPrefToYesValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainVerificationAddDomainFail() {
        return this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL;
    }

    public static EventType domainVerificationAddDomainFail(DomainVerificationAddDomainFailType domainVerificationAddDomainFailType) {
        if (domainVerificationAddDomainFailType != null) {
            return new EventType().withTagAndDomainVerificationAddDomainFail(Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL, domainVerificationAddDomainFailType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainVerificationAddDomainFailType getDomainVerificationAddDomainFailValue() {
        if (this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL) {
            return this.domainVerificationAddDomainFailValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainVerificationAddDomainSuccess() {
        return this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS;
    }

    public static EventType domainVerificationAddDomainSuccess(DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessType) {
        if (domainVerificationAddDomainSuccessType != null) {
            return new EventType().withTagAndDomainVerificationAddDomainSuccess(Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS, domainVerificationAddDomainSuccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainVerificationAddDomainSuccessType getDomainVerificationAddDomainSuccessValue() {
        if (this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS) {
            return this.domainVerificationAddDomainSuccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDomainVerificationRemoveDomain() {
        return this._tag == Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN;
    }

    public static EventType domainVerificationRemoveDomain(DomainVerificationRemoveDomainType domainVerificationRemoveDomainType) {
        if (domainVerificationRemoveDomainType != null) {
            return new EventType().withTagAndDomainVerificationRemoveDomain(Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN, domainVerificationRemoveDomainType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DomainVerificationRemoveDomainType getDomainVerificationRemoveDomainValue() {
        if (this._tag == Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN) {
            return this.domainVerificationRemoveDomainValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEnabledDomainInvites() {
        return this._tag == Tag.ENABLED_DOMAIN_INVITES;
    }

    public static EventType enabledDomainInvites(EnabledDomainInvitesType enabledDomainInvitesType) {
        if (enabledDomainInvitesType != null) {
            return new EventType().withTagAndEnabledDomainInvites(Tag.ENABLED_DOMAIN_INVITES, enabledDomainInvitesType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EnabledDomainInvitesType getEnabledDomainInvitesValue() {
        if (this._tag == Tag.ENABLED_DOMAIN_INVITES) {
            return this.enabledDomainInvitesValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ENABLED_DOMAIN_INVITES, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isCreateFolder() {
        return this._tag == Tag.CREATE_FOLDER;
    }

    public static EventType createFolder(CreateFolderType createFolderType) {
        if (createFolderType != null) {
            return new EventType().withTagAndCreateFolder(Tag.CREATE_FOLDER, createFolderType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public CreateFolderType getCreateFolderValue() {
        if (this._tag == Tag.CREATE_FOLDER) {
            return this.createFolderValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.CREATE_FOLDER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileAdd() {
        return this._tag == Tag.FILE_ADD;
    }

    public static EventType fileAdd(FileAddType fileAddType) {
        if (fileAddType != null) {
            return new EventType().withTagAndFileAdd(Tag.FILE_ADD, fileAddType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileAddType getFileAddValue() {
        if (this._tag == Tag.FILE_ADD) {
            return this.fileAddValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_ADD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileCopy() {
        return this._tag == Tag.FILE_COPY;
    }

    public static EventType fileCopy(FileCopyType fileCopyType) {
        if (fileCopyType != null) {
            return new EventType().withTagAndFileCopy(Tag.FILE_COPY, fileCopyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileCopyType getFileCopyValue() {
        if (this._tag == Tag.FILE_COPY) {
            return this.fileCopyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_COPY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileDelete() {
        return this._tag == Tag.FILE_DELETE;
    }

    public static EventType fileDelete(FileDeleteType fileDeleteType) {
        if (fileDeleteType != null) {
            return new EventType().withTagAndFileDelete(Tag.FILE_DELETE, fileDeleteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileDeleteType getFileDeleteValue() {
        if (this._tag == Tag.FILE_DELETE) {
            return this.fileDeleteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_DELETE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileDownload() {
        return this._tag == Tag.FILE_DOWNLOAD;
    }

    public static EventType fileDownload(FileDownloadType fileDownloadType) {
        if (fileDownloadType != null) {
            return new EventType().withTagAndFileDownload(Tag.FILE_DOWNLOAD, fileDownloadType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileDownloadType getFileDownloadValue() {
        if (this._tag == Tag.FILE_DOWNLOAD) {
            return this.fileDownloadValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_DOWNLOAD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileEdit() {
        return this._tag == Tag.FILE_EDIT;
    }

    public static EventType fileEdit(FileEditType fileEditType) {
        if (fileEditType != null) {
            return new EventType().withTagAndFileEdit(Tag.FILE_EDIT, fileEditType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileEditType getFileEditValue() {
        if (this._tag == Tag.FILE_EDIT) {
            return this.fileEditValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_EDIT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileGetCopyReference() {
        return this._tag == Tag.FILE_GET_COPY_REFERENCE;
    }

    public static EventType fileGetCopyReference(FileGetCopyReferenceType fileGetCopyReferenceType) {
        if (fileGetCopyReferenceType != null) {
            return new EventType().withTagAndFileGetCopyReference(Tag.FILE_GET_COPY_REFERENCE, fileGetCopyReferenceType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileGetCopyReferenceType getFileGetCopyReferenceValue() {
        if (this._tag == Tag.FILE_GET_COPY_REFERENCE) {
            return this.fileGetCopyReferenceValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_GET_COPY_REFERENCE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileMove() {
        return this._tag == Tag.FILE_MOVE;
    }

    public static EventType fileMove(FileMoveType fileMoveType) {
        if (fileMoveType != null) {
            return new EventType().withTagAndFileMove(Tag.FILE_MOVE, fileMoveType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileMoveType getFileMoveValue() {
        if (this._tag == Tag.FILE_MOVE) {
            return this.fileMoveValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_MOVE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFilePermanentlyDelete() {
        return this._tag == Tag.FILE_PERMANENTLY_DELETE;
    }

    public static EventType filePermanentlyDelete(FilePermanentlyDeleteType filePermanentlyDeleteType) {
        if (filePermanentlyDeleteType != null) {
            return new EventType().withTagAndFilePermanentlyDelete(Tag.FILE_PERMANENTLY_DELETE, filePermanentlyDeleteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FilePermanentlyDeleteType getFilePermanentlyDeleteValue() {
        if (this._tag == Tag.FILE_PERMANENTLY_DELETE) {
            return this.filePermanentlyDeleteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_PERMANENTLY_DELETE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFilePreview() {
        return this._tag == Tag.FILE_PREVIEW;
    }

    public static EventType filePreview(FilePreviewType filePreviewType) {
        if (filePreviewType != null) {
            return new EventType().withTagAndFilePreview(Tag.FILE_PREVIEW, filePreviewType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FilePreviewType getFilePreviewValue() {
        if (this._tag == Tag.FILE_PREVIEW) {
            return this.filePreviewValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_PREVIEW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRename() {
        return this._tag == Tag.FILE_RENAME;
    }

    public static EventType fileRename(FileRenameType fileRenameType) {
        if (fileRenameType != null) {
            return new EventType().withTagAndFileRename(Tag.FILE_RENAME, fileRenameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRenameType getFileRenameValue() {
        if (this._tag == Tag.FILE_RENAME) {
            return this.fileRenameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_RENAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRestore() {
        return this._tag == Tag.FILE_RESTORE;
    }

    public static EventType fileRestore(FileRestoreType fileRestoreType) {
        if (fileRestoreType != null) {
            return new EventType().withTagAndFileRestore(Tag.FILE_RESTORE, fileRestoreType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRestoreType getFileRestoreValue() {
        if (this._tag == Tag.FILE_RESTORE) {
            return this.fileRestoreValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_RESTORE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRevert() {
        return this._tag == Tag.FILE_REVERT;
    }

    public static EventType fileRevert(FileRevertType fileRevertType) {
        if (fileRevertType != null) {
            return new EventType().withTagAndFileRevert(Tag.FILE_REVERT, fileRevertType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRevertType getFileRevertValue() {
        if (this._tag == Tag.FILE_REVERT) {
            return this.fileRevertValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REVERT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRollbackChanges() {
        return this._tag == Tag.FILE_ROLLBACK_CHANGES;
    }

    public static EventType fileRollbackChanges(FileRollbackChangesType fileRollbackChangesType) {
        if (fileRollbackChangesType != null) {
            return new EventType().withTagAndFileRollbackChanges(Tag.FILE_ROLLBACK_CHANGES, fileRollbackChangesType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRollbackChangesType getFileRollbackChangesValue() {
        if (this._tag == Tag.FILE_ROLLBACK_CHANGES) {
            return this.fileRollbackChangesValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_ROLLBACK_CHANGES, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileSaveCopyReference() {
        return this._tag == Tag.FILE_SAVE_COPY_REFERENCE;
    }

    public static EventType fileSaveCopyReference(FileSaveCopyReferenceType fileSaveCopyReferenceType) {
        if (fileSaveCopyReferenceType != null) {
            return new EventType().withTagAndFileSaveCopyReference(Tag.FILE_SAVE_COPY_REFERENCE, fileSaveCopyReferenceType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileSaveCopyReferenceType getFileSaveCopyReferenceValue() {
        if (this._tag == Tag.FILE_SAVE_COPY_REFERENCE) {
            return this.fileSaveCopyReferenceValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_SAVE_COPY_REFERENCE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestChange() {
        return this._tag == Tag.FILE_REQUEST_CHANGE;
    }

    public static EventType fileRequestChange(FileRequestChangeType fileRequestChangeType) {
        if (fileRequestChangeType != null) {
            return new EventType().withTagAndFileRequestChange(Tag.FILE_REQUEST_CHANGE, fileRequestChangeType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestChangeType getFileRequestChangeValue() {
        if (this._tag == Tag.FILE_REQUEST_CHANGE) {
            return this.fileRequestChangeValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUEST_CHANGE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestClose() {
        return this._tag == Tag.FILE_REQUEST_CLOSE;
    }

    public static EventType fileRequestClose(FileRequestCloseType fileRequestCloseType) {
        if (fileRequestCloseType != null) {
            return new EventType().withTagAndFileRequestClose(Tag.FILE_REQUEST_CLOSE, fileRequestCloseType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestCloseType getFileRequestCloseValue() {
        if (this._tag == Tag.FILE_REQUEST_CLOSE) {
            return this.fileRequestCloseValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUEST_CLOSE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestCreate() {
        return this._tag == Tag.FILE_REQUEST_CREATE;
    }

    public static EventType fileRequestCreate(FileRequestCreateType fileRequestCreateType) {
        if (fileRequestCreateType != null) {
            return new EventType().withTagAndFileRequestCreate(Tag.FILE_REQUEST_CREATE, fileRequestCreateType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestCreateType getFileRequestCreateValue() {
        if (this._tag == Tag.FILE_REQUEST_CREATE) {
            return this.fileRequestCreateValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUEST_CREATE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestReceiveFile() {
        return this._tag == Tag.FILE_REQUEST_RECEIVE_FILE;
    }

    public static EventType fileRequestReceiveFile(FileRequestReceiveFileType fileRequestReceiveFileType) {
        if (fileRequestReceiveFileType != null) {
            return new EventType().withTagAndFileRequestReceiveFile(Tag.FILE_REQUEST_RECEIVE_FILE, fileRequestReceiveFileType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestReceiveFileType getFileRequestReceiveFileValue() {
        if (this._tag == Tag.FILE_REQUEST_RECEIVE_FILE) {
            return this.fileRequestReceiveFileValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUEST_RECEIVE_FILE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupAddExternalId() {
        return this._tag == Tag.GROUP_ADD_EXTERNAL_ID;
    }

    public static EventType groupAddExternalId(GroupAddExternalIdType groupAddExternalIdType) {
        if (groupAddExternalIdType != null) {
            return new EventType().withTagAndGroupAddExternalId(Tag.GROUP_ADD_EXTERNAL_ID, groupAddExternalIdType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupAddExternalIdType getGroupAddExternalIdValue() {
        if (this._tag == Tag.GROUP_ADD_EXTERNAL_ID) {
            return this.groupAddExternalIdValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_ADD_EXTERNAL_ID, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupAddMember() {
        return this._tag == Tag.GROUP_ADD_MEMBER;
    }

    public static EventType groupAddMember(GroupAddMemberType groupAddMemberType) {
        if (groupAddMemberType != null) {
            return new EventType().withTagAndGroupAddMember(Tag.GROUP_ADD_MEMBER, groupAddMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupAddMemberType getGroupAddMemberValue() {
        if (this._tag == Tag.GROUP_ADD_MEMBER) {
            return this.groupAddMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_ADD_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupChangeExternalId() {
        return this._tag == Tag.GROUP_CHANGE_EXTERNAL_ID;
    }

    public static EventType groupChangeExternalId(GroupChangeExternalIdType groupChangeExternalIdType) {
        if (groupChangeExternalIdType != null) {
            return new EventType().withTagAndGroupChangeExternalId(Tag.GROUP_CHANGE_EXTERNAL_ID, groupChangeExternalIdType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupChangeExternalIdType getGroupChangeExternalIdValue() {
        if (this._tag == Tag.GROUP_CHANGE_EXTERNAL_ID) {
            return this.groupChangeExternalIdValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_CHANGE_EXTERNAL_ID, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupChangeManagementType() {
        return this._tag == Tag.GROUP_CHANGE_MANAGEMENT_TYPE;
    }

    public static EventType groupChangeManagementType(GroupChangeManagementTypeType groupChangeManagementTypeType) {
        if (groupChangeManagementTypeType != null) {
            return new EventType().withTagAndGroupChangeManagementType(Tag.GROUP_CHANGE_MANAGEMENT_TYPE, groupChangeManagementTypeType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupChangeManagementTypeType getGroupChangeManagementTypeValue() {
        if (this._tag == Tag.GROUP_CHANGE_MANAGEMENT_TYPE) {
            return this.groupChangeManagementTypeValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_CHANGE_MANAGEMENT_TYPE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupChangeMemberRole() {
        return this._tag == Tag.GROUP_CHANGE_MEMBER_ROLE;
    }

    public static EventType groupChangeMemberRole(GroupChangeMemberRoleType groupChangeMemberRoleType) {
        if (groupChangeMemberRoleType != null) {
            return new EventType().withTagAndGroupChangeMemberRole(Tag.GROUP_CHANGE_MEMBER_ROLE, groupChangeMemberRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupChangeMemberRoleType getGroupChangeMemberRoleValue() {
        if (this._tag == Tag.GROUP_CHANGE_MEMBER_ROLE) {
            return this.groupChangeMemberRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_CHANGE_MEMBER_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupCreate() {
        return this._tag == Tag.GROUP_CREATE;
    }

    public static EventType groupCreate(GroupCreateType groupCreateType) {
        if (groupCreateType != null) {
            return new EventType().withTagAndGroupCreate(Tag.GROUP_CREATE, groupCreateType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupCreateType getGroupCreateValue() {
        if (this._tag == Tag.GROUP_CREATE) {
            return this.groupCreateValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_CREATE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupDelete() {
        return this._tag == Tag.GROUP_DELETE;
    }

    public static EventType groupDelete(GroupDeleteType groupDeleteType) {
        if (groupDeleteType != null) {
            return new EventType().withTagAndGroupDelete(Tag.GROUP_DELETE, groupDeleteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupDeleteType getGroupDeleteValue() {
        if (this._tag == Tag.GROUP_DELETE) {
            return this.groupDeleteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_DELETE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupDescriptionUpdated() {
        return this._tag == Tag.GROUP_DESCRIPTION_UPDATED;
    }

    public static EventType groupDescriptionUpdated(GroupDescriptionUpdatedType groupDescriptionUpdatedType) {
        if (groupDescriptionUpdatedType != null) {
            return new EventType().withTagAndGroupDescriptionUpdated(Tag.GROUP_DESCRIPTION_UPDATED, groupDescriptionUpdatedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupDescriptionUpdatedType getGroupDescriptionUpdatedValue() {
        if (this._tag == Tag.GROUP_DESCRIPTION_UPDATED) {
            return this.groupDescriptionUpdatedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_DESCRIPTION_UPDATED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupJoinPolicyUpdated() {
        return this._tag == Tag.GROUP_JOIN_POLICY_UPDATED;
    }

    public static EventType groupJoinPolicyUpdated(GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedType) {
        if (groupJoinPolicyUpdatedType != null) {
            return new EventType().withTagAndGroupJoinPolicyUpdated(Tag.GROUP_JOIN_POLICY_UPDATED, groupJoinPolicyUpdatedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupJoinPolicyUpdatedType getGroupJoinPolicyUpdatedValue() {
        if (this._tag == Tag.GROUP_JOIN_POLICY_UPDATED) {
            return this.groupJoinPolicyUpdatedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_JOIN_POLICY_UPDATED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupMoved() {
        return this._tag == Tag.GROUP_MOVED;
    }

    public static EventType groupMoved(GroupMovedType groupMovedType) {
        if (groupMovedType != null) {
            return new EventType().withTagAndGroupMoved(Tag.GROUP_MOVED, groupMovedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupMovedType getGroupMovedValue() {
        if (this._tag == Tag.GROUP_MOVED) {
            return this.groupMovedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_MOVED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupRemoveExternalId() {
        return this._tag == Tag.GROUP_REMOVE_EXTERNAL_ID;
    }

    public static EventType groupRemoveExternalId(GroupRemoveExternalIdType groupRemoveExternalIdType) {
        if (groupRemoveExternalIdType != null) {
            return new EventType().withTagAndGroupRemoveExternalId(Tag.GROUP_REMOVE_EXTERNAL_ID, groupRemoveExternalIdType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupRemoveExternalIdType getGroupRemoveExternalIdValue() {
        if (this._tag == Tag.GROUP_REMOVE_EXTERNAL_ID) {
            return this.groupRemoveExternalIdValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_REMOVE_EXTERNAL_ID, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupRemoveMember() {
        return this._tag == Tag.GROUP_REMOVE_MEMBER;
    }

    public static EventType groupRemoveMember(GroupRemoveMemberType groupRemoveMemberType) {
        if (groupRemoveMemberType != null) {
            return new EventType().withTagAndGroupRemoveMember(Tag.GROUP_REMOVE_MEMBER, groupRemoveMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupRemoveMemberType getGroupRemoveMemberValue() {
        if (this._tag == Tag.GROUP_REMOVE_MEMBER) {
            return this.groupRemoveMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_REMOVE_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupRename() {
        return this._tag == Tag.GROUP_RENAME;
    }

    public static EventType groupRename(GroupRenameType groupRenameType) {
        if (groupRenameType != null) {
            return new EventType().withTagAndGroupRename(Tag.GROUP_RENAME, groupRenameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupRenameType getGroupRenameValue() {
        if (this._tag == Tag.GROUP_RENAME) {
            return this.groupRenameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_RENAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmError() {
        return this._tag == Tag.EMM_ERROR;
    }

    public static EventType emmError(EmmErrorType emmErrorType) {
        if (emmErrorType != null) {
            return new EventType().withTagAndEmmError(Tag.EMM_ERROR, emmErrorType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmErrorType getEmmErrorValue() {
        if (this._tag == Tag.EMM_ERROR) {
            return this.emmErrorValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_ERROR, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isLoginFail() {
        return this._tag == Tag.LOGIN_FAIL;
    }

    public static EventType loginFail(LoginFailType loginFailType) {
        if (loginFailType != null) {
            return new EventType().withTagAndLoginFail(Tag.LOGIN_FAIL, loginFailType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public LoginFailType getLoginFailValue() {
        if (this._tag == Tag.LOGIN_FAIL) {
            return this.loginFailValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.LOGIN_FAIL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isLoginSuccess() {
        return this._tag == Tag.LOGIN_SUCCESS;
    }

    public static EventType loginSuccess(LoginSuccessType loginSuccessType) {
        if (loginSuccessType != null) {
            return new EventType().withTagAndLoginSuccess(Tag.LOGIN_SUCCESS, loginSuccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public LoginSuccessType getLoginSuccessValue() {
        if (this._tag == Tag.LOGIN_SUCCESS) {
            return this.loginSuccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.LOGIN_SUCCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isLogout() {
        return this._tag == Tag.LOGOUT;
    }

    public static EventType logout(LogoutType logoutType) {
        if (logoutType != null) {
            return new EventType().withTagAndLogout(Tag.LOGOUT, logoutType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public LogoutType getLogoutValue() {
        if (this._tag == Tag.LOGOUT) {
            return this.logoutValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.LOGOUT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isResellerSupportSessionEnd() {
        return this._tag == Tag.RESELLER_SUPPORT_SESSION_END;
    }

    public static EventType resellerSupportSessionEnd(ResellerSupportSessionEndType resellerSupportSessionEndType) {
        if (resellerSupportSessionEndType != null) {
            return new EventType().withTagAndResellerSupportSessionEnd(Tag.RESELLER_SUPPORT_SESSION_END, resellerSupportSessionEndType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ResellerSupportSessionEndType getResellerSupportSessionEndValue() {
        if (this._tag == Tag.RESELLER_SUPPORT_SESSION_END) {
            return this.resellerSupportSessionEndValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.RESELLER_SUPPORT_SESSION_END, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isResellerSupportSessionStart() {
        return this._tag == Tag.RESELLER_SUPPORT_SESSION_START;
    }

    public static EventType resellerSupportSessionStart(ResellerSupportSessionStartType resellerSupportSessionStartType) {
        if (resellerSupportSessionStartType != null) {
            return new EventType().withTagAndResellerSupportSessionStart(Tag.RESELLER_SUPPORT_SESSION_START, resellerSupportSessionStartType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ResellerSupportSessionStartType getResellerSupportSessionStartValue() {
        if (this._tag == Tag.RESELLER_SUPPORT_SESSION_START) {
            return this.resellerSupportSessionStartValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.RESELLER_SUPPORT_SESSION_START, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSignInAsSessionEnd() {
        return this._tag == Tag.SIGN_IN_AS_SESSION_END;
    }

    public static EventType signInAsSessionEnd(SignInAsSessionEndType signInAsSessionEndType) {
        if (signInAsSessionEndType != null) {
            return new EventType().withTagAndSignInAsSessionEnd(Tag.SIGN_IN_AS_SESSION_END, signInAsSessionEndType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SignInAsSessionEndType getSignInAsSessionEndValue() {
        if (this._tag == Tag.SIGN_IN_AS_SESSION_END) {
            return this.signInAsSessionEndValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SIGN_IN_AS_SESSION_END, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSignInAsSessionStart() {
        return this._tag == Tag.SIGN_IN_AS_SESSION_START;
    }

    public static EventType signInAsSessionStart(SignInAsSessionStartType signInAsSessionStartType) {
        if (signInAsSessionStartType != null) {
            return new EventType().withTagAndSignInAsSessionStart(Tag.SIGN_IN_AS_SESSION_START, signInAsSessionStartType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SignInAsSessionStartType getSignInAsSessionStartValue() {
        if (this._tag == Tag.SIGN_IN_AS_SESSION_START) {
            return this.signInAsSessionStartValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SIGN_IN_AS_SESSION_START, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoError() {
        return this._tag == Tag.SSO_ERROR;
    }

    public static EventType ssoError(SsoErrorType ssoErrorType) {
        if (ssoErrorType != null) {
            return new EventType().withTagAndSsoError(Tag.SSO_ERROR, ssoErrorType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoErrorType getSsoErrorValue() {
        if (this._tag == Tag.SSO_ERROR) {
            return this.ssoErrorValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_ERROR, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberAddName() {
        return this._tag == Tag.MEMBER_ADD_NAME;
    }

    public static EventType memberAddName(MemberAddNameType memberAddNameType) {
        if (memberAddNameType != null) {
            return new EventType().withTagAndMemberAddName(Tag.MEMBER_ADD_NAME, memberAddNameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberAddNameType getMemberAddNameValue() {
        if (this._tag == Tag.MEMBER_ADD_NAME) {
            return this.memberAddNameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_ADD_NAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberChangeAdminRole() {
        return this._tag == Tag.MEMBER_CHANGE_ADMIN_ROLE;
    }

    public static EventType memberChangeAdminRole(MemberChangeAdminRoleType memberChangeAdminRoleType) {
        if (memberChangeAdminRoleType != null) {
            return new EventType().withTagAndMemberChangeAdminRole(Tag.MEMBER_CHANGE_ADMIN_ROLE, memberChangeAdminRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberChangeAdminRoleType getMemberChangeAdminRoleValue() {
        if (this._tag == Tag.MEMBER_CHANGE_ADMIN_ROLE) {
            return this.memberChangeAdminRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_CHANGE_ADMIN_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberChangeEmail() {
        return this._tag == Tag.MEMBER_CHANGE_EMAIL;
    }

    public static EventType memberChangeEmail(MemberChangeEmailType memberChangeEmailType) {
        if (memberChangeEmailType != null) {
            return new EventType().withTagAndMemberChangeEmail(Tag.MEMBER_CHANGE_EMAIL, memberChangeEmailType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberChangeEmailType getMemberChangeEmailValue() {
        if (this._tag == Tag.MEMBER_CHANGE_EMAIL) {
            return this.memberChangeEmailValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_CHANGE_EMAIL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberChangeMembershipType() {
        return this._tag == Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE;
    }

    public static EventType memberChangeMembershipType(MemberChangeMembershipTypeType memberChangeMembershipTypeType) {
        if (memberChangeMembershipTypeType != null) {
            return new EventType().withTagAndMemberChangeMembershipType(Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE, memberChangeMembershipTypeType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberChangeMembershipTypeType getMemberChangeMembershipTypeValue() {
        if (this._tag == Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE) {
            return this.memberChangeMembershipTypeValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberChangeName() {
        return this._tag == Tag.MEMBER_CHANGE_NAME;
    }

    public static EventType memberChangeName(MemberChangeNameType memberChangeNameType) {
        if (memberChangeNameType != null) {
            return new EventType().withTagAndMemberChangeName(Tag.MEMBER_CHANGE_NAME, memberChangeNameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberChangeNameType getMemberChangeNameValue() {
        if (this._tag == Tag.MEMBER_CHANGE_NAME) {
            return this.memberChangeNameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_CHANGE_NAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberChangeStatus() {
        return this._tag == Tag.MEMBER_CHANGE_STATUS;
    }

    public static EventType memberChangeStatus(MemberChangeStatusType memberChangeStatusType) {
        if (memberChangeStatusType != null) {
            return new EventType().withTagAndMemberChangeStatus(Tag.MEMBER_CHANGE_STATUS, memberChangeStatusType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberChangeStatusType getMemberChangeStatusValue() {
        if (this._tag == Tag.MEMBER_CHANGE_STATUS) {
            return this.memberChangeStatusValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_CHANGE_STATUS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberDeleteManualContacts() {
        return this._tag == Tag.MEMBER_DELETE_MANUAL_CONTACTS;
    }

    public static EventType memberDeleteManualContacts(MemberDeleteManualContactsType memberDeleteManualContactsType) {
        if (memberDeleteManualContactsType != null) {
            return new EventType().withTagAndMemberDeleteManualContacts(Tag.MEMBER_DELETE_MANUAL_CONTACTS, memberDeleteManualContactsType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberDeleteManualContactsType getMemberDeleteManualContactsValue() {
        if (this._tag == Tag.MEMBER_DELETE_MANUAL_CONTACTS) {
            return this.memberDeleteManualContactsValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_DELETE_MANUAL_CONTACTS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberPermanentlyDeleteAccountContents() {
        return this._tag == Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS;
    }

    public static EventType memberPermanentlyDeleteAccountContents(MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsType) {
        if (memberPermanentlyDeleteAccountContentsType != null) {
            return new EventType().withTagAndMemberPermanentlyDeleteAccountContents(Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS, memberPermanentlyDeleteAccountContentsType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberPermanentlyDeleteAccountContentsType getMemberPermanentlyDeleteAccountContentsValue() {
        if (this._tag == Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS) {
            return this.memberPermanentlyDeleteAccountContentsValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsAddCustomQuota() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA;
    }

    public static EventType memberSpaceLimitsAddCustomQuota(MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaType) {
        if (memberSpaceLimitsAddCustomQuotaType != null) {
            return new EventType().withTagAndMemberSpaceLimitsAddCustomQuota(Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA, memberSpaceLimitsAddCustomQuotaType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsAddCustomQuotaType getMemberSpaceLimitsAddCustomQuotaValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA) {
            return this.memberSpaceLimitsAddCustomQuotaValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsChangeCustomQuota() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA;
    }

    public static EventType memberSpaceLimitsChangeCustomQuota(MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaType) {
        if (memberSpaceLimitsChangeCustomQuotaType != null) {
            return new EventType().withTagAndMemberSpaceLimitsChangeCustomQuota(Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA, memberSpaceLimitsChangeCustomQuotaType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsChangeCustomQuotaType getMemberSpaceLimitsChangeCustomQuotaValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA) {
            return this.memberSpaceLimitsChangeCustomQuotaValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsChangeStatus() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS;
    }

    public static EventType memberSpaceLimitsChangeStatus(MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusType) {
        if (memberSpaceLimitsChangeStatusType != null) {
            return new EventType().withTagAndMemberSpaceLimitsChangeStatus(Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS, memberSpaceLimitsChangeStatusType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsChangeStatusType getMemberSpaceLimitsChangeStatusValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS) {
            return this.memberSpaceLimitsChangeStatusValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsRemoveCustomQuota() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA;
    }

    public static EventType memberSpaceLimitsRemoveCustomQuota(MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaType) {
        if (memberSpaceLimitsRemoveCustomQuotaType != null) {
            return new EventType().withTagAndMemberSpaceLimitsRemoveCustomQuota(Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA, memberSpaceLimitsRemoveCustomQuotaType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsRemoveCustomQuotaType getMemberSpaceLimitsRemoveCustomQuotaValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA) {
            return this.memberSpaceLimitsRemoveCustomQuotaValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSuggest() {
        return this._tag == Tag.MEMBER_SUGGEST;
    }

    public static EventType memberSuggest(MemberSuggestType memberSuggestType) {
        if (memberSuggestType != null) {
            return new EventType().withTagAndMemberSuggest(Tag.MEMBER_SUGGEST, memberSuggestType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSuggestType getMemberSuggestValue() {
        if (this._tag == Tag.MEMBER_SUGGEST) {
            return this.memberSuggestValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SUGGEST, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberTransferAccountContents() {
        return this._tag == Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS;
    }

    public static EventType memberTransferAccountContents(MemberTransferAccountContentsType memberTransferAccountContentsType) {
        if (memberTransferAccountContentsType != null) {
            return new EventType().withTagAndMemberTransferAccountContents(Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS, memberTransferAccountContentsType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberTransferAccountContentsType getMemberTransferAccountContentsValue() {
        if (this._tag == Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS) {
            return this.memberTransferAccountContentsValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSecondaryMailsPolicyChanged() {
        return this._tag == Tag.SECONDARY_MAILS_POLICY_CHANGED;
    }

    public static EventType secondaryMailsPolicyChanged(SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedType) {
        if (secondaryMailsPolicyChangedType != null) {
            return new EventType().withTagAndSecondaryMailsPolicyChanged(Tag.SECONDARY_MAILS_POLICY_CHANGED, secondaryMailsPolicyChangedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SecondaryMailsPolicyChangedType getSecondaryMailsPolicyChangedValue() {
        if (this._tag == Tag.SECONDARY_MAILS_POLICY_CHANGED) {
            return this.secondaryMailsPolicyChangedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SECONDARY_MAILS_POLICY_CHANGED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentAddMember() {
        return this._tag == Tag.PAPER_CONTENT_ADD_MEMBER;
    }

    public static EventType paperContentAddMember(PaperContentAddMemberType paperContentAddMemberType) {
        if (paperContentAddMemberType != null) {
            return new EventType().withTagAndPaperContentAddMember(Tag.PAPER_CONTENT_ADD_MEMBER, paperContentAddMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentAddMemberType getPaperContentAddMemberValue() {
        if (this._tag == Tag.PAPER_CONTENT_ADD_MEMBER) {
            return this.paperContentAddMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_ADD_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentAddToFolder() {
        return this._tag == Tag.PAPER_CONTENT_ADD_TO_FOLDER;
    }

    public static EventType paperContentAddToFolder(PaperContentAddToFolderType paperContentAddToFolderType) {
        if (paperContentAddToFolderType != null) {
            return new EventType().withTagAndPaperContentAddToFolder(Tag.PAPER_CONTENT_ADD_TO_FOLDER, paperContentAddToFolderType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentAddToFolderType getPaperContentAddToFolderValue() {
        if (this._tag == Tag.PAPER_CONTENT_ADD_TO_FOLDER) {
            return this.paperContentAddToFolderValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_ADD_TO_FOLDER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentArchive() {
        return this._tag == Tag.PAPER_CONTENT_ARCHIVE;
    }

    public static EventType paperContentArchive(PaperContentArchiveType paperContentArchiveType) {
        if (paperContentArchiveType != null) {
            return new EventType().withTagAndPaperContentArchive(Tag.PAPER_CONTENT_ARCHIVE, paperContentArchiveType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentArchiveType getPaperContentArchiveValue() {
        if (this._tag == Tag.PAPER_CONTENT_ARCHIVE) {
            return this.paperContentArchiveValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_ARCHIVE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentCreate() {
        return this._tag == Tag.PAPER_CONTENT_CREATE;
    }

    public static EventType paperContentCreate(PaperContentCreateType paperContentCreateType) {
        if (paperContentCreateType != null) {
            return new EventType().withTagAndPaperContentCreate(Tag.PAPER_CONTENT_CREATE, paperContentCreateType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentCreateType getPaperContentCreateValue() {
        if (this._tag == Tag.PAPER_CONTENT_CREATE) {
            return this.paperContentCreateValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_CREATE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentPermanentlyDelete() {
        return this._tag == Tag.PAPER_CONTENT_PERMANENTLY_DELETE;
    }

    public static EventType paperContentPermanentlyDelete(PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteType) {
        if (paperContentPermanentlyDeleteType != null) {
            return new EventType().withTagAndPaperContentPermanentlyDelete(Tag.PAPER_CONTENT_PERMANENTLY_DELETE, paperContentPermanentlyDeleteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentPermanentlyDeleteType getPaperContentPermanentlyDeleteValue() {
        if (this._tag == Tag.PAPER_CONTENT_PERMANENTLY_DELETE) {
            return this.paperContentPermanentlyDeleteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_PERMANENTLY_DELETE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentRemoveFromFolder() {
        return this._tag == Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER;
    }

    public static EventType paperContentRemoveFromFolder(PaperContentRemoveFromFolderType paperContentRemoveFromFolderType) {
        if (paperContentRemoveFromFolderType != null) {
            return new EventType().withTagAndPaperContentRemoveFromFolder(Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER, paperContentRemoveFromFolderType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentRemoveFromFolderType getPaperContentRemoveFromFolderValue() {
        if (this._tag == Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER) {
            return this.paperContentRemoveFromFolderValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentRemoveMember() {
        return this._tag == Tag.PAPER_CONTENT_REMOVE_MEMBER;
    }

    public static EventType paperContentRemoveMember(PaperContentRemoveMemberType paperContentRemoveMemberType) {
        if (paperContentRemoveMemberType != null) {
            return new EventType().withTagAndPaperContentRemoveMember(Tag.PAPER_CONTENT_REMOVE_MEMBER, paperContentRemoveMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentRemoveMemberType getPaperContentRemoveMemberValue() {
        if (this._tag == Tag.PAPER_CONTENT_REMOVE_MEMBER) {
            return this.paperContentRemoveMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_REMOVE_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentRename() {
        return this._tag == Tag.PAPER_CONTENT_RENAME;
    }

    public static EventType paperContentRename(PaperContentRenameType paperContentRenameType) {
        if (paperContentRenameType != null) {
            return new EventType().withTagAndPaperContentRename(Tag.PAPER_CONTENT_RENAME, paperContentRenameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentRenameType getPaperContentRenameValue() {
        if (this._tag == Tag.PAPER_CONTENT_RENAME) {
            return this.paperContentRenameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_RENAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperContentRestore() {
        return this._tag == Tag.PAPER_CONTENT_RESTORE;
    }

    public static EventType paperContentRestore(PaperContentRestoreType paperContentRestoreType) {
        if (paperContentRestoreType != null) {
            return new EventType().withTagAndPaperContentRestore(Tag.PAPER_CONTENT_RESTORE, paperContentRestoreType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperContentRestoreType getPaperContentRestoreValue() {
        if (this._tag == Tag.PAPER_CONTENT_RESTORE) {
            return this.paperContentRestoreValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CONTENT_RESTORE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocAddComment() {
        return this._tag == Tag.PAPER_DOC_ADD_COMMENT;
    }

    public static EventType paperDocAddComment(PaperDocAddCommentType paperDocAddCommentType) {
        if (paperDocAddCommentType != null) {
            return new EventType().withTagAndPaperDocAddComment(Tag.PAPER_DOC_ADD_COMMENT, paperDocAddCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocAddCommentType getPaperDocAddCommentValue() {
        if (this._tag == Tag.PAPER_DOC_ADD_COMMENT) {
            return this.paperDocAddCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_ADD_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocChangeMemberRole() {
        return this._tag == Tag.PAPER_DOC_CHANGE_MEMBER_ROLE;
    }

    public static EventType paperDocChangeMemberRole(PaperDocChangeMemberRoleType paperDocChangeMemberRoleType) {
        if (paperDocChangeMemberRoleType != null) {
            return new EventType().withTagAndPaperDocChangeMemberRole(Tag.PAPER_DOC_CHANGE_MEMBER_ROLE, paperDocChangeMemberRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocChangeMemberRoleType getPaperDocChangeMemberRoleValue() {
        if (this._tag == Tag.PAPER_DOC_CHANGE_MEMBER_ROLE) {
            return this.paperDocChangeMemberRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_CHANGE_MEMBER_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocChangeSharingPolicy() {
        return this._tag == Tag.PAPER_DOC_CHANGE_SHARING_POLICY;
    }

    public static EventType paperDocChangeSharingPolicy(PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyType) {
        if (paperDocChangeSharingPolicyType != null) {
            return new EventType().withTagAndPaperDocChangeSharingPolicy(Tag.PAPER_DOC_CHANGE_SHARING_POLICY, paperDocChangeSharingPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocChangeSharingPolicyType getPaperDocChangeSharingPolicyValue() {
        if (this._tag == Tag.PAPER_DOC_CHANGE_SHARING_POLICY) {
            return this.paperDocChangeSharingPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_CHANGE_SHARING_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocChangeSubscription() {
        return this._tag == Tag.PAPER_DOC_CHANGE_SUBSCRIPTION;
    }

    public static EventType paperDocChangeSubscription(PaperDocChangeSubscriptionType paperDocChangeSubscriptionType) {
        if (paperDocChangeSubscriptionType != null) {
            return new EventType().withTagAndPaperDocChangeSubscription(Tag.PAPER_DOC_CHANGE_SUBSCRIPTION, paperDocChangeSubscriptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocChangeSubscriptionType getPaperDocChangeSubscriptionValue() {
        if (this._tag == Tag.PAPER_DOC_CHANGE_SUBSCRIPTION) {
            return this.paperDocChangeSubscriptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_CHANGE_SUBSCRIPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocDeleted() {
        return this._tag == Tag.PAPER_DOC_DELETED;
    }

    public static EventType paperDocDeleted(PaperDocDeletedType paperDocDeletedType) {
        if (paperDocDeletedType != null) {
            return new EventType().withTagAndPaperDocDeleted(Tag.PAPER_DOC_DELETED, paperDocDeletedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocDeletedType getPaperDocDeletedValue() {
        if (this._tag == Tag.PAPER_DOC_DELETED) {
            return this.paperDocDeletedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_DELETED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocDeleteComment() {
        return this._tag == Tag.PAPER_DOC_DELETE_COMMENT;
    }

    public static EventType paperDocDeleteComment(PaperDocDeleteCommentType paperDocDeleteCommentType) {
        if (paperDocDeleteCommentType != null) {
            return new EventType().withTagAndPaperDocDeleteComment(Tag.PAPER_DOC_DELETE_COMMENT, paperDocDeleteCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocDeleteCommentType getPaperDocDeleteCommentValue() {
        if (this._tag == Tag.PAPER_DOC_DELETE_COMMENT) {
            return this.paperDocDeleteCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_DELETE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocDownload() {
        return this._tag == Tag.PAPER_DOC_DOWNLOAD;
    }

    public static EventType paperDocDownload(PaperDocDownloadType paperDocDownloadType) {
        if (paperDocDownloadType != null) {
            return new EventType().withTagAndPaperDocDownload(Tag.PAPER_DOC_DOWNLOAD, paperDocDownloadType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocDownloadType getPaperDocDownloadValue() {
        if (this._tag == Tag.PAPER_DOC_DOWNLOAD) {
            return this.paperDocDownloadValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_DOWNLOAD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocEdit() {
        return this._tag == Tag.PAPER_DOC_EDIT;
    }

    public static EventType paperDocEdit(PaperDocEditType paperDocEditType) {
        if (paperDocEditType != null) {
            return new EventType().withTagAndPaperDocEdit(Tag.PAPER_DOC_EDIT, paperDocEditType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocEditType getPaperDocEditValue() {
        if (this._tag == Tag.PAPER_DOC_EDIT) {
            return this.paperDocEditValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_EDIT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocEditComment() {
        return this._tag == Tag.PAPER_DOC_EDIT_COMMENT;
    }

    public static EventType paperDocEditComment(PaperDocEditCommentType paperDocEditCommentType) {
        if (paperDocEditCommentType != null) {
            return new EventType().withTagAndPaperDocEditComment(Tag.PAPER_DOC_EDIT_COMMENT, paperDocEditCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocEditCommentType getPaperDocEditCommentValue() {
        if (this._tag == Tag.PAPER_DOC_EDIT_COMMENT) {
            return this.paperDocEditCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_EDIT_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocFollowed() {
        return this._tag == Tag.PAPER_DOC_FOLLOWED;
    }

    public static EventType paperDocFollowed(PaperDocFollowedType paperDocFollowedType) {
        if (paperDocFollowedType != null) {
            return new EventType().withTagAndPaperDocFollowed(Tag.PAPER_DOC_FOLLOWED, paperDocFollowedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocFollowedType getPaperDocFollowedValue() {
        if (this._tag == Tag.PAPER_DOC_FOLLOWED) {
            return this.paperDocFollowedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_FOLLOWED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocMention() {
        return this._tag == Tag.PAPER_DOC_MENTION;
    }

    public static EventType paperDocMention(PaperDocMentionType paperDocMentionType) {
        if (paperDocMentionType != null) {
            return new EventType().withTagAndPaperDocMention(Tag.PAPER_DOC_MENTION, paperDocMentionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocMentionType getPaperDocMentionValue() {
        if (this._tag == Tag.PAPER_DOC_MENTION) {
            return this.paperDocMentionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_MENTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocOwnershipChanged() {
        return this._tag == Tag.PAPER_DOC_OWNERSHIP_CHANGED;
    }

    public static EventType paperDocOwnershipChanged(PaperDocOwnershipChangedType paperDocOwnershipChangedType) {
        if (paperDocOwnershipChangedType != null) {
            return new EventType().withTagAndPaperDocOwnershipChanged(Tag.PAPER_DOC_OWNERSHIP_CHANGED, paperDocOwnershipChangedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocOwnershipChangedType getPaperDocOwnershipChangedValue() {
        if (this._tag == Tag.PAPER_DOC_OWNERSHIP_CHANGED) {
            return this.paperDocOwnershipChangedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_OWNERSHIP_CHANGED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocRequestAccess() {
        return this._tag == Tag.PAPER_DOC_REQUEST_ACCESS;
    }

    public static EventType paperDocRequestAccess(PaperDocRequestAccessType paperDocRequestAccessType) {
        if (paperDocRequestAccessType != null) {
            return new EventType().withTagAndPaperDocRequestAccess(Tag.PAPER_DOC_REQUEST_ACCESS, paperDocRequestAccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocRequestAccessType getPaperDocRequestAccessValue() {
        if (this._tag == Tag.PAPER_DOC_REQUEST_ACCESS) {
            return this.paperDocRequestAccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_REQUEST_ACCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocResolveComment() {
        return this._tag == Tag.PAPER_DOC_RESOLVE_COMMENT;
    }

    public static EventType paperDocResolveComment(PaperDocResolveCommentType paperDocResolveCommentType) {
        if (paperDocResolveCommentType != null) {
            return new EventType().withTagAndPaperDocResolveComment(Tag.PAPER_DOC_RESOLVE_COMMENT, paperDocResolveCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocResolveCommentType getPaperDocResolveCommentValue() {
        if (this._tag == Tag.PAPER_DOC_RESOLVE_COMMENT) {
            return this.paperDocResolveCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_RESOLVE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocRevert() {
        return this._tag == Tag.PAPER_DOC_REVERT;
    }

    public static EventType paperDocRevert(PaperDocRevertType paperDocRevertType) {
        if (paperDocRevertType != null) {
            return new EventType().withTagAndPaperDocRevert(Tag.PAPER_DOC_REVERT, paperDocRevertType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocRevertType getPaperDocRevertValue() {
        if (this._tag == Tag.PAPER_DOC_REVERT) {
            return this.paperDocRevertValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_REVERT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocSlackShare() {
        return this._tag == Tag.PAPER_DOC_SLACK_SHARE;
    }

    public static EventType paperDocSlackShare(PaperDocSlackShareType paperDocSlackShareType) {
        if (paperDocSlackShareType != null) {
            return new EventType().withTagAndPaperDocSlackShare(Tag.PAPER_DOC_SLACK_SHARE, paperDocSlackShareType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocSlackShareType getPaperDocSlackShareValue() {
        if (this._tag == Tag.PAPER_DOC_SLACK_SHARE) {
            return this.paperDocSlackShareValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_SLACK_SHARE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocTeamInvite() {
        return this._tag == Tag.PAPER_DOC_TEAM_INVITE;
    }

    public static EventType paperDocTeamInvite(PaperDocTeamInviteType paperDocTeamInviteType) {
        if (paperDocTeamInviteType != null) {
            return new EventType().withTagAndPaperDocTeamInvite(Tag.PAPER_DOC_TEAM_INVITE, paperDocTeamInviteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocTeamInviteType getPaperDocTeamInviteValue() {
        if (this._tag == Tag.PAPER_DOC_TEAM_INVITE) {
            return this.paperDocTeamInviteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_TEAM_INVITE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocTrashed() {
        return this._tag == Tag.PAPER_DOC_TRASHED;
    }

    public static EventType paperDocTrashed(PaperDocTrashedType paperDocTrashedType) {
        if (paperDocTrashedType != null) {
            return new EventType().withTagAndPaperDocTrashed(Tag.PAPER_DOC_TRASHED, paperDocTrashedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocTrashedType getPaperDocTrashedValue() {
        if (this._tag == Tag.PAPER_DOC_TRASHED) {
            return this.paperDocTrashedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_TRASHED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocUnresolveComment() {
        return this._tag == Tag.PAPER_DOC_UNRESOLVE_COMMENT;
    }

    public static EventType paperDocUnresolveComment(PaperDocUnresolveCommentType paperDocUnresolveCommentType) {
        if (paperDocUnresolveCommentType != null) {
            return new EventType().withTagAndPaperDocUnresolveComment(Tag.PAPER_DOC_UNRESOLVE_COMMENT, paperDocUnresolveCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocUnresolveCommentType getPaperDocUnresolveCommentValue() {
        if (this._tag == Tag.PAPER_DOC_UNRESOLVE_COMMENT) {
            return this.paperDocUnresolveCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_UNRESOLVE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocUntrashed() {
        return this._tag == Tag.PAPER_DOC_UNTRASHED;
    }

    public static EventType paperDocUntrashed(PaperDocUntrashedType paperDocUntrashedType) {
        if (paperDocUntrashedType != null) {
            return new EventType().withTagAndPaperDocUntrashed(Tag.PAPER_DOC_UNTRASHED, paperDocUntrashedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocUntrashedType getPaperDocUntrashedValue() {
        if (this._tag == Tag.PAPER_DOC_UNTRASHED) {
            return this.paperDocUntrashedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_UNTRASHED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperDocView() {
        return this._tag == Tag.PAPER_DOC_VIEW;
    }

    public static EventType paperDocView(PaperDocViewType paperDocViewType) {
        if (paperDocViewType != null) {
            return new EventType().withTagAndPaperDocView(Tag.PAPER_DOC_VIEW, paperDocViewType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperDocViewType getPaperDocViewValue() {
        if (this._tag == Tag.PAPER_DOC_VIEW) {
            return this.paperDocViewValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_DOC_VIEW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperExternalViewAllow() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_ALLOW;
    }

    public static EventType paperExternalViewAllow(PaperExternalViewAllowType paperExternalViewAllowType) {
        if (paperExternalViewAllowType != null) {
            return new EventType().withTagAndPaperExternalViewAllow(Tag.PAPER_EXTERNAL_VIEW_ALLOW, paperExternalViewAllowType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperExternalViewAllowType getPaperExternalViewAllowValue() {
        if (this._tag == Tag.PAPER_EXTERNAL_VIEW_ALLOW) {
            return this.paperExternalViewAllowValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_ALLOW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperExternalViewDefaultTeam() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM;
    }

    public static EventType paperExternalViewDefaultTeam(PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamType) {
        if (paperExternalViewDefaultTeamType != null) {
            return new EventType().withTagAndPaperExternalViewDefaultTeam(Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM, paperExternalViewDefaultTeamType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperExternalViewDefaultTeamType getPaperExternalViewDefaultTeamValue() {
        if (this._tag == Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM) {
            return this.paperExternalViewDefaultTeamValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperExternalViewForbid() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_FORBID;
    }

    public static EventType paperExternalViewForbid(PaperExternalViewForbidType paperExternalViewForbidType) {
        if (paperExternalViewForbidType != null) {
            return new EventType().withTagAndPaperExternalViewForbid(Tag.PAPER_EXTERNAL_VIEW_FORBID, paperExternalViewForbidType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperExternalViewForbidType getPaperExternalViewForbidValue() {
        if (this._tag == Tag.PAPER_EXTERNAL_VIEW_FORBID) {
            return this.paperExternalViewForbidValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_FORBID, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperFolderChangeSubscription() {
        return this._tag == Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION;
    }

    public static EventType paperFolderChangeSubscription(PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionType) {
        if (paperFolderChangeSubscriptionType != null) {
            return new EventType().withTagAndPaperFolderChangeSubscription(Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION, paperFolderChangeSubscriptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperFolderChangeSubscriptionType getPaperFolderChangeSubscriptionValue() {
        if (this._tag == Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION) {
            return this.paperFolderChangeSubscriptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperFolderDeleted() {
        return this._tag == Tag.PAPER_FOLDER_DELETED;
    }

    public static EventType paperFolderDeleted(PaperFolderDeletedType paperFolderDeletedType) {
        if (paperFolderDeletedType != null) {
            return new EventType().withTagAndPaperFolderDeleted(Tag.PAPER_FOLDER_DELETED, paperFolderDeletedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperFolderDeletedType getPaperFolderDeletedValue() {
        if (this._tag == Tag.PAPER_FOLDER_DELETED) {
            return this.paperFolderDeletedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_FOLDER_DELETED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperFolderFollowed() {
        return this._tag == Tag.PAPER_FOLDER_FOLLOWED;
    }

    public static EventType paperFolderFollowed(PaperFolderFollowedType paperFolderFollowedType) {
        if (paperFolderFollowedType != null) {
            return new EventType().withTagAndPaperFolderFollowed(Tag.PAPER_FOLDER_FOLLOWED, paperFolderFollowedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperFolderFollowedType getPaperFolderFollowedValue() {
        if (this._tag == Tag.PAPER_FOLDER_FOLLOWED) {
            return this.paperFolderFollowedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_FOLDER_FOLLOWED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperFolderTeamInvite() {
        return this._tag == Tag.PAPER_FOLDER_TEAM_INVITE;
    }

    public static EventType paperFolderTeamInvite(PaperFolderTeamInviteType paperFolderTeamInviteType) {
        if (paperFolderTeamInviteType != null) {
            return new EventType().withTagAndPaperFolderTeamInvite(Tag.PAPER_FOLDER_TEAM_INVITE, paperFolderTeamInviteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperFolderTeamInviteType getPaperFolderTeamInviteValue() {
        if (this._tag == Tag.PAPER_FOLDER_TEAM_INVITE) {
            return this.paperFolderTeamInviteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_FOLDER_TEAM_INVITE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPasswordChange() {
        return this._tag == Tag.PASSWORD_CHANGE;
    }

    public static EventType passwordChange(PasswordChangeType passwordChangeType) {
        if (passwordChangeType != null) {
            return new EventType().withTagAndPasswordChange(Tag.PASSWORD_CHANGE, passwordChangeType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PasswordChangeType getPasswordChangeValue() {
        if (this._tag == Tag.PASSWORD_CHANGE) {
            return this.passwordChangeValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PASSWORD_CHANGE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPasswordReset() {
        return this._tag == Tag.PASSWORD_RESET;
    }

    public static EventType passwordReset(PasswordResetType passwordResetType) {
        if (passwordResetType != null) {
            return new EventType().withTagAndPasswordReset(Tag.PASSWORD_RESET, passwordResetType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PasswordResetType getPasswordResetValue() {
        if (this._tag == Tag.PASSWORD_RESET) {
            return this.passwordResetValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PASSWORD_RESET, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPasswordResetAll() {
        return this._tag == Tag.PASSWORD_RESET_ALL;
    }

    public static EventType passwordResetAll(PasswordResetAllType passwordResetAllType) {
        if (passwordResetAllType != null) {
            return new EventType().withTagAndPasswordResetAll(Tag.PASSWORD_RESET_ALL, passwordResetAllType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PasswordResetAllType getPasswordResetAllValue() {
        if (this._tag == Tag.PASSWORD_RESET_ALL) {
            return this.passwordResetAllValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PASSWORD_RESET_ALL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmCreateExceptionsReport() {
        return this._tag == Tag.EMM_CREATE_EXCEPTIONS_REPORT;
    }

    public static EventType emmCreateExceptionsReport(EmmCreateExceptionsReportType emmCreateExceptionsReportType) {
        if (emmCreateExceptionsReportType != null) {
            return new EventType().withTagAndEmmCreateExceptionsReport(Tag.EMM_CREATE_EXCEPTIONS_REPORT, emmCreateExceptionsReportType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmCreateExceptionsReportType getEmmCreateExceptionsReportValue() {
        if (this._tag == Tag.EMM_CREATE_EXCEPTIONS_REPORT) {
            return this.emmCreateExceptionsReportValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_CREATE_EXCEPTIONS_REPORT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmCreateUsageReport() {
        return this._tag == Tag.EMM_CREATE_USAGE_REPORT;
    }

    public static EventType emmCreateUsageReport(EmmCreateUsageReportType emmCreateUsageReportType) {
        if (emmCreateUsageReportType != null) {
            return new EventType().withTagAndEmmCreateUsageReport(Tag.EMM_CREATE_USAGE_REPORT, emmCreateUsageReportType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmCreateUsageReportType getEmmCreateUsageReportValue() {
        if (this._tag == Tag.EMM_CREATE_USAGE_REPORT) {
            return this.emmCreateUsageReportValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_CREATE_USAGE_REPORT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isExportMembersReport() {
        return this._tag == Tag.EXPORT_MEMBERS_REPORT;
    }

    public static EventType exportMembersReport(ExportMembersReportType exportMembersReportType) {
        if (exportMembersReportType != null) {
            return new EventType().withTagAndExportMembersReport(Tag.EXPORT_MEMBERS_REPORT, exportMembersReportType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ExportMembersReportType getExportMembersReportValue() {
        if (this._tag == Tag.EXPORT_MEMBERS_REPORT) {
            return this.exportMembersReportValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EXPORT_MEMBERS_REPORT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperAdminExportStart() {
        return this._tag == Tag.PAPER_ADMIN_EXPORT_START;
    }

    public static EventType paperAdminExportStart(PaperAdminExportStartType paperAdminExportStartType) {
        if (paperAdminExportStartType != null) {
            return new EventType().withTagAndPaperAdminExportStart(Tag.PAPER_ADMIN_EXPORT_START, paperAdminExportStartType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperAdminExportStartType getPaperAdminExportStartValue() {
        if (this._tag == Tag.PAPER_ADMIN_EXPORT_START) {
            return this.paperAdminExportStartValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_ADMIN_EXPORT_START, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSmartSyncCreateAdminPrivilegeReport() {
        return this._tag == Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT;
    }

    public static EventType smartSyncCreateAdminPrivilegeReport(SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportType) {
        if (smartSyncCreateAdminPrivilegeReportType != null) {
            return new EventType().withTagAndSmartSyncCreateAdminPrivilegeReport(Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT, smartSyncCreateAdminPrivilegeReportType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SmartSyncCreateAdminPrivilegeReportType getSmartSyncCreateAdminPrivilegeReportValue() {
        if (this._tag == Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT) {
            return this.smartSyncCreateAdminPrivilegeReportValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamActivityCreateReport() {
        return this._tag == Tag.TEAM_ACTIVITY_CREATE_REPORT;
    }

    public static EventType teamActivityCreateReport(TeamActivityCreateReportType teamActivityCreateReportType) {
        if (teamActivityCreateReportType != null) {
            return new EventType().withTagAndTeamActivityCreateReport(Tag.TEAM_ACTIVITY_CREATE_REPORT, teamActivityCreateReportType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamActivityCreateReportType getTeamActivityCreateReportValue() {
        if (this._tag == Tag.TEAM_ACTIVITY_CREATE_REPORT) {
            return this.teamActivityCreateReportValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_ACTIVITY_CREATE_REPORT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isCollectionShare() {
        return this._tag == Tag.COLLECTION_SHARE;
    }

    public static EventType collectionShare(CollectionShareType collectionShareType) {
        if (collectionShareType != null) {
            return new EventType().withTagAndCollectionShare(Tag.COLLECTION_SHARE, collectionShareType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public CollectionShareType getCollectionShareValue() {
        if (this._tag == Tag.COLLECTION_SHARE) {
            return this.collectionShareValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.COLLECTION_SHARE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isNoteAclInviteOnly() {
        return this._tag == Tag.NOTE_ACL_INVITE_ONLY;
    }

    public static EventType noteAclInviteOnly(NoteAclInviteOnlyType noteAclInviteOnlyType) {
        if (noteAclInviteOnlyType != null) {
            return new EventType().withTagAndNoteAclInviteOnly(Tag.NOTE_ACL_INVITE_ONLY, noteAclInviteOnlyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public NoteAclInviteOnlyType getNoteAclInviteOnlyValue() {
        if (this._tag == Tag.NOTE_ACL_INVITE_ONLY) {
            return this.noteAclInviteOnlyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.NOTE_ACL_INVITE_ONLY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isNoteAclLink() {
        return this._tag == Tag.NOTE_ACL_LINK;
    }

    public static EventType noteAclLink(NoteAclLinkType noteAclLinkType) {
        if (noteAclLinkType != null) {
            return new EventType().withTagAndNoteAclLink(Tag.NOTE_ACL_LINK, noteAclLinkType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public NoteAclLinkType getNoteAclLinkValue() {
        if (this._tag == Tag.NOTE_ACL_LINK) {
            return this.noteAclLinkValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.NOTE_ACL_LINK, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isNoteAclTeamLink() {
        return this._tag == Tag.NOTE_ACL_TEAM_LINK;
    }

    public static EventType noteAclTeamLink(NoteAclTeamLinkType noteAclTeamLinkType) {
        if (noteAclTeamLinkType != null) {
            return new EventType().withTagAndNoteAclTeamLink(Tag.NOTE_ACL_TEAM_LINK, noteAclTeamLinkType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public NoteAclTeamLinkType getNoteAclTeamLinkValue() {
        if (this._tag == Tag.NOTE_ACL_TEAM_LINK) {
            return this.noteAclTeamLinkValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.NOTE_ACL_TEAM_LINK, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isNoteShared() {
        return this._tag == Tag.NOTE_SHARED;
    }

    public static EventType noteShared(NoteSharedType noteSharedType) {
        if (noteSharedType != null) {
            return new EventType().withTagAndNoteShared(Tag.NOTE_SHARED, noteSharedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public NoteSharedType getNoteSharedValue() {
        if (this._tag == Tag.NOTE_SHARED) {
            return this.noteSharedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.NOTE_SHARED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isNoteShareReceive() {
        return this._tag == Tag.NOTE_SHARE_RECEIVE;
    }

    public static EventType noteShareReceive(NoteShareReceiveType noteShareReceiveType) {
        if (noteShareReceiveType != null) {
            return new EventType().withTagAndNoteShareReceive(Tag.NOTE_SHARE_RECEIVE, noteShareReceiveType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public NoteShareReceiveType getNoteShareReceiveValue() {
        if (this._tag == Tag.NOTE_SHARE_RECEIVE) {
            return this.noteShareReceiveValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.NOTE_SHARE_RECEIVE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isOpenNoteShared() {
        return this._tag == Tag.OPEN_NOTE_SHARED;
    }

    public static EventType openNoteShared(OpenNoteSharedType openNoteSharedType) {
        if (openNoteSharedType != null) {
            return new EventType().withTagAndOpenNoteShared(Tag.OPEN_NOTE_SHARED, openNoteSharedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public OpenNoteSharedType getOpenNoteSharedValue() {
        if (this._tag == Tag.OPEN_NOTE_SHARED) {
            return this.openNoteSharedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.OPEN_NOTE_SHARED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfAddGroup() {
        return this._tag == Tag.SF_ADD_GROUP;
    }

    public static EventType sfAddGroup(SfAddGroupType sfAddGroupType) {
        if (sfAddGroupType != null) {
            return new EventType().withTagAndSfAddGroup(Tag.SF_ADD_GROUP, sfAddGroupType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfAddGroupType getSfAddGroupValue() {
        if (this._tag == Tag.SF_ADD_GROUP) {
            return this.sfAddGroupValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_ADD_GROUP, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfAllowNonMembersToViewSharedLinks() {
        return this._tag == Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS;
    }

    public static EventType sfAllowNonMembersToViewSharedLinks(SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksType) {
        if (sfAllowNonMembersToViewSharedLinksType != null) {
            return new EventType().withTagAndSfAllowNonMembersToViewSharedLinks(Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS, sfAllowNonMembersToViewSharedLinksType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfAllowNonMembersToViewSharedLinksType getSfAllowNonMembersToViewSharedLinksValue() {
        if (this._tag == Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS) {
            return this.sfAllowNonMembersToViewSharedLinksValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfExternalInviteWarn() {
        return this._tag == Tag.SF_EXTERNAL_INVITE_WARN;
    }

    public static EventType sfExternalInviteWarn(SfExternalInviteWarnType sfExternalInviteWarnType) {
        if (sfExternalInviteWarnType != null) {
            return new EventType().withTagAndSfExternalInviteWarn(Tag.SF_EXTERNAL_INVITE_WARN, sfExternalInviteWarnType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfExternalInviteWarnType getSfExternalInviteWarnValue() {
        if (this._tag == Tag.SF_EXTERNAL_INVITE_WARN) {
            return this.sfExternalInviteWarnValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_EXTERNAL_INVITE_WARN, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfFbInvite() {
        return this._tag == Tag.SF_FB_INVITE;
    }

    public static EventType sfFbInvite(SfFbInviteType sfFbInviteType) {
        if (sfFbInviteType != null) {
            return new EventType().withTagAndSfFbInvite(Tag.SF_FB_INVITE, sfFbInviteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfFbInviteType getSfFbInviteValue() {
        if (this._tag == Tag.SF_FB_INVITE) {
            return this.sfFbInviteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_FB_INVITE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfFbInviteChangeRole() {
        return this._tag == Tag.SF_FB_INVITE_CHANGE_ROLE;
    }

    public static EventType sfFbInviteChangeRole(SfFbInviteChangeRoleType sfFbInviteChangeRoleType) {
        if (sfFbInviteChangeRoleType != null) {
            return new EventType().withTagAndSfFbInviteChangeRole(Tag.SF_FB_INVITE_CHANGE_ROLE, sfFbInviteChangeRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfFbInviteChangeRoleType getSfFbInviteChangeRoleValue() {
        if (this._tag == Tag.SF_FB_INVITE_CHANGE_ROLE) {
            return this.sfFbInviteChangeRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_FB_INVITE_CHANGE_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfFbUninvite() {
        return this._tag == Tag.SF_FB_UNINVITE;
    }

    public static EventType sfFbUninvite(SfFbUninviteType sfFbUninviteType) {
        if (sfFbUninviteType != null) {
            return new EventType().withTagAndSfFbUninvite(Tag.SF_FB_UNINVITE, sfFbUninviteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfFbUninviteType getSfFbUninviteValue() {
        if (this._tag == Tag.SF_FB_UNINVITE) {
            return this.sfFbUninviteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_FB_UNINVITE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfInviteGroup() {
        return this._tag == Tag.SF_INVITE_GROUP;
    }

    public static EventType sfInviteGroup(SfInviteGroupType sfInviteGroupType) {
        if (sfInviteGroupType != null) {
            return new EventType().withTagAndSfInviteGroup(Tag.SF_INVITE_GROUP, sfInviteGroupType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfInviteGroupType getSfInviteGroupValue() {
        if (this._tag == Tag.SF_INVITE_GROUP) {
            return this.sfInviteGroupValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_INVITE_GROUP, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfTeamGrantAccess() {
        return this._tag == Tag.SF_TEAM_GRANT_ACCESS;
    }

    public static EventType sfTeamGrantAccess(SfTeamGrantAccessType sfTeamGrantAccessType) {
        if (sfTeamGrantAccessType != null) {
            return new EventType().withTagAndSfTeamGrantAccess(Tag.SF_TEAM_GRANT_ACCESS, sfTeamGrantAccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfTeamGrantAccessType getSfTeamGrantAccessValue() {
        if (this._tag == Tag.SF_TEAM_GRANT_ACCESS) {
            return this.sfTeamGrantAccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_TEAM_GRANT_ACCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfTeamInvite() {
        return this._tag == Tag.SF_TEAM_INVITE;
    }

    public static EventType sfTeamInvite(SfTeamInviteType sfTeamInviteType) {
        if (sfTeamInviteType != null) {
            return new EventType().withTagAndSfTeamInvite(Tag.SF_TEAM_INVITE, sfTeamInviteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfTeamInviteType getSfTeamInviteValue() {
        if (this._tag == Tag.SF_TEAM_INVITE) {
            return this.sfTeamInviteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_TEAM_INVITE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfTeamInviteChangeRole() {
        return this._tag == Tag.SF_TEAM_INVITE_CHANGE_ROLE;
    }

    public static EventType sfTeamInviteChangeRole(SfTeamInviteChangeRoleType sfTeamInviteChangeRoleType) {
        if (sfTeamInviteChangeRoleType != null) {
            return new EventType().withTagAndSfTeamInviteChangeRole(Tag.SF_TEAM_INVITE_CHANGE_ROLE, sfTeamInviteChangeRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfTeamInviteChangeRoleType getSfTeamInviteChangeRoleValue() {
        if (this._tag == Tag.SF_TEAM_INVITE_CHANGE_ROLE) {
            return this.sfTeamInviteChangeRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_TEAM_INVITE_CHANGE_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfTeamJoin() {
        return this._tag == Tag.SF_TEAM_JOIN;
    }

    public static EventType sfTeamJoin(SfTeamJoinType sfTeamJoinType) {
        if (sfTeamJoinType != null) {
            return new EventType().withTagAndSfTeamJoin(Tag.SF_TEAM_JOIN, sfTeamJoinType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfTeamJoinType getSfTeamJoinValue() {
        if (this._tag == Tag.SF_TEAM_JOIN) {
            return this.sfTeamJoinValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_TEAM_JOIN, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfTeamJoinFromOobLink() {
        return this._tag == Tag.SF_TEAM_JOIN_FROM_OOB_LINK;
    }

    public static EventType sfTeamJoinFromOobLink(SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkType) {
        if (sfTeamJoinFromOobLinkType != null) {
            return new EventType().withTagAndSfTeamJoinFromOobLink(Tag.SF_TEAM_JOIN_FROM_OOB_LINK, sfTeamJoinFromOobLinkType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfTeamJoinFromOobLinkType getSfTeamJoinFromOobLinkValue() {
        if (this._tag == Tag.SF_TEAM_JOIN_FROM_OOB_LINK) {
            return this.sfTeamJoinFromOobLinkValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_TEAM_JOIN_FROM_OOB_LINK, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSfTeamUninvite() {
        return this._tag == Tag.SF_TEAM_UNINVITE;
    }

    public static EventType sfTeamUninvite(SfTeamUninviteType sfTeamUninviteType) {
        if (sfTeamUninviteType != null) {
            return new EventType().withTagAndSfTeamUninvite(Tag.SF_TEAM_UNINVITE, sfTeamUninviteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SfTeamUninviteType getSfTeamUninviteValue() {
        if (this._tag == Tag.SF_TEAM_UNINVITE) {
            return this.sfTeamUninviteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SF_TEAM_UNINVITE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentAddInvitees() {
        return this._tag == Tag.SHARED_CONTENT_ADD_INVITEES;
    }

    public static EventType sharedContentAddInvitees(SharedContentAddInviteesType sharedContentAddInviteesType) {
        if (sharedContentAddInviteesType != null) {
            return new EventType().withTagAndSharedContentAddInvitees(Tag.SHARED_CONTENT_ADD_INVITEES, sharedContentAddInviteesType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentAddInviteesType getSharedContentAddInviteesValue() {
        if (this._tag == Tag.SHARED_CONTENT_ADD_INVITEES) {
            return this.sharedContentAddInviteesValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_ADD_INVITEES, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentAddLinkExpiry() {
        return this._tag == Tag.SHARED_CONTENT_ADD_LINK_EXPIRY;
    }

    public static EventType sharedContentAddLinkExpiry(SharedContentAddLinkExpiryType sharedContentAddLinkExpiryType) {
        if (sharedContentAddLinkExpiryType != null) {
            return new EventType().withTagAndSharedContentAddLinkExpiry(Tag.SHARED_CONTENT_ADD_LINK_EXPIRY, sharedContentAddLinkExpiryType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentAddLinkExpiryType getSharedContentAddLinkExpiryValue() {
        if (this._tag == Tag.SHARED_CONTENT_ADD_LINK_EXPIRY) {
            return this.sharedContentAddLinkExpiryValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_ADD_LINK_EXPIRY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentAddLinkPassword() {
        return this._tag == Tag.SHARED_CONTENT_ADD_LINK_PASSWORD;
    }

    public static EventType sharedContentAddLinkPassword(SharedContentAddLinkPasswordType sharedContentAddLinkPasswordType) {
        if (sharedContentAddLinkPasswordType != null) {
            return new EventType().withTagAndSharedContentAddLinkPassword(Tag.SHARED_CONTENT_ADD_LINK_PASSWORD, sharedContentAddLinkPasswordType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentAddLinkPasswordType getSharedContentAddLinkPasswordValue() {
        if (this._tag == Tag.SHARED_CONTENT_ADD_LINK_PASSWORD) {
            return this.sharedContentAddLinkPasswordValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_ADD_LINK_PASSWORD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentAddMember() {
        return this._tag == Tag.SHARED_CONTENT_ADD_MEMBER;
    }

    public static EventType sharedContentAddMember(SharedContentAddMemberType sharedContentAddMemberType) {
        if (sharedContentAddMemberType != null) {
            return new EventType().withTagAndSharedContentAddMember(Tag.SHARED_CONTENT_ADD_MEMBER, sharedContentAddMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentAddMemberType getSharedContentAddMemberValue() {
        if (this._tag == Tag.SHARED_CONTENT_ADD_MEMBER) {
            return this.sharedContentAddMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_ADD_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeDownloadsPolicy() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY;
    }

    public static EventType sharedContentChangeDownloadsPolicy(SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyType) {
        if (sharedContentChangeDownloadsPolicyType != null) {
            return new EventType().withTagAndSharedContentChangeDownloadsPolicy(Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY, sharedContentChangeDownloadsPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeDownloadsPolicyType getSharedContentChangeDownloadsPolicyValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY) {
            return this.sharedContentChangeDownloadsPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeInviteeRole() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE;
    }

    public static EventType sharedContentChangeInviteeRole(SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleType) {
        if (sharedContentChangeInviteeRoleType != null) {
            return new EventType().withTagAndSharedContentChangeInviteeRole(Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE, sharedContentChangeInviteeRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeInviteeRoleType getSharedContentChangeInviteeRoleValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE) {
            return this.sharedContentChangeInviteeRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeLinkAudience() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE;
    }

    public static EventType sharedContentChangeLinkAudience(SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceType) {
        if (sharedContentChangeLinkAudienceType != null) {
            return new EventType().withTagAndSharedContentChangeLinkAudience(Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE, sharedContentChangeLinkAudienceType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeLinkAudienceType getSharedContentChangeLinkAudienceValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE) {
            return this.sharedContentChangeLinkAudienceValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeLinkExpiry() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY;
    }

    public static EventType sharedContentChangeLinkExpiry(SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryType) {
        if (sharedContentChangeLinkExpiryType != null) {
            return new EventType().withTagAndSharedContentChangeLinkExpiry(Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY, sharedContentChangeLinkExpiryType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeLinkExpiryType getSharedContentChangeLinkExpiryValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY) {
            return this.sharedContentChangeLinkExpiryValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeLinkPassword() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD;
    }

    public static EventType sharedContentChangeLinkPassword(SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordType) {
        if (sharedContentChangeLinkPasswordType != null) {
            return new EventType().withTagAndSharedContentChangeLinkPassword(Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD, sharedContentChangeLinkPasswordType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeLinkPasswordType getSharedContentChangeLinkPasswordValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD) {
            return this.sharedContentChangeLinkPasswordValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeMemberRole() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE;
    }

    public static EventType sharedContentChangeMemberRole(SharedContentChangeMemberRoleType sharedContentChangeMemberRoleType) {
        if (sharedContentChangeMemberRoleType != null) {
            return new EventType().withTagAndSharedContentChangeMemberRole(Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE, sharedContentChangeMemberRoleType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeMemberRoleType getSharedContentChangeMemberRoleValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE) {
            return this.sharedContentChangeMemberRoleValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentChangeViewerInfoPolicy() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY;
    }

    public static EventType sharedContentChangeViewerInfoPolicy(SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyType) {
        if (sharedContentChangeViewerInfoPolicyType != null) {
            return new EventType().withTagAndSharedContentChangeViewerInfoPolicy(Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY, sharedContentChangeViewerInfoPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentChangeViewerInfoPolicyType getSharedContentChangeViewerInfoPolicyValue() {
        if (this._tag == Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY) {
            return this.sharedContentChangeViewerInfoPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentClaimInvitation() {
        return this._tag == Tag.SHARED_CONTENT_CLAIM_INVITATION;
    }

    public static EventType sharedContentClaimInvitation(SharedContentClaimInvitationType sharedContentClaimInvitationType) {
        if (sharedContentClaimInvitationType != null) {
            return new EventType().withTagAndSharedContentClaimInvitation(Tag.SHARED_CONTENT_CLAIM_INVITATION, sharedContentClaimInvitationType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentClaimInvitationType getSharedContentClaimInvitationValue() {
        if (this._tag == Tag.SHARED_CONTENT_CLAIM_INVITATION) {
            return this.sharedContentClaimInvitationValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_CLAIM_INVITATION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentCopy() {
        return this._tag == Tag.SHARED_CONTENT_COPY;
    }

    public static EventType sharedContentCopy(SharedContentCopyType sharedContentCopyType) {
        if (sharedContentCopyType != null) {
            return new EventType().withTagAndSharedContentCopy(Tag.SHARED_CONTENT_COPY, sharedContentCopyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentCopyType getSharedContentCopyValue() {
        if (this._tag == Tag.SHARED_CONTENT_COPY) {
            return this.sharedContentCopyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_COPY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentDownload() {
        return this._tag == Tag.SHARED_CONTENT_DOWNLOAD;
    }

    public static EventType sharedContentDownload(SharedContentDownloadType sharedContentDownloadType) {
        if (sharedContentDownloadType != null) {
            return new EventType().withTagAndSharedContentDownload(Tag.SHARED_CONTENT_DOWNLOAD, sharedContentDownloadType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentDownloadType getSharedContentDownloadValue() {
        if (this._tag == Tag.SHARED_CONTENT_DOWNLOAD) {
            return this.sharedContentDownloadValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_DOWNLOAD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentRelinquishMembership() {
        return this._tag == Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP;
    }

    public static EventType sharedContentRelinquishMembership(SharedContentRelinquishMembershipType sharedContentRelinquishMembershipType) {
        if (sharedContentRelinquishMembershipType != null) {
            return new EventType().withTagAndSharedContentRelinquishMembership(Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP, sharedContentRelinquishMembershipType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentRelinquishMembershipType getSharedContentRelinquishMembershipValue() {
        if (this._tag == Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP) {
            return this.sharedContentRelinquishMembershipValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentRemoveInvitees() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_INVITEES;
    }

    public static EventType sharedContentRemoveInvitees(SharedContentRemoveInviteesType sharedContentRemoveInviteesType) {
        if (sharedContentRemoveInviteesType != null) {
            return new EventType().withTagAndSharedContentRemoveInvitees(Tag.SHARED_CONTENT_REMOVE_INVITEES, sharedContentRemoveInviteesType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentRemoveInviteesType getSharedContentRemoveInviteesValue() {
        if (this._tag == Tag.SHARED_CONTENT_REMOVE_INVITEES) {
            return this.sharedContentRemoveInviteesValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_INVITEES, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentRemoveLinkExpiry() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY;
    }

    public static EventType sharedContentRemoveLinkExpiry(SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryType) {
        if (sharedContentRemoveLinkExpiryType != null) {
            return new EventType().withTagAndSharedContentRemoveLinkExpiry(Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY, sharedContentRemoveLinkExpiryType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentRemoveLinkExpiryType getSharedContentRemoveLinkExpiryValue() {
        if (this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY) {
            return this.sharedContentRemoveLinkExpiryValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentRemoveLinkPassword() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD;
    }

    public static EventType sharedContentRemoveLinkPassword(SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordType) {
        if (sharedContentRemoveLinkPasswordType != null) {
            return new EventType().withTagAndSharedContentRemoveLinkPassword(Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD, sharedContentRemoveLinkPasswordType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentRemoveLinkPasswordType getSharedContentRemoveLinkPasswordValue() {
        if (this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD) {
            return this.sharedContentRemoveLinkPasswordValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentRemoveMember() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_MEMBER;
    }

    public static EventType sharedContentRemoveMember(SharedContentRemoveMemberType sharedContentRemoveMemberType) {
        if (sharedContentRemoveMemberType != null) {
            return new EventType().withTagAndSharedContentRemoveMember(Tag.SHARED_CONTENT_REMOVE_MEMBER, sharedContentRemoveMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentRemoveMemberType getSharedContentRemoveMemberValue() {
        if (this._tag == Tag.SHARED_CONTENT_REMOVE_MEMBER) {
            return this.sharedContentRemoveMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentRequestAccess() {
        return this._tag == Tag.SHARED_CONTENT_REQUEST_ACCESS;
    }

    public static EventType sharedContentRequestAccess(SharedContentRequestAccessType sharedContentRequestAccessType) {
        if (sharedContentRequestAccessType != null) {
            return new EventType().withTagAndSharedContentRequestAccess(Tag.SHARED_CONTENT_REQUEST_ACCESS, sharedContentRequestAccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentRequestAccessType getSharedContentRequestAccessValue() {
        if (this._tag == Tag.SHARED_CONTENT_REQUEST_ACCESS) {
            return this.sharedContentRequestAccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_REQUEST_ACCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentUnshare() {
        return this._tag == Tag.SHARED_CONTENT_UNSHARE;
    }

    public static EventType sharedContentUnshare(SharedContentUnshareType sharedContentUnshareType) {
        if (sharedContentUnshareType != null) {
            return new EventType().withTagAndSharedContentUnshare(Tag.SHARED_CONTENT_UNSHARE, sharedContentUnshareType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentUnshareType getSharedContentUnshareValue() {
        if (this._tag == Tag.SHARED_CONTENT_UNSHARE) {
            return this.sharedContentUnshareValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_UNSHARE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedContentView() {
        return this._tag == Tag.SHARED_CONTENT_VIEW;
    }

    public static EventType sharedContentView(SharedContentViewType sharedContentViewType) {
        if (sharedContentViewType != null) {
            return new EventType().withTagAndSharedContentView(Tag.SHARED_CONTENT_VIEW, sharedContentViewType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedContentViewType getSharedContentViewValue() {
        if (this._tag == Tag.SHARED_CONTENT_VIEW) {
            return this.sharedContentViewValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_CONTENT_VIEW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderChangeLinkPolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_LINK_POLICY;
    }

    public static EventType sharedFolderChangeLinkPolicy(SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyType) {
        if (sharedFolderChangeLinkPolicyType != null) {
            return new EventType().withTagAndSharedFolderChangeLinkPolicy(Tag.SHARED_FOLDER_CHANGE_LINK_POLICY, sharedFolderChangeLinkPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderChangeLinkPolicyType getSharedFolderChangeLinkPolicyValue() {
        if (this._tag == Tag.SHARED_FOLDER_CHANGE_LINK_POLICY) {
            return this.sharedFolderChangeLinkPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_LINK_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderChangeMembersInheritancePolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY;
    }

    public static EventType sharedFolderChangeMembersInheritancePolicy(SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyType) {
        if (sharedFolderChangeMembersInheritancePolicyType != null) {
            return new EventType().withTagAndSharedFolderChangeMembersInheritancePolicy(Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY, sharedFolderChangeMembersInheritancePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderChangeMembersInheritancePolicyType getSharedFolderChangeMembersInheritancePolicyValue() {
        if (this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY) {
            return this.sharedFolderChangeMembersInheritancePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderChangeMembersManagementPolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY;
    }

    public static EventType sharedFolderChangeMembersManagementPolicy(SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyType) {
        if (sharedFolderChangeMembersManagementPolicyType != null) {
            return new EventType().withTagAndSharedFolderChangeMembersManagementPolicy(Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY, sharedFolderChangeMembersManagementPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderChangeMembersManagementPolicyType getSharedFolderChangeMembersManagementPolicyValue() {
        if (this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY) {
            return this.sharedFolderChangeMembersManagementPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderChangeMembersPolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY;
    }

    public static EventType sharedFolderChangeMembersPolicy(SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyType) {
        if (sharedFolderChangeMembersPolicyType != null) {
            return new EventType().withTagAndSharedFolderChangeMembersPolicy(Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY, sharedFolderChangeMembersPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderChangeMembersPolicyType getSharedFolderChangeMembersPolicyValue() {
        if (this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY) {
            return this.sharedFolderChangeMembersPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderCreate() {
        return this._tag == Tag.SHARED_FOLDER_CREATE;
    }

    public static EventType sharedFolderCreate(SharedFolderCreateType sharedFolderCreateType) {
        if (sharedFolderCreateType != null) {
            return new EventType().withTagAndSharedFolderCreate(Tag.SHARED_FOLDER_CREATE, sharedFolderCreateType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderCreateType getSharedFolderCreateValue() {
        if (this._tag == Tag.SHARED_FOLDER_CREATE) {
            return this.sharedFolderCreateValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_CREATE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderDeclineInvitation() {
        return this._tag == Tag.SHARED_FOLDER_DECLINE_INVITATION;
    }

    public static EventType sharedFolderDeclineInvitation(SharedFolderDeclineInvitationType sharedFolderDeclineInvitationType) {
        if (sharedFolderDeclineInvitationType != null) {
            return new EventType().withTagAndSharedFolderDeclineInvitation(Tag.SHARED_FOLDER_DECLINE_INVITATION, sharedFolderDeclineInvitationType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderDeclineInvitationType getSharedFolderDeclineInvitationValue() {
        if (this._tag == Tag.SHARED_FOLDER_DECLINE_INVITATION) {
            return this.sharedFolderDeclineInvitationValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_DECLINE_INVITATION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderMount() {
        return this._tag == Tag.SHARED_FOLDER_MOUNT;
    }

    public static EventType sharedFolderMount(SharedFolderMountType sharedFolderMountType) {
        if (sharedFolderMountType != null) {
            return new EventType().withTagAndSharedFolderMount(Tag.SHARED_FOLDER_MOUNT, sharedFolderMountType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderMountType getSharedFolderMountValue() {
        if (this._tag == Tag.SHARED_FOLDER_MOUNT) {
            return this.sharedFolderMountValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_MOUNT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderNest() {
        return this._tag == Tag.SHARED_FOLDER_NEST;
    }

    public static EventType sharedFolderNest(SharedFolderNestType sharedFolderNestType) {
        if (sharedFolderNestType != null) {
            return new EventType().withTagAndSharedFolderNest(Tag.SHARED_FOLDER_NEST, sharedFolderNestType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderNestType getSharedFolderNestValue() {
        if (this._tag == Tag.SHARED_FOLDER_NEST) {
            return this.sharedFolderNestValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_NEST, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderTransferOwnership() {
        return this._tag == Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP;
    }

    public static EventType sharedFolderTransferOwnership(SharedFolderTransferOwnershipType sharedFolderTransferOwnershipType) {
        if (sharedFolderTransferOwnershipType != null) {
            return new EventType().withTagAndSharedFolderTransferOwnership(Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP, sharedFolderTransferOwnershipType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderTransferOwnershipType getSharedFolderTransferOwnershipValue() {
        if (this._tag == Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP) {
            return this.sharedFolderTransferOwnershipValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedFolderUnmount() {
        return this._tag == Tag.SHARED_FOLDER_UNMOUNT;
    }

    public static EventType sharedFolderUnmount(SharedFolderUnmountType sharedFolderUnmountType) {
        if (sharedFolderUnmountType != null) {
            return new EventType().withTagAndSharedFolderUnmount(Tag.SHARED_FOLDER_UNMOUNT, sharedFolderUnmountType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedFolderUnmountType getSharedFolderUnmountValue() {
        if (this._tag == Tag.SHARED_FOLDER_UNMOUNT) {
            return this.sharedFolderUnmountValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_FOLDER_UNMOUNT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkAddExpiry() {
        return this._tag == Tag.SHARED_LINK_ADD_EXPIRY;
    }

    public static EventType sharedLinkAddExpiry(SharedLinkAddExpiryType sharedLinkAddExpiryType) {
        if (sharedLinkAddExpiryType != null) {
            return new EventType().withTagAndSharedLinkAddExpiry(Tag.SHARED_LINK_ADD_EXPIRY, sharedLinkAddExpiryType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkAddExpiryType getSharedLinkAddExpiryValue() {
        if (this._tag == Tag.SHARED_LINK_ADD_EXPIRY) {
            return this.sharedLinkAddExpiryValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_ADD_EXPIRY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkChangeExpiry() {
        return this._tag == Tag.SHARED_LINK_CHANGE_EXPIRY;
    }

    public static EventType sharedLinkChangeExpiry(SharedLinkChangeExpiryType sharedLinkChangeExpiryType) {
        if (sharedLinkChangeExpiryType != null) {
            return new EventType().withTagAndSharedLinkChangeExpiry(Tag.SHARED_LINK_CHANGE_EXPIRY, sharedLinkChangeExpiryType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkChangeExpiryType getSharedLinkChangeExpiryValue() {
        if (this._tag == Tag.SHARED_LINK_CHANGE_EXPIRY) {
            return this.sharedLinkChangeExpiryValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_CHANGE_EXPIRY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkChangeVisibility() {
        return this._tag == Tag.SHARED_LINK_CHANGE_VISIBILITY;
    }

    public static EventType sharedLinkChangeVisibility(SharedLinkChangeVisibilityType sharedLinkChangeVisibilityType) {
        if (sharedLinkChangeVisibilityType != null) {
            return new EventType().withTagAndSharedLinkChangeVisibility(Tag.SHARED_LINK_CHANGE_VISIBILITY, sharedLinkChangeVisibilityType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkChangeVisibilityType getSharedLinkChangeVisibilityValue() {
        if (this._tag == Tag.SHARED_LINK_CHANGE_VISIBILITY) {
            return this.sharedLinkChangeVisibilityValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_CHANGE_VISIBILITY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkCopy() {
        return this._tag == Tag.SHARED_LINK_COPY;
    }

    public static EventType sharedLinkCopy(SharedLinkCopyType sharedLinkCopyType) {
        if (sharedLinkCopyType != null) {
            return new EventType().withTagAndSharedLinkCopy(Tag.SHARED_LINK_COPY, sharedLinkCopyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkCopyType getSharedLinkCopyValue() {
        if (this._tag == Tag.SHARED_LINK_COPY) {
            return this.sharedLinkCopyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_COPY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkCreate() {
        return this._tag == Tag.SHARED_LINK_CREATE;
    }

    public static EventType sharedLinkCreate(SharedLinkCreateType sharedLinkCreateType) {
        if (sharedLinkCreateType != null) {
            return new EventType().withTagAndSharedLinkCreate(Tag.SHARED_LINK_CREATE, sharedLinkCreateType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkCreateType getSharedLinkCreateValue() {
        if (this._tag == Tag.SHARED_LINK_CREATE) {
            return this.sharedLinkCreateValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_CREATE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkDisable() {
        return this._tag == Tag.SHARED_LINK_DISABLE;
    }

    public static EventType sharedLinkDisable(SharedLinkDisableType sharedLinkDisableType) {
        if (sharedLinkDisableType != null) {
            return new EventType().withTagAndSharedLinkDisable(Tag.SHARED_LINK_DISABLE, sharedLinkDisableType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkDisableType getSharedLinkDisableValue() {
        if (this._tag == Tag.SHARED_LINK_DISABLE) {
            return this.sharedLinkDisableValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_DISABLE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkDownload() {
        return this._tag == Tag.SHARED_LINK_DOWNLOAD;
    }

    public static EventType sharedLinkDownload(SharedLinkDownloadType sharedLinkDownloadType) {
        if (sharedLinkDownloadType != null) {
            return new EventType().withTagAndSharedLinkDownload(Tag.SHARED_LINK_DOWNLOAD, sharedLinkDownloadType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkDownloadType getSharedLinkDownloadValue() {
        if (this._tag == Tag.SHARED_LINK_DOWNLOAD) {
            return this.sharedLinkDownloadValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_DOWNLOAD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkRemoveExpiry() {
        return this._tag == Tag.SHARED_LINK_REMOVE_EXPIRY;
    }

    public static EventType sharedLinkRemoveExpiry(SharedLinkRemoveExpiryType sharedLinkRemoveExpiryType) {
        if (sharedLinkRemoveExpiryType != null) {
            return new EventType().withTagAndSharedLinkRemoveExpiry(Tag.SHARED_LINK_REMOVE_EXPIRY, sharedLinkRemoveExpiryType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkRemoveExpiryType getSharedLinkRemoveExpiryValue() {
        if (this._tag == Tag.SHARED_LINK_REMOVE_EXPIRY) {
            return this.sharedLinkRemoveExpiryValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_REMOVE_EXPIRY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkShare() {
        return this._tag == Tag.SHARED_LINK_SHARE;
    }

    public static EventType sharedLinkShare(SharedLinkShareType sharedLinkShareType) {
        if (sharedLinkShareType != null) {
            return new EventType().withTagAndSharedLinkShare(Tag.SHARED_LINK_SHARE, sharedLinkShareType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkShareType getSharedLinkShareValue() {
        if (this._tag == Tag.SHARED_LINK_SHARE) {
            return this.sharedLinkShareValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_SHARE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedLinkView() {
        return this._tag == Tag.SHARED_LINK_VIEW;
    }

    public static EventType sharedLinkView(SharedLinkViewType sharedLinkViewType) {
        if (sharedLinkViewType != null) {
            return new EventType().withTagAndSharedLinkView(Tag.SHARED_LINK_VIEW, sharedLinkViewType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedLinkViewType getSharedLinkViewValue() {
        if (this._tag == Tag.SHARED_LINK_VIEW) {
            return this.sharedLinkViewValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_LINK_VIEW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharedNoteOpened() {
        return this._tag == Tag.SHARED_NOTE_OPENED;
    }

    public static EventType sharedNoteOpened(SharedNoteOpenedType sharedNoteOpenedType) {
        if (sharedNoteOpenedType != null) {
            return new EventType().withTagAndSharedNoteOpened(Tag.SHARED_NOTE_OPENED, sharedNoteOpenedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharedNoteOpenedType getSharedNoteOpenedValue() {
        if (this._tag == Tag.SHARED_NOTE_OPENED) {
            return this.sharedNoteOpenedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARED_NOTE_OPENED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShmodelGroupShare() {
        return this._tag == Tag.SHMODEL_GROUP_SHARE;
    }

    public static EventType shmodelGroupShare(ShmodelGroupShareType shmodelGroupShareType) {
        if (shmodelGroupShareType != null) {
            return new EventType().withTagAndShmodelGroupShare(Tag.SHMODEL_GROUP_SHARE, shmodelGroupShareType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShmodelGroupShareType getShmodelGroupShareValue() {
        if (this._tag == Tag.SHMODEL_GROUP_SHARE) {
            return this.shmodelGroupShareValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHMODEL_GROUP_SHARE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseAccessGranted() {
        return this._tag == Tag.SHOWCASE_ACCESS_GRANTED;
    }

    public static EventType showcaseAccessGranted(ShowcaseAccessGrantedType showcaseAccessGrantedType) {
        if (showcaseAccessGrantedType != null) {
            return new EventType().withTagAndShowcaseAccessGranted(Tag.SHOWCASE_ACCESS_GRANTED, showcaseAccessGrantedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseAccessGrantedType getShowcaseAccessGrantedValue() {
        if (this._tag == Tag.SHOWCASE_ACCESS_GRANTED) {
            return this.showcaseAccessGrantedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_ACCESS_GRANTED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseAddMember() {
        return this._tag == Tag.SHOWCASE_ADD_MEMBER;
    }

    public static EventType showcaseAddMember(ShowcaseAddMemberType showcaseAddMemberType) {
        if (showcaseAddMemberType != null) {
            return new EventType().withTagAndShowcaseAddMember(Tag.SHOWCASE_ADD_MEMBER, showcaseAddMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseAddMemberType getShowcaseAddMemberValue() {
        if (this._tag == Tag.SHOWCASE_ADD_MEMBER) {
            return this.showcaseAddMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_ADD_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseArchived() {
        return this._tag == Tag.SHOWCASE_ARCHIVED;
    }

    public static EventType showcaseArchived(ShowcaseArchivedType showcaseArchivedType) {
        if (showcaseArchivedType != null) {
            return new EventType().withTagAndShowcaseArchived(Tag.SHOWCASE_ARCHIVED, showcaseArchivedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseArchivedType getShowcaseArchivedValue() {
        if (this._tag == Tag.SHOWCASE_ARCHIVED) {
            return this.showcaseArchivedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_ARCHIVED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseCreated() {
        return this._tag == Tag.SHOWCASE_CREATED;
    }

    public static EventType showcaseCreated(ShowcaseCreatedType showcaseCreatedType) {
        if (showcaseCreatedType != null) {
            return new EventType().withTagAndShowcaseCreated(Tag.SHOWCASE_CREATED, showcaseCreatedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseCreatedType getShowcaseCreatedValue() {
        if (this._tag == Tag.SHOWCASE_CREATED) {
            return this.showcaseCreatedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_CREATED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseDeleteComment() {
        return this._tag == Tag.SHOWCASE_DELETE_COMMENT;
    }

    public static EventType showcaseDeleteComment(ShowcaseDeleteCommentType showcaseDeleteCommentType) {
        if (showcaseDeleteCommentType != null) {
            return new EventType().withTagAndShowcaseDeleteComment(Tag.SHOWCASE_DELETE_COMMENT, showcaseDeleteCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseDeleteCommentType getShowcaseDeleteCommentValue() {
        if (this._tag == Tag.SHOWCASE_DELETE_COMMENT) {
            return this.showcaseDeleteCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_DELETE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseEdited() {
        return this._tag == Tag.SHOWCASE_EDITED;
    }

    public static EventType showcaseEdited(ShowcaseEditedType showcaseEditedType) {
        if (showcaseEditedType != null) {
            return new EventType().withTagAndShowcaseEdited(Tag.SHOWCASE_EDITED, showcaseEditedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseEditedType getShowcaseEditedValue() {
        if (this._tag == Tag.SHOWCASE_EDITED) {
            return this.showcaseEditedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_EDITED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseEditComment() {
        return this._tag == Tag.SHOWCASE_EDIT_COMMENT;
    }

    public static EventType showcaseEditComment(ShowcaseEditCommentType showcaseEditCommentType) {
        if (showcaseEditCommentType != null) {
            return new EventType().withTagAndShowcaseEditComment(Tag.SHOWCASE_EDIT_COMMENT, showcaseEditCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseEditCommentType getShowcaseEditCommentValue() {
        if (this._tag == Tag.SHOWCASE_EDIT_COMMENT) {
            return this.showcaseEditCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_EDIT_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseFileAdded() {
        return this._tag == Tag.SHOWCASE_FILE_ADDED;
    }

    public static EventType showcaseFileAdded(ShowcaseFileAddedType showcaseFileAddedType) {
        if (showcaseFileAddedType != null) {
            return new EventType().withTagAndShowcaseFileAdded(Tag.SHOWCASE_FILE_ADDED, showcaseFileAddedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseFileAddedType getShowcaseFileAddedValue() {
        if (this._tag == Tag.SHOWCASE_FILE_ADDED) {
            return this.showcaseFileAddedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_FILE_ADDED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseFileDownload() {
        return this._tag == Tag.SHOWCASE_FILE_DOWNLOAD;
    }

    public static EventType showcaseFileDownload(ShowcaseFileDownloadType showcaseFileDownloadType) {
        if (showcaseFileDownloadType != null) {
            return new EventType().withTagAndShowcaseFileDownload(Tag.SHOWCASE_FILE_DOWNLOAD, showcaseFileDownloadType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseFileDownloadType getShowcaseFileDownloadValue() {
        if (this._tag == Tag.SHOWCASE_FILE_DOWNLOAD) {
            return this.showcaseFileDownloadValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_FILE_DOWNLOAD, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseFileRemoved() {
        return this._tag == Tag.SHOWCASE_FILE_REMOVED;
    }

    public static EventType showcaseFileRemoved(ShowcaseFileRemovedType showcaseFileRemovedType) {
        if (showcaseFileRemovedType != null) {
            return new EventType().withTagAndShowcaseFileRemoved(Tag.SHOWCASE_FILE_REMOVED, showcaseFileRemovedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseFileRemovedType getShowcaseFileRemovedValue() {
        if (this._tag == Tag.SHOWCASE_FILE_REMOVED) {
            return this.showcaseFileRemovedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_FILE_REMOVED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseFileView() {
        return this._tag == Tag.SHOWCASE_FILE_VIEW;
    }

    public static EventType showcaseFileView(ShowcaseFileViewType showcaseFileViewType) {
        if (showcaseFileViewType != null) {
            return new EventType().withTagAndShowcaseFileView(Tag.SHOWCASE_FILE_VIEW, showcaseFileViewType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseFileViewType getShowcaseFileViewValue() {
        if (this._tag == Tag.SHOWCASE_FILE_VIEW) {
            return this.showcaseFileViewValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_FILE_VIEW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcasePermanentlyDeleted() {
        return this._tag == Tag.SHOWCASE_PERMANENTLY_DELETED;
    }

    public static EventType showcasePermanentlyDeleted(ShowcasePermanentlyDeletedType showcasePermanentlyDeletedType) {
        if (showcasePermanentlyDeletedType != null) {
            return new EventType().withTagAndShowcasePermanentlyDeleted(Tag.SHOWCASE_PERMANENTLY_DELETED, showcasePermanentlyDeletedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcasePermanentlyDeletedType getShowcasePermanentlyDeletedValue() {
        if (this._tag == Tag.SHOWCASE_PERMANENTLY_DELETED) {
            return this.showcasePermanentlyDeletedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_PERMANENTLY_DELETED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcasePostComment() {
        return this._tag == Tag.SHOWCASE_POST_COMMENT;
    }

    public static EventType showcasePostComment(ShowcasePostCommentType showcasePostCommentType) {
        if (showcasePostCommentType != null) {
            return new EventType().withTagAndShowcasePostComment(Tag.SHOWCASE_POST_COMMENT, showcasePostCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcasePostCommentType getShowcasePostCommentValue() {
        if (this._tag == Tag.SHOWCASE_POST_COMMENT) {
            return this.showcasePostCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_POST_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseRemoveMember() {
        return this._tag == Tag.SHOWCASE_REMOVE_MEMBER;
    }

    public static EventType showcaseRemoveMember(ShowcaseRemoveMemberType showcaseRemoveMemberType) {
        if (showcaseRemoveMemberType != null) {
            return new EventType().withTagAndShowcaseRemoveMember(Tag.SHOWCASE_REMOVE_MEMBER, showcaseRemoveMemberType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseRemoveMemberType getShowcaseRemoveMemberValue() {
        if (this._tag == Tag.SHOWCASE_REMOVE_MEMBER) {
            return this.showcaseRemoveMemberValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_REMOVE_MEMBER, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseRenamed() {
        return this._tag == Tag.SHOWCASE_RENAMED;
    }

    public static EventType showcaseRenamed(ShowcaseRenamedType showcaseRenamedType) {
        if (showcaseRenamedType != null) {
            return new EventType().withTagAndShowcaseRenamed(Tag.SHOWCASE_RENAMED, showcaseRenamedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseRenamedType getShowcaseRenamedValue() {
        if (this._tag == Tag.SHOWCASE_RENAMED) {
            return this.showcaseRenamedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_RENAMED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseRequestAccess() {
        return this._tag == Tag.SHOWCASE_REQUEST_ACCESS;
    }

    public static EventType showcaseRequestAccess(ShowcaseRequestAccessType showcaseRequestAccessType) {
        if (showcaseRequestAccessType != null) {
            return new EventType().withTagAndShowcaseRequestAccess(Tag.SHOWCASE_REQUEST_ACCESS, showcaseRequestAccessType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseRequestAccessType getShowcaseRequestAccessValue() {
        if (this._tag == Tag.SHOWCASE_REQUEST_ACCESS) {
            return this.showcaseRequestAccessValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_REQUEST_ACCESS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseResolveComment() {
        return this._tag == Tag.SHOWCASE_RESOLVE_COMMENT;
    }

    public static EventType showcaseResolveComment(ShowcaseResolveCommentType showcaseResolveCommentType) {
        if (showcaseResolveCommentType != null) {
            return new EventType().withTagAndShowcaseResolveComment(Tag.SHOWCASE_RESOLVE_COMMENT, showcaseResolveCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseResolveCommentType getShowcaseResolveCommentValue() {
        if (this._tag == Tag.SHOWCASE_RESOLVE_COMMENT) {
            return this.showcaseResolveCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_RESOLVE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseRestored() {
        return this._tag == Tag.SHOWCASE_RESTORED;
    }

    public static EventType showcaseRestored(ShowcaseRestoredType showcaseRestoredType) {
        if (showcaseRestoredType != null) {
            return new EventType().withTagAndShowcaseRestored(Tag.SHOWCASE_RESTORED, showcaseRestoredType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseRestoredType getShowcaseRestoredValue() {
        if (this._tag == Tag.SHOWCASE_RESTORED) {
            return this.showcaseRestoredValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_RESTORED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseTrashed() {
        return this._tag == Tag.SHOWCASE_TRASHED;
    }

    public static EventType showcaseTrashed(ShowcaseTrashedType showcaseTrashedType) {
        if (showcaseTrashedType != null) {
            return new EventType().withTagAndShowcaseTrashed(Tag.SHOWCASE_TRASHED, showcaseTrashedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseTrashedType getShowcaseTrashedValue() {
        if (this._tag == Tag.SHOWCASE_TRASHED) {
            return this.showcaseTrashedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_TRASHED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseTrashedDeprecated() {
        return this._tag == Tag.SHOWCASE_TRASHED_DEPRECATED;
    }

    public static EventType showcaseTrashedDeprecated(ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedType) {
        if (showcaseTrashedDeprecatedType != null) {
            return new EventType().withTagAndShowcaseTrashedDeprecated(Tag.SHOWCASE_TRASHED_DEPRECATED, showcaseTrashedDeprecatedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseTrashedDeprecatedType getShowcaseTrashedDeprecatedValue() {
        if (this._tag == Tag.SHOWCASE_TRASHED_DEPRECATED) {
            return this.showcaseTrashedDeprecatedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_TRASHED_DEPRECATED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseUnresolveComment() {
        return this._tag == Tag.SHOWCASE_UNRESOLVE_COMMENT;
    }

    public static EventType showcaseUnresolveComment(ShowcaseUnresolveCommentType showcaseUnresolveCommentType) {
        if (showcaseUnresolveCommentType != null) {
            return new EventType().withTagAndShowcaseUnresolveComment(Tag.SHOWCASE_UNRESOLVE_COMMENT, showcaseUnresolveCommentType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseUnresolveCommentType getShowcaseUnresolveCommentValue() {
        if (this._tag == Tag.SHOWCASE_UNRESOLVE_COMMENT) {
            return this.showcaseUnresolveCommentValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_UNRESOLVE_COMMENT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseUntrashed() {
        return this._tag == Tag.SHOWCASE_UNTRASHED;
    }

    public static EventType showcaseUntrashed(ShowcaseUntrashedType showcaseUntrashedType) {
        if (showcaseUntrashedType != null) {
            return new EventType().withTagAndShowcaseUntrashed(Tag.SHOWCASE_UNTRASHED, showcaseUntrashedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseUntrashedType getShowcaseUntrashedValue() {
        if (this._tag == Tag.SHOWCASE_UNTRASHED) {
            return this.showcaseUntrashedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_UNTRASHED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseUntrashedDeprecated() {
        return this._tag == Tag.SHOWCASE_UNTRASHED_DEPRECATED;
    }

    public static EventType showcaseUntrashedDeprecated(ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedType) {
        if (showcaseUntrashedDeprecatedType != null) {
            return new EventType().withTagAndShowcaseUntrashedDeprecated(Tag.SHOWCASE_UNTRASHED_DEPRECATED, showcaseUntrashedDeprecatedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseUntrashedDeprecatedType getShowcaseUntrashedDeprecatedValue() {
        if (this._tag == Tag.SHOWCASE_UNTRASHED_DEPRECATED) {
            return this.showcaseUntrashedDeprecatedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_UNTRASHED_DEPRECATED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseView() {
        return this._tag == Tag.SHOWCASE_VIEW;
    }

    public static EventType showcaseView(ShowcaseViewType showcaseViewType) {
        if (showcaseViewType != null) {
            return new EventType().withTagAndShowcaseView(Tag.SHOWCASE_VIEW, showcaseViewType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseViewType getShowcaseViewValue() {
        if (this._tag == Tag.SHOWCASE_VIEW) {
            return this.showcaseViewValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_VIEW, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoAddCert() {
        return this._tag == Tag.SSO_ADD_CERT;
    }

    public static EventType ssoAddCert(SsoAddCertType ssoAddCertType) {
        if (ssoAddCertType != null) {
            return new EventType().withTagAndSsoAddCert(Tag.SSO_ADD_CERT, ssoAddCertType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoAddCertType getSsoAddCertValue() {
        if (this._tag == Tag.SSO_ADD_CERT) {
            return this.ssoAddCertValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_ADD_CERT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoAddLoginUrl() {
        return this._tag == Tag.SSO_ADD_LOGIN_URL;
    }

    public static EventType ssoAddLoginUrl(SsoAddLoginUrlType ssoAddLoginUrlType) {
        if (ssoAddLoginUrlType != null) {
            return new EventType().withTagAndSsoAddLoginUrl(Tag.SSO_ADD_LOGIN_URL, ssoAddLoginUrlType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoAddLoginUrlType getSsoAddLoginUrlValue() {
        if (this._tag == Tag.SSO_ADD_LOGIN_URL) {
            return this.ssoAddLoginUrlValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_ADD_LOGIN_URL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoAddLogoutUrl() {
        return this._tag == Tag.SSO_ADD_LOGOUT_URL;
    }

    public static EventType ssoAddLogoutUrl(SsoAddLogoutUrlType ssoAddLogoutUrlType) {
        if (ssoAddLogoutUrlType != null) {
            return new EventType().withTagAndSsoAddLogoutUrl(Tag.SSO_ADD_LOGOUT_URL, ssoAddLogoutUrlType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoAddLogoutUrlType getSsoAddLogoutUrlValue() {
        if (this._tag == Tag.SSO_ADD_LOGOUT_URL) {
            return this.ssoAddLogoutUrlValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_ADD_LOGOUT_URL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoChangeCert() {
        return this._tag == Tag.SSO_CHANGE_CERT;
    }

    public static EventType ssoChangeCert(SsoChangeCertType ssoChangeCertType) {
        if (ssoChangeCertType != null) {
            return new EventType().withTagAndSsoChangeCert(Tag.SSO_CHANGE_CERT, ssoChangeCertType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoChangeCertType getSsoChangeCertValue() {
        if (this._tag == Tag.SSO_CHANGE_CERT) {
            return this.ssoChangeCertValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_CHANGE_CERT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoChangeLoginUrl() {
        return this._tag == Tag.SSO_CHANGE_LOGIN_URL;
    }

    public static EventType ssoChangeLoginUrl(SsoChangeLoginUrlType ssoChangeLoginUrlType) {
        if (ssoChangeLoginUrlType != null) {
            return new EventType().withTagAndSsoChangeLoginUrl(Tag.SSO_CHANGE_LOGIN_URL, ssoChangeLoginUrlType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoChangeLoginUrlType getSsoChangeLoginUrlValue() {
        if (this._tag == Tag.SSO_CHANGE_LOGIN_URL) {
            return this.ssoChangeLoginUrlValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_CHANGE_LOGIN_URL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoChangeLogoutUrl() {
        return this._tag == Tag.SSO_CHANGE_LOGOUT_URL;
    }

    public static EventType ssoChangeLogoutUrl(SsoChangeLogoutUrlType ssoChangeLogoutUrlType) {
        if (ssoChangeLogoutUrlType != null) {
            return new EventType().withTagAndSsoChangeLogoutUrl(Tag.SSO_CHANGE_LOGOUT_URL, ssoChangeLogoutUrlType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoChangeLogoutUrlType getSsoChangeLogoutUrlValue() {
        if (this._tag == Tag.SSO_CHANGE_LOGOUT_URL) {
            return this.ssoChangeLogoutUrlValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_CHANGE_LOGOUT_URL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoChangeSamlIdentityMode() {
        return this._tag == Tag.SSO_CHANGE_SAML_IDENTITY_MODE;
    }

    public static EventType ssoChangeSamlIdentityMode(SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeType) {
        if (ssoChangeSamlIdentityModeType != null) {
            return new EventType().withTagAndSsoChangeSamlIdentityMode(Tag.SSO_CHANGE_SAML_IDENTITY_MODE, ssoChangeSamlIdentityModeType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoChangeSamlIdentityModeType getSsoChangeSamlIdentityModeValue() {
        if (this._tag == Tag.SSO_CHANGE_SAML_IDENTITY_MODE) {
            return this.ssoChangeSamlIdentityModeValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_CHANGE_SAML_IDENTITY_MODE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoRemoveCert() {
        return this._tag == Tag.SSO_REMOVE_CERT;
    }

    public static EventType ssoRemoveCert(SsoRemoveCertType ssoRemoveCertType) {
        if (ssoRemoveCertType != null) {
            return new EventType().withTagAndSsoRemoveCert(Tag.SSO_REMOVE_CERT, ssoRemoveCertType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoRemoveCertType getSsoRemoveCertValue() {
        if (this._tag == Tag.SSO_REMOVE_CERT) {
            return this.ssoRemoveCertValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_REMOVE_CERT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoRemoveLoginUrl() {
        return this._tag == Tag.SSO_REMOVE_LOGIN_URL;
    }

    public static EventType ssoRemoveLoginUrl(SsoRemoveLoginUrlType ssoRemoveLoginUrlType) {
        if (ssoRemoveLoginUrlType != null) {
            return new EventType().withTagAndSsoRemoveLoginUrl(Tag.SSO_REMOVE_LOGIN_URL, ssoRemoveLoginUrlType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoRemoveLoginUrlType getSsoRemoveLoginUrlValue() {
        if (this._tag == Tag.SSO_REMOVE_LOGIN_URL) {
            return this.ssoRemoveLoginUrlValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_REMOVE_LOGIN_URL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoRemoveLogoutUrl() {
        return this._tag == Tag.SSO_REMOVE_LOGOUT_URL;
    }

    public static EventType ssoRemoveLogoutUrl(SsoRemoveLogoutUrlType ssoRemoveLogoutUrlType) {
        if (ssoRemoveLogoutUrlType != null) {
            return new EventType().withTagAndSsoRemoveLogoutUrl(Tag.SSO_REMOVE_LOGOUT_URL, ssoRemoveLogoutUrlType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoRemoveLogoutUrlType getSsoRemoveLogoutUrlValue() {
        if (this._tag == Tag.SSO_REMOVE_LOGOUT_URL) {
            return this.ssoRemoveLogoutUrlValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_REMOVE_LOGOUT_URL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamFolderChangeStatus() {
        return this._tag == Tag.TEAM_FOLDER_CHANGE_STATUS;
    }

    public static EventType teamFolderChangeStatus(TeamFolderChangeStatusType teamFolderChangeStatusType) {
        if (teamFolderChangeStatusType != null) {
            return new EventType().withTagAndTeamFolderChangeStatus(Tag.TEAM_FOLDER_CHANGE_STATUS, teamFolderChangeStatusType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamFolderChangeStatusType getTeamFolderChangeStatusValue() {
        if (this._tag == Tag.TEAM_FOLDER_CHANGE_STATUS) {
            return this.teamFolderChangeStatusValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_FOLDER_CHANGE_STATUS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamFolderCreate() {
        return this._tag == Tag.TEAM_FOLDER_CREATE;
    }

    public static EventType teamFolderCreate(TeamFolderCreateType teamFolderCreateType) {
        if (teamFolderCreateType != null) {
            return new EventType().withTagAndTeamFolderCreate(Tag.TEAM_FOLDER_CREATE, teamFolderCreateType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamFolderCreateType getTeamFolderCreateValue() {
        if (this._tag == Tag.TEAM_FOLDER_CREATE) {
            return this.teamFolderCreateValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_FOLDER_CREATE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamFolderDowngrade() {
        return this._tag == Tag.TEAM_FOLDER_DOWNGRADE;
    }

    public static EventType teamFolderDowngrade(TeamFolderDowngradeType teamFolderDowngradeType) {
        if (teamFolderDowngradeType != null) {
            return new EventType().withTagAndTeamFolderDowngrade(Tag.TEAM_FOLDER_DOWNGRADE, teamFolderDowngradeType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamFolderDowngradeType getTeamFolderDowngradeValue() {
        if (this._tag == Tag.TEAM_FOLDER_DOWNGRADE) {
            return this.teamFolderDowngradeValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_FOLDER_DOWNGRADE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamFolderPermanentlyDelete() {
        return this._tag == Tag.TEAM_FOLDER_PERMANENTLY_DELETE;
    }

    public static EventType teamFolderPermanentlyDelete(TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteType) {
        if (teamFolderPermanentlyDeleteType != null) {
            return new EventType().withTagAndTeamFolderPermanentlyDelete(Tag.TEAM_FOLDER_PERMANENTLY_DELETE, teamFolderPermanentlyDeleteType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamFolderPermanentlyDeleteType getTeamFolderPermanentlyDeleteValue() {
        if (this._tag == Tag.TEAM_FOLDER_PERMANENTLY_DELETE) {
            return this.teamFolderPermanentlyDeleteValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_FOLDER_PERMANENTLY_DELETE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamFolderRename() {
        return this._tag == Tag.TEAM_FOLDER_RENAME;
    }

    public static EventType teamFolderRename(TeamFolderRenameType teamFolderRenameType) {
        if (teamFolderRenameType != null) {
            return new EventType().withTagAndTeamFolderRename(Tag.TEAM_FOLDER_RENAME, teamFolderRenameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamFolderRenameType getTeamFolderRenameValue() {
        if (this._tag == Tag.TEAM_FOLDER_RENAME) {
            return this.teamFolderRenameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_FOLDER_RENAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamSelectiveSyncSettingsChanged() {
        return this._tag == Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED;
    }

    public static EventType teamSelectiveSyncSettingsChanged(TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedType) {
        if (teamSelectiveSyncSettingsChangedType != null) {
            return new EventType().withTagAndTeamSelectiveSyncSettingsChanged(Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED, teamSelectiveSyncSettingsChangedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamSelectiveSyncSettingsChangedType getTeamSelectiveSyncSettingsChangedValue() {
        if (this._tag == Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED) {
            return this.teamSelectiveSyncSettingsChangedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAccountCaptureChangePolicy() {
        return this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_POLICY;
    }

    public static EventType accountCaptureChangePolicy(AccountCaptureChangePolicyType accountCaptureChangePolicyType) {
        if (accountCaptureChangePolicyType != null) {
            return new EventType().withTagAndAccountCaptureChangePolicy(Tag.ACCOUNT_CAPTURE_CHANGE_POLICY, accountCaptureChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AccountCaptureChangePolicyType getAccountCaptureChangePolicyValue() {
        if (this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_POLICY) {
            return this.accountCaptureChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ACCOUNT_CAPTURE_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAllowDownloadDisabled() {
        return this._tag == Tag.ALLOW_DOWNLOAD_DISABLED;
    }

    public static EventType allowDownloadDisabled(AllowDownloadDisabledType allowDownloadDisabledType) {
        if (allowDownloadDisabledType != null) {
            return new EventType().withTagAndAllowDownloadDisabled(Tag.ALLOW_DOWNLOAD_DISABLED, allowDownloadDisabledType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AllowDownloadDisabledType getAllowDownloadDisabledValue() {
        if (this._tag == Tag.ALLOW_DOWNLOAD_DISABLED) {
            return this.allowDownloadDisabledValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ALLOW_DOWNLOAD_DISABLED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isAllowDownloadEnabled() {
        return this._tag == Tag.ALLOW_DOWNLOAD_ENABLED;
    }

    public static EventType allowDownloadEnabled(AllowDownloadEnabledType allowDownloadEnabledType) {
        if (allowDownloadEnabledType != null) {
            return new EventType().withTagAndAllowDownloadEnabled(Tag.ALLOW_DOWNLOAD_ENABLED, allowDownloadEnabledType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public AllowDownloadEnabledType getAllowDownloadEnabledValue() {
        if (this._tag == Tag.ALLOW_DOWNLOAD_ENABLED) {
            return this.allowDownloadEnabledValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.ALLOW_DOWNLOAD_ENABLED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDataPlacementRestrictionChangePolicy() {
        return this._tag == Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY;
    }

    public static EventType dataPlacementRestrictionChangePolicy(DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyType) {
        if (dataPlacementRestrictionChangePolicyType != null) {
            return new EventType().withTagAndDataPlacementRestrictionChangePolicy(Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY, dataPlacementRestrictionChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DataPlacementRestrictionChangePolicyType getDataPlacementRestrictionChangePolicyValue() {
        if (this._tag == Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY) {
            return this.dataPlacementRestrictionChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDataPlacementRestrictionSatisfyPolicy() {
        return this._tag == Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY;
    }

    public static EventType dataPlacementRestrictionSatisfyPolicy(DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyType) {
        if (dataPlacementRestrictionSatisfyPolicyType != null) {
            return new EventType().withTagAndDataPlacementRestrictionSatisfyPolicy(Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY, dataPlacementRestrictionSatisfyPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DataPlacementRestrictionSatisfyPolicyType getDataPlacementRestrictionSatisfyPolicyValue() {
        if (this._tag == Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY) {
            return this.dataPlacementRestrictionSatisfyPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceApprovalsChangeDesktopPolicy() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY;
    }

    public static EventType deviceApprovalsChangeDesktopPolicy(DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyType) {
        if (deviceApprovalsChangeDesktopPolicyType != null) {
            return new EventType().withTagAndDeviceApprovalsChangeDesktopPolicy(Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY, deviceApprovalsChangeDesktopPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceApprovalsChangeDesktopPolicyType getDeviceApprovalsChangeDesktopPolicyValue() {
        if (this._tag == Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY) {
            return this.deviceApprovalsChangeDesktopPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceApprovalsChangeMobilePolicy() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY;
    }

    public static EventType deviceApprovalsChangeMobilePolicy(DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyType) {
        if (deviceApprovalsChangeMobilePolicyType != null) {
            return new EventType().withTagAndDeviceApprovalsChangeMobilePolicy(Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY, deviceApprovalsChangeMobilePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceApprovalsChangeMobilePolicyType getDeviceApprovalsChangeMobilePolicyValue() {
        if (this._tag == Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY) {
            return this.deviceApprovalsChangeMobilePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceApprovalsChangeOverageAction() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION;
    }

    public static EventType deviceApprovalsChangeOverageAction(DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionType) {
        if (deviceApprovalsChangeOverageActionType != null) {
            return new EventType().withTagAndDeviceApprovalsChangeOverageAction(Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION, deviceApprovalsChangeOverageActionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceApprovalsChangeOverageActionType getDeviceApprovalsChangeOverageActionValue() {
        if (this._tag == Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION) {
            return this.deviceApprovalsChangeOverageActionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDeviceApprovalsChangeUnlinkAction() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION;
    }

    public static EventType deviceApprovalsChangeUnlinkAction(DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionType) {
        if (deviceApprovalsChangeUnlinkActionType != null) {
            return new EventType().withTagAndDeviceApprovalsChangeUnlinkAction(Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION, deviceApprovalsChangeUnlinkActionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DeviceApprovalsChangeUnlinkActionType getDeviceApprovalsChangeUnlinkActionValue() {
        if (this._tag == Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION) {
            return this.deviceApprovalsChangeUnlinkActionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDirectoryRestrictionsAddMembers() {
        return this._tag == Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS;
    }

    public static EventType directoryRestrictionsAddMembers(DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersType) {
        if (directoryRestrictionsAddMembersType != null) {
            return new EventType().withTagAndDirectoryRestrictionsAddMembers(Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS, directoryRestrictionsAddMembersType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DirectoryRestrictionsAddMembersType getDirectoryRestrictionsAddMembersValue() {
        if (this._tag == Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS) {
            return this.directoryRestrictionsAddMembersValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isDirectoryRestrictionsRemoveMembers() {
        return this._tag == Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS;
    }

    public static EventType directoryRestrictionsRemoveMembers(DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersType) {
        if (directoryRestrictionsRemoveMembersType != null) {
            return new EventType().withTagAndDirectoryRestrictionsRemoveMembers(Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS, directoryRestrictionsRemoveMembersType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public DirectoryRestrictionsRemoveMembersType getDirectoryRestrictionsRemoveMembersValue() {
        if (this._tag == Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS) {
            return this.directoryRestrictionsRemoveMembersValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmAddException() {
        return this._tag == Tag.EMM_ADD_EXCEPTION;
    }

    public static EventType emmAddException(EmmAddExceptionType emmAddExceptionType) {
        if (emmAddExceptionType != null) {
            return new EventType().withTagAndEmmAddException(Tag.EMM_ADD_EXCEPTION, emmAddExceptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmAddExceptionType getEmmAddExceptionValue() {
        if (this._tag == Tag.EMM_ADD_EXCEPTION) {
            return this.emmAddExceptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_ADD_EXCEPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmChangePolicy() {
        return this._tag == Tag.EMM_CHANGE_POLICY;
    }

    public static EventType emmChangePolicy(EmmChangePolicyType emmChangePolicyType) {
        if (emmChangePolicyType != null) {
            return new EventType().withTagAndEmmChangePolicy(Tag.EMM_CHANGE_POLICY, emmChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmChangePolicyType getEmmChangePolicyValue() {
        if (this._tag == Tag.EMM_CHANGE_POLICY) {
            return this.emmChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isEmmRemoveException() {
        return this._tag == Tag.EMM_REMOVE_EXCEPTION;
    }

    public static EventType emmRemoveException(EmmRemoveExceptionType emmRemoveExceptionType) {
        if (emmRemoveExceptionType != null) {
            return new EventType().withTagAndEmmRemoveException(Tag.EMM_REMOVE_EXCEPTION, emmRemoveExceptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public EmmRemoveExceptionType getEmmRemoveExceptionValue() {
        if (this._tag == Tag.EMM_REMOVE_EXCEPTION) {
            return this.emmRemoveExceptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EMM_REMOVE_EXCEPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isExtendedVersionHistoryChangePolicy() {
        return this._tag == Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY;
    }

    public static EventType extendedVersionHistoryChangePolicy(ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyType) {
        if (extendedVersionHistoryChangePolicyType != null) {
            return new EventType().withTagAndExtendedVersionHistoryChangePolicy(Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY, extendedVersionHistoryChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ExtendedVersionHistoryChangePolicyType getExtendedVersionHistoryChangePolicyValue() {
        if (this._tag == Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY) {
            return this.extendedVersionHistoryChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileCommentsChangePolicy() {
        return this._tag == Tag.FILE_COMMENTS_CHANGE_POLICY;
    }

    public static EventType fileCommentsChangePolicy(FileCommentsChangePolicyType fileCommentsChangePolicyType) {
        if (fileCommentsChangePolicyType != null) {
            return new EventType().withTagAndFileCommentsChangePolicy(Tag.FILE_COMMENTS_CHANGE_POLICY, fileCommentsChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileCommentsChangePolicyType getFileCommentsChangePolicyValue() {
        if (this._tag == Tag.FILE_COMMENTS_CHANGE_POLICY) {
            return this.fileCommentsChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_COMMENTS_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestsChangePolicy() {
        return this._tag == Tag.FILE_REQUESTS_CHANGE_POLICY;
    }

    public static EventType fileRequestsChangePolicy(FileRequestsChangePolicyType fileRequestsChangePolicyType) {
        if (fileRequestsChangePolicyType != null) {
            return new EventType().withTagAndFileRequestsChangePolicy(Tag.FILE_REQUESTS_CHANGE_POLICY, fileRequestsChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestsChangePolicyType getFileRequestsChangePolicyValue() {
        if (this._tag == Tag.FILE_REQUESTS_CHANGE_POLICY) {
            return this.fileRequestsChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUESTS_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestsEmailsEnabled() {
        return this._tag == Tag.FILE_REQUESTS_EMAILS_ENABLED;
    }

    public static EventType fileRequestsEmailsEnabled(FileRequestsEmailsEnabledType fileRequestsEmailsEnabledType) {
        if (fileRequestsEmailsEnabledType != null) {
            return new EventType().withTagAndFileRequestsEmailsEnabled(Tag.FILE_REQUESTS_EMAILS_ENABLED, fileRequestsEmailsEnabledType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestsEmailsEnabledType getFileRequestsEmailsEnabledValue() {
        if (this._tag == Tag.FILE_REQUESTS_EMAILS_ENABLED) {
            return this.fileRequestsEmailsEnabledValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUESTS_EMAILS_ENABLED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isFileRequestsEmailsRestrictedToTeamOnly() {
        return this._tag == Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY;
    }

    public static EventType fileRequestsEmailsRestrictedToTeamOnly(FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyType) {
        if (fileRequestsEmailsRestrictedToTeamOnlyType != null) {
            return new EventType().withTagAndFileRequestsEmailsRestrictedToTeamOnly(Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY, fileRequestsEmailsRestrictedToTeamOnlyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public FileRequestsEmailsRestrictedToTeamOnlyType getFileRequestsEmailsRestrictedToTeamOnlyValue() {
        if (this._tag == Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY) {
            return this.fileRequestsEmailsRestrictedToTeamOnlyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGoogleSsoChangePolicy() {
        return this._tag == Tag.GOOGLE_SSO_CHANGE_POLICY;
    }

    public static EventType googleSsoChangePolicy(GoogleSsoChangePolicyType googleSsoChangePolicyType) {
        if (googleSsoChangePolicyType != null) {
            return new EventType().withTagAndGoogleSsoChangePolicy(Tag.GOOGLE_SSO_CHANGE_POLICY, googleSsoChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GoogleSsoChangePolicyType getGoogleSsoChangePolicyValue() {
        if (this._tag == Tag.GOOGLE_SSO_CHANGE_POLICY) {
            return this.googleSsoChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GOOGLE_SSO_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isGroupUserManagementChangePolicy() {
        return this._tag == Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY;
    }

    public static EventType groupUserManagementChangePolicy(GroupUserManagementChangePolicyType groupUserManagementChangePolicyType) {
        if (groupUserManagementChangePolicyType != null) {
            return new EventType().withTagAndGroupUserManagementChangePolicy(Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY, groupUserManagementChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public GroupUserManagementChangePolicyType getGroupUserManagementChangePolicyValue() {
        if (this._tag == Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY) {
            return this.groupUserManagementChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberRequestsChangePolicy() {
        return this._tag == Tag.MEMBER_REQUESTS_CHANGE_POLICY;
    }

    public static EventType memberRequestsChangePolicy(MemberRequestsChangePolicyType memberRequestsChangePolicyType) {
        if (memberRequestsChangePolicyType != null) {
            return new EventType().withTagAndMemberRequestsChangePolicy(Tag.MEMBER_REQUESTS_CHANGE_POLICY, memberRequestsChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberRequestsChangePolicyType getMemberRequestsChangePolicyValue() {
        if (this._tag == Tag.MEMBER_REQUESTS_CHANGE_POLICY) {
            return this.memberRequestsChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_REQUESTS_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsAddException() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION;
    }

    public static EventType memberSpaceLimitsAddException(MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionType) {
        if (memberSpaceLimitsAddExceptionType != null) {
            return new EventType().withTagAndMemberSpaceLimitsAddException(Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION, memberSpaceLimitsAddExceptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsAddExceptionType getMemberSpaceLimitsAddExceptionValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION) {
            return this.memberSpaceLimitsAddExceptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsChangeCapsTypePolicy() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY;
    }

    public static EventType memberSpaceLimitsChangeCapsTypePolicy(MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyType) {
        if (memberSpaceLimitsChangeCapsTypePolicyType != null) {
            return new EventType().withTagAndMemberSpaceLimitsChangeCapsTypePolicy(Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY, memberSpaceLimitsChangeCapsTypePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsChangeCapsTypePolicyType getMemberSpaceLimitsChangeCapsTypePolicyValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY) {
            return this.memberSpaceLimitsChangeCapsTypePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsChangePolicy() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY;
    }

    public static EventType memberSpaceLimitsChangePolicy(MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyType) {
        if (memberSpaceLimitsChangePolicyType != null) {
            return new EventType().withTagAndMemberSpaceLimitsChangePolicy(Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY, memberSpaceLimitsChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsChangePolicyType getMemberSpaceLimitsChangePolicyValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY) {
            return this.memberSpaceLimitsChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSpaceLimitsRemoveException() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION;
    }

    public static EventType memberSpaceLimitsRemoveException(MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionType) {
        if (memberSpaceLimitsRemoveExceptionType != null) {
            return new EventType().withTagAndMemberSpaceLimitsRemoveException(Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION, memberSpaceLimitsRemoveExceptionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSpaceLimitsRemoveExceptionType getMemberSpaceLimitsRemoveExceptionValue() {
        if (this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION) {
            return this.memberSpaceLimitsRemoveExceptionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMemberSuggestionsChangePolicy() {
        return this._tag == Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY;
    }

    public static EventType memberSuggestionsChangePolicy(MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyType) {
        if (memberSuggestionsChangePolicyType != null) {
            return new EventType().withTagAndMemberSuggestionsChangePolicy(Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY, memberSuggestionsChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MemberSuggestionsChangePolicyType getMemberSuggestionsChangePolicyValue() {
        if (this._tag == Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY) {
            return this.memberSuggestionsChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isMicrosoftOfficeAddinChangePolicy() {
        return this._tag == Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY;
    }

    public static EventType microsoftOfficeAddinChangePolicy(MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyType) {
        if (microsoftOfficeAddinChangePolicyType != null) {
            return new EventType().withTagAndMicrosoftOfficeAddinChangePolicy(Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY, microsoftOfficeAddinChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public MicrosoftOfficeAddinChangePolicyType getMicrosoftOfficeAddinChangePolicyValue() {
        if (this._tag == Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY) {
            return this.microsoftOfficeAddinChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isNetworkControlChangePolicy() {
        return this._tag == Tag.NETWORK_CONTROL_CHANGE_POLICY;
    }

    public static EventType networkControlChangePolicy(NetworkControlChangePolicyType networkControlChangePolicyType) {
        if (networkControlChangePolicyType != null) {
            return new EventType().withTagAndNetworkControlChangePolicy(Tag.NETWORK_CONTROL_CHANGE_POLICY, networkControlChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public NetworkControlChangePolicyType getNetworkControlChangePolicyValue() {
        if (this._tag == Tag.NETWORK_CONTROL_CHANGE_POLICY) {
            return this.networkControlChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.NETWORK_CONTROL_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperChangeDeploymentPolicy() {
        return this._tag == Tag.PAPER_CHANGE_DEPLOYMENT_POLICY;
    }

    public static EventType paperChangeDeploymentPolicy(PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyType) {
        if (paperChangeDeploymentPolicyType != null) {
            return new EventType().withTagAndPaperChangeDeploymentPolicy(Tag.PAPER_CHANGE_DEPLOYMENT_POLICY, paperChangeDeploymentPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperChangeDeploymentPolicyType getPaperChangeDeploymentPolicyValue() {
        if (this._tag == Tag.PAPER_CHANGE_DEPLOYMENT_POLICY) {
            return this.paperChangeDeploymentPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CHANGE_DEPLOYMENT_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperChangeMemberLinkPolicy() {
        return this._tag == Tag.PAPER_CHANGE_MEMBER_LINK_POLICY;
    }

    public static EventType paperChangeMemberLinkPolicy(PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyType) {
        if (paperChangeMemberLinkPolicyType != null) {
            return new EventType().withTagAndPaperChangeMemberLinkPolicy(Tag.PAPER_CHANGE_MEMBER_LINK_POLICY, paperChangeMemberLinkPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperChangeMemberLinkPolicyType getPaperChangeMemberLinkPolicyValue() {
        if (this._tag == Tag.PAPER_CHANGE_MEMBER_LINK_POLICY) {
            return this.paperChangeMemberLinkPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CHANGE_MEMBER_LINK_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperChangeMemberPolicy() {
        return this._tag == Tag.PAPER_CHANGE_MEMBER_POLICY;
    }

    public static EventType paperChangeMemberPolicy(PaperChangeMemberPolicyType paperChangeMemberPolicyType) {
        if (paperChangeMemberPolicyType != null) {
            return new EventType().withTagAndPaperChangeMemberPolicy(Tag.PAPER_CHANGE_MEMBER_POLICY, paperChangeMemberPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperChangeMemberPolicyType getPaperChangeMemberPolicyValue() {
        if (this._tag == Tag.PAPER_CHANGE_MEMBER_POLICY) {
            return this.paperChangeMemberPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CHANGE_MEMBER_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperChangePolicy() {
        return this._tag == Tag.PAPER_CHANGE_POLICY;
    }

    public static EventType paperChangePolicy(PaperChangePolicyType paperChangePolicyType) {
        if (paperChangePolicyType != null) {
            return new EventType().withTagAndPaperChangePolicy(Tag.PAPER_CHANGE_POLICY, paperChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperChangePolicyType getPaperChangePolicyValue() {
        if (this._tag == Tag.PAPER_CHANGE_POLICY) {
            return this.paperChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperEnabledUsersGroupAddition() {
        return this._tag == Tag.PAPER_ENABLED_USERS_GROUP_ADDITION;
    }

    public static EventType paperEnabledUsersGroupAddition(PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionType) {
        if (paperEnabledUsersGroupAdditionType != null) {
            return new EventType().withTagAndPaperEnabledUsersGroupAddition(Tag.PAPER_ENABLED_USERS_GROUP_ADDITION, paperEnabledUsersGroupAdditionType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperEnabledUsersGroupAdditionType getPaperEnabledUsersGroupAdditionValue() {
        if (this._tag == Tag.PAPER_ENABLED_USERS_GROUP_ADDITION) {
            return this.paperEnabledUsersGroupAdditionValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_ENABLED_USERS_GROUP_ADDITION, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPaperEnabledUsersGroupRemoval() {
        return this._tag == Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL;
    }

    public static EventType paperEnabledUsersGroupRemoval(PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalType) {
        if (paperEnabledUsersGroupRemovalType != null) {
            return new EventType().withTagAndPaperEnabledUsersGroupRemoval(Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL, paperEnabledUsersGroupRemovalType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PaperEnabledUsersGroupRemovalType getPaperEnabledUsersGroupRemovalValue() {
        if (this._tag == Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL) {
            return this.paperEnabledUsersGroupRemovalValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isPermanentDeleteChangePolicy() {
        return this._tag == Tag.PERMANENT_DELETE_CHANGE_POLICY;
    }

    public static EventType permanentDeleteChangePolicy(PermanentDeleteChangePolicyType permanentDeleteChangePolicyType) {
        if (permanentDeleteChangePolicyType != null) {
            return new EventType().withTagAndPermanentDeleteChangePolicy(Tag.PERMANENT_DELETE_CHANGE_POLICY, permanentDeleteChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public PermanentDeleteChangePolicyType getPermanentDeleteChangePolicyValue() {
        if (this._tag == Tag.PERMANENT_DELETE_CHANGE_POLICY) {
            return this.permanentDeleteChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.PERMANENT_DELETE_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharingChangeFolderJoinPolicy() {
        return this._tag == Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY;
    }

    public static EventType sharingChangeFolderJoinPolicy(SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyType) {
        if (sharingChangeFolderJoinPolicyType != null) {
            return new EventType().withTagAndSharingChangeFolderJoinPolicy(Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY, sharingChangeFolderJoinPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharingChangeFolderJoinPolicyType getSharingChangeFolderJoinPolicyValue() {
        if (this._tag == Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY) {
            return this.sharingChangeFolderJoinPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharingChangeLinkPolicy() {
        return this._tag == Tag.SHARING_CHANGE_LINK_POLICY;
    }

    public static EventType sharingChangeLinkPolicy(SharingChangeLinkPolicyType sharingChangeLinkPolicyType) {
        if (sharingChangeLinkPolicyType != null) {
            return new EventType().withTagAndSharingChangeLinkPolicy(Tag.SHARING_CHANGE_LINK_POLICY, sharingChangeLinkPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharingChangeLinkPolicyType getSharingChangeLinkPolicyValue() {
        if (this._tag == Tag.SHARING_CHANGE_LINK_POLICY) {
            return this.sharingChangeLinkPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARING_CHANGE_LINK_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSharingChangeMemberPolicy() {
        return this._tag == Tag.SHARING_CHANGE_MEMBER_POLICY;
    }

    public static EventType sharingChangeMemberPolicy(SharingChangeMemberPolicyType sharingChangeMemberPolicyType) {
        if (sharingChangeMemberPolicyType != null) {
            return new EventType().withTagAndSharingChangeMemberPolicy(Tag.SHARING_CHANGE_MEMBER_POLICY, sharingChangeMemberPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SharingChangeMemberPolicyType getSharingChangeMemberPolicyValue() {
        if (this._tag == Tag.SHARING_CHANGE_MEMBER_POLICY) {
            return this.sharingChangeMemberPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHARING_CHANGE_MEMBER_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseChangeDownloadPolicy() {
        return this._tag == Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY;
    }

    public static EventType showcaseChangeDownloadPolicy(ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyType) {
        if (showcaseChangeDownloadPolicyType != null) {
            return new EventType().withTagAndShowcaseChangeDownloadPolicy(Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY, showcaseChangeDownloadPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseChangeDownloadPolicyType getShowcaseChangeDownloadPolicyValue() {
        if (this._tag == Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY) {
            return this.showcaseChangeDownloadPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseChangeEnabledPolicy() {
        return this._tag == Tag.SHOWCASE_CHANGE_ENABLED_POLICY;
    }

    public static EventType showcaseChangeEnabledPolicy(ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyType) {
        if (showcaseChangeEnabledPolicyType != null) {
            return new EventType().withTagAndShowcaseChangeEnabledPolicy(Tag.SHOWCASE_CHANGE_ENABLED_POLICY, showcaseChangeEnabledPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseChangeEnabledPolicyType getShowcaseChangeEnabledPolicyValue() {
        if (this._tag == Tag.SHOWCASE_CHANGE_ENABLED_POLICY) {
            return this.showcaseChangeEnabledPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_CHANGE_ENABLED_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isShowcaseChangeExternalSharingPolicy() {
        return this._tag == Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY;
    }

    public static EventType showcaseChangeExternalSharingPolicy(ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyType) {
        if (showcaseChangeExternalSharingPolicyType != null) {
            return new EventType().withTagAndShowcaseChangeExternalSharingPolicy(Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY, showcaseChangeExternalSharingPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ShowcaseChangeExternalSharingPolicyType getShowcaseChangeExternalSharingPolicyValue() {
        if (this._tag == Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY) {
            return this.showcaseChangeExternalSharingPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSmartSyncChangePolicy() {
        return this._tag == Tag.SMART_SYNC_CHANGE_POLICY;
    }

    public static EventType smartSyncChangePolicy(SmartSyncChangePolicyType smartSyncChangePolicyType) {
        if (smartSyncChangePolicyType != null) {
            return new EventType().withTagAndSmartSyncChangePolicy(Tag.SMART_SYNC_CHANGE_POLICY, smartSyncChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SmartSyncChangePolicyType getSmartSyncChangePolicyValue() {
        if (this._tag == Tag.SMART_SYNC_CHANGE_POLICY) {
            return this.smartSyncChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SMART_SYNC_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSmartSyncNotOptOut() {
        return this._tag == Tag.SMART_SYNC_NOT_OPT_OUT;
    }

    public static EventType smartSyncNotOptOut(SmartSyncNotOptOutType smartSyncNotOptOutType) {
        if (smartSyncNotOptOutType != null) {
            return new EventType().withTagAndSmartSyncNotOptOut(Tag.SMART_SYNC_NOT_OPT_OUT, smartSyncNotOptOutType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SmartSyncNotOptOutType getSmartSyncNotOptOutValue() {
        if (this._tag == Tag.SMART_SYNC_NOT_OPT_OUT) {
            return this.smartSyncNotOptOutValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SMART_SYNC_NOT_OPT_OUT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSmartSyncOptOut() {
        return this._tag == Tag.SMART_SYNC_OPT_OUT;
    }

    public static EventType smartSyncOptOut(SmartSyncOptOutType smartSyncOptOutType) {
        if (smartSyncOptOutType != null) {
            return new EventType().withTagAndSmartSyncOptOut(Tag.SMART_SYNC_OPT_OUT, smartSyncOptOutType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SmartSyncOptOutType getSmartSyncOptOutValue() {
        if (this._tag == Tag.SMART_SYNC_OPT_OUT) {
            return this.smartSyncOptOutValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SMART_SYNC_OPT_OUT, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isSsoChangePolicy() {
        return this._tag == Tag.SSO_CHANGE_POLICY;
    }

    public static EventType ssoChangePolicy(SsoChangePolicyType ssoChangePolicyType) {
        if (ssoChangePolicyType != null) {
            return new EventType().withTagAndSsoChangePolicy(Tag.SSO_CHANGE_POLICY, ssoChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public SsoChangePolicyType getSsoChangePolicyValue() {
        if (this._tag == Tag.SSO_CHANGE_POLICY) {
            return this.ssoChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.SSO_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamSelectiveSyncPolicyChanged() {
        return this._tag == Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED;
    }

    public static EventType teamSelectiveSyncPolicyChanged(TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedType) {
        if (teamSelectiveSyncPolicyChangedType != null) {
            return new EventType().withTagAndTeamSelectiveSyncPolicyChanged(Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED, teamSelectiveSyncPolicyChangedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamSelectiveSyncPolicyChangedType getTeamSelectiveSyncPolicyChangedValue() {
        if (this._tag == Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED) {
            return this.teamSelectiveSyncPolicyChangedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaChangePolicy() {
        return this._tag == Tag.TFA_CHANGE_POLICY;
    }

    public static EventType tfaChangePolicy(TfaChangePolicyType tfaChangePolicyType) {
        if (tfaChangePolicyType != null) {
            return new EventType().withTagAndTfaChangePolicy(Tag.TFA_CHANGE_POLICY, tfaChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaChangePolicyType getTfaChangePolicyValue() {
        if (this._tag == Tag.TFA_CHANGE_POLICY) {
            return this.tfaChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTwoAccountChangePolicy() {
        return this._tag == Tag.TWO_ACCOUNT_CHANGE_POLICY;
    }

    public static EventType twoAccountChangePolicy(TwoAccountChangePolicyType twoAccountChangePolicyType) {
        if (twoAccountChangePolicyType != null) {
            return new EventType().withTagAndTwoAccountChangePolicy(Tag.TWO_ACCOUNT_CHANGE_POLICY, twoAccountChangePolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TwoAccountChangePolicyType getTwoAccountChangePolicyValue() {
        if (this._tag == Tag.TWO_ACCOUNT_CHANGE_POLICY) {
            return this.twoAccountChangePolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TWO_ACCOUNT_CHANGE_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isViewerInfoPolicyChanged() {
        return this._tag == Tag.VIEWER_INFO_POLICY_CHANGED;
    }

    public static EventType viewerInfoPolicyChanged(ViewerInfoPolicyChangedType viewerInfoPolicyChangedType) {
        if (viewerInfoPolicyChangedType != null) {
            return new EventType().withTagAndViewerInfoPolicyChanged(Tag.VIEWER_INFO_POLICY_CHANGED, viewerInfoPolicyChangedType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public ViewerInfoPolicyChangedType getViewerInfoPolicyChangedValue() {
        if (this._tag == Tag.VIEWER_INFO_POLICY_CHANGED) {
            return this.viewerInfoPolicyChangedValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.VIEWER_INFO_POLICY_CHANGED, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isWebSessionsChangeFixedLengthPolicy() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY;
    }

    public static EventType webSessionsChangeFixedLengthPolicy(WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyType) {
        if (webSessionsChangeFixedLengthPolicyType != null) {
            return new EventType().withTagAndWebSessionsChangeFixedLengthPolicy(Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY, webSessionsChangeFixedLengthPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public WebSessionsChangeFixedLengthPolicyType getWebSessionsChangeFixedLengthPolicyValue() {
        if (this._tag == Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY) {
            return this.webSessionsChangeFixedLengthPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isWebSessionsChangeIdleLengthPolicy() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY;
    }

    public static EventType webSessionsChangeIdleLengthPolicy(WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyType) {
        if (webSessionsChangeIdleLengthPolicyType != null) {
            return new EventType().withTagAndWebSessionsChangeIdleLengthPolicy(Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY, webSessionsChangeIdleLengthPolicyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public WebSessionsChangeIdleLengthPolicyType getWebSessionsChangeIdleLengthPolicyValue() {
        if (this._tag == Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY) {
            return this.webSessionsChangeIdleLengthPolicyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamMergeFrom() {
        return this._tag == Tag.TEAM_MERGE_FROM;
    }

    public static EventType teamMergeFrom(TeamMergeFromType teamMergeFromType) {
        if (teamMergeFromType != null) {
            return new EventType().withTagAndTeamMergeFrom(Tag.TEAM_MERGE_FROM, teamMergeFromType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamMergeFromType getTeamMergeFromValue() {
        if (this._tag == Tag.TEAM_MERGE_FROM) {
            return this.teamMergeFromValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_MERGE_FROM, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamMergeTo() {
        return this._tag == Tag.TEAM_MERGE_TO;
    }

    public static EventType teamMergeTo(TeamMergeToType teamMergeToType) {
        if (teamMergeToType != null) {
            return new EventType().withTagAndTeamMergeTo(Tag.TEAM_MERGE_TO, teamMergeToType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamMergeToType getTeamMergeToValue() {
        if (this._tag == Tag.TEAM_MERGE_TO) {
            return this.teamMergeToValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_MERGE_TO, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamProfileAddLogo() {
        return this._tag == Tag.TEAM_PROFILE_ADD_LOGO;
    }

    public static EventType teamProfileAddLogo(TeamProfileAddLogoType teamProfileAddLogoType) {
        if (teamProfileAddLogoType != null) {
            return new EventType().withTagAndTeamProfileAddLogo(Tag.TEAM_PROFILE_ADD_LOGO, teamProfileAddLogoType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamProfileAddLogoType getTeamProfileAddLogoValue() {
        if (this._tag == Tag.TEAM_PROFILE_ADD_LOGO) {
            return this.teamProfileAddLogoValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_PROFILE_ADD_LOGO, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamProfileChangeDefaultLanguage() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE;
    }

    public static EventType teamProfileChangeDefaultLanguage(TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageType) {
        if (teamProfileChangeDefaultLanguageType != null) {
            return new EventType().withTagAndTeamProfileChangeDefaultLanguage(Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE, teamProfileChangeDefaultLanguageType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamProfileChangeDefaultLanguageType getTeamProfileChangeDefaultLanguageValue() {
        if (this._tag == Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE) {
            return this.teamProfileChangeDefaultLanguageValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamProfileChangeLogo() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_LOGO;
    }

    public static EventType teamProfileChangeLogo(TeamProfileChangeLogoType teamProfileChangeLogoType) {
        if (teamProfileChangeLogoType != null) {
            return new EventType().withTagAndTeamProfileChangeLogo(Tag.TEAM_PROFILE_CHANGE_LOGO, teamProfileChangeLogoType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamProfileChangeLogoType getTeamProfileChangeLogoValue() {
        if (this._tag == Tag.TEAM_PROFILE_CHANGE_LOGO) {
            return this.teamProfileChangeLogoValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_LOGO, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamProfileChangeName() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_NAME;
    }

    public static EventType teamProfileChangeName(TeamProfileChangeNameType teamProfileChangeNameType) {
        if (teamProfileChangeNameType != null) {
            return new EventType().withTagAndTeamProfileChangeName(Tag.TEAM_PROFILE_CHANGE_NAME, teamProfileChangeNameType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamProfileChangeNameType getTeamProfileChangeNameValue() {
        if (this._tag == Tag.TEAM_PROFILE_CHANGE_NAME) {
            return this.teamProfileChangeNameValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_NAME, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTeamProfileRemoveLogo() {
        return this._tag == Tag.TEAM_PROFILE_REMOVE_LOGO;
    }

    public static EventType teamProfileRemoveLogo(TeamProfileRemoveLogoType teamProfileRemoveLogoType) {
        if (teamProfileRemoveLogoType != null) {
            return new EventType().withTagAndTeamProfileRemoveLogo(Tag.TEAM_PROFILE_REMOVE_LOGO, teamProfileRemoveLogoType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TeamProfileRemoveLogoType getTeamProfileRemoveLogoValue() {
        if (this._tag == Tag.TEAM_PROFILE_REMOVE_LOGO) {
            return this.teamProfileRemoveLogoValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TEAM_PROFILE_REMOVE_LOGO, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaAddBackupPhone() {
        return this._tag == Tag.TFA_ADD_BACKUP_PHONE;
    }

    public static EventType tfaAddBackupPhone(TfaAddBackupPhoneType tfaAddBackupPhoneType) {
        if (tfaAddBackupPhoneType != null) {
            return new EventType().withTagAndTfaAddBackupPhone(Tag.TFA_ADD_BACKUP_PHONE, tfaAddBackupPhoneType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaAddBackupPhoneType getTfaAddBackupPhoneValue() {
        if (this._tag == Tag.TFA_ADD_BACKUP_PHONE) {
            return this.tfaAddBackupPhoneValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_ADD_BACKUP_PHONE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaAddSecurityKey() {
        return this._tag == Tag.TFA_ADD_SECURITY_KEY;
    }

    public static EventType tfaAddSecurityKey(TfaAddSecurityKeyType tfaAddSecurityKeyType) {
        if (tfaAddSecurityKeyType != null) {
            return new EventType().withTagAndTfaAddSecurityKey(Tag.TFA_ADD_SECURITY_KEY, tfaAddSecurityKeyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaAddSecurityKeyType getTfaAddSecurityKeyValue() {
        if (this._tag == Tag.TFA_ADD_SECURITY_KEY) {
            return this.tfaAddSecurityKeyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_ADD_SECURITY_KEY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaChangeBackupPhone() {
        return this._tag == Tag.TFA_CHANGE_BACKUP_PHONE;
    }

    public static EventType tfaChangeBackupPhone(TfaChangeBackupPhoneType tfaChangeBackupPhoneType) {
        if (tfaChangeBackupPhoneType != null) {
            return new EventType().withTagAndTfaChangeBackupPhone(Tag.TFA_CHANGE_BACKUP_PHONE, tfaChangeBackupPhoneType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaChangeBackupPhoneType getTfaChangeBackupPhoneValue() {
        if (this._tag == Tag.TFA_CHANGE_BACKUP_PHONE) {
            return this.tfaChangeBackupPhoneValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_CHANGE_BACKUP_PHONE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaChangeStatus() {
        return this._tag == Tag.TFA_CHANGE_STATUS;
    }

    public static EventType tfaChangeStatus(TfaChangeStatusType tfaChangeStatusType) {
        if (tfaChangeStatusType != null) {
            return new EventType().withTagAndTfaChangeStatus(Tag.TFA_CHANGE_STATUS, tfaChangeStatusType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaChangeStatusType getTfaChangeStatusValue() {
        if (this._tag == Tag.TFA_CHANGE_STATUS) {
            return this.tfaChangeStatusValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_CHANGE_STATUS, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaRemoveBackupPhone() {
        return this._tag == Tag.TFA_REMOVE_BACKUP_PHONE;
    }

    public static EventType tfaRemoveBackupPhone(TfaRemoveBackupPhoneType tfaRemoveBackupPhoneType) {
        if (tfaRemoveBackupPhoneType != null) {
            return new EventType().withTagAndTfaRemoveBackupPhone(Tag.TFA_REMOVE_BACKUP_PHONE, tfaRemoveBackupPhoneType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaRemoveBackupPhoneType getTfaRemoveBackupPhoneValue() {
        if (this._tag == Tag.TFA_REMOVE_BACKUP_PHONE) {
            return this.tfaRemoveBackupPhoneValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_REMOVE_BACKUP_PHONE, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaRemoveSecurityKey() {
        return this._tag == Tag.TFA_REMOVE_SECURITY_KEY;
    }

    public static EventType tfaRemoveSecurityKey(TfaRemoveSecurityKeyType tfaRemoveSecurityKeyType) {
        if (tfaRemoveSecurityKeyType != null) {
            return new EventType().withTagAndTfaRemoveSecurityKey(Tag.TFA_REMOVE_SECURITY_KEY, tfaRemoveSecurityKeyType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaRemoveSecurityKeyType getTfaRemoveSecurityKeyValue() {
        if (this._tag == Tag.TFA_REMOVE_SECURITY_KEY) {
            return this.tfaRemoveSecurityKeyValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_REMOVE_SECURITY_KEY, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isTfaReset() {
        return this._tag == Tag.TFA_RESET;
    }

    public static EventType tfaReset(TfaResetType tfaResetType) {
        if (tfaResetType != null) {
            return new EventType().withTagAndTfaReset(Tag.TFA_RESET, tfaResetType);
        }
        throw new IllegalArgumentException("Value is null");
    }

    public TfaResetType getTfaResetValue() {
        if (this._tag == Tag.TFA_RESET) {
            return this.tfaResetValue;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Invalid tag: required Tag.TFA_RESET, but was Tag.");
        sb.append(this._tag.name());
        throw new IllegalStateException(sb.toString());
    }

    public boolean isOther() {
        return this._tag == Tag.OTHER;
    }

    public int hashCode() {
        Object[] objArr = new Object[XmppError.XmppError_Redirect];
        objArr[0] = this._tag;
        objArr[1] = this.appLinkTeamValue;
        objArr[2] = this.appLinkUserValue;
        objArr[3] = this.appUnlinkTeamValue;
        objArr[4] = this.appUnlinkUserValue;
        objArr[5] = this.fileAddCommentValue;
        objArr[6] = this.fileChangeCommentSubscriptionValue;
        objArr[7] = this.fileDeleteCommentValue;
        objArr[8] = this.fileLikeCommentValue;
        objArr[9] = this.fileResolveCommentValue;
        objArr[10] = this.fileUnlikeCommentValue;
        objArr[11] = this.fileUnresolveCommentValue;
        objArr[12] = this.deviceChangeIpDesktopValue;
        objArr[13] = this.deviceChangeIpMobileValue;
        objArr[14] = this.deviceChangeIpWebValue;
        objArr[15] = this.deviceDeleteOnUnlinkFailValue;
        objArr[16] = this.deviceDeleteOnUnlinkSuccessValue;
        objArr[17] = this.deviceLinkFailValue;
        objArr[18] = this.deviceLinkSuccessValue;
        objArr[19] = this.deviceManagementDisabledValue;
        objArr[20] = this.deviceManagementEnabledValue;
        objArr[21] = this.deviceUnlinkValue;
        objArr[22] = this.emmRefreshAuthTokenValue;
        objArr[23] = this.accountCaptureChangeAvailabilityValue;
        objArr[24] = this.accountCaptureMigrateAccountValue;
        objArr[25] = this.accountCaptureNotificationEmailsSentValue;
        objArr[26] = this.accountCaptureRelinquishAccountValue;
        objArr[27] = this.disabledDomainInvitesValue;
        objArr[28] = this.domainInvitesApproveRequestToJoinTeamValue;
        objArr[29] = this.domainInvitesDeclineRequestToJoinTeamValue;
        objArr[30] = this.domainInvitesEmailExistingUsersValue;
        objArr[31] = this.domainInvitesRequestToJoinTeamValue;
        objArr[32] = this.domainInvitesSetInviteNewUserPrefToNoValue;
        objArr[33] = this.domainInvitesSetInviteNewUserPrefToYesValue;
        objArr[34] = this.domainVerificationAddDomainFailValue;
        objArr[35] = this.domainVerificationAddDomainSuccessValue;
        objArr[36] = this.domainVerificationRemoveDomainValue;
        objArr[37] = this.enabledDomainInvitesValue;
        objArr[38] = this.createFolderValue;
        objArr[39] = this.fileAddValue;
        objArr[40] = this.fileCopyValue;
        objArr[41] = this.fileDeleteValue;
        objArr[42] = this.fileDownloadValue;
        objArr[43] = this.fileEditValue;
        objArr[44] = this.fileGetCopyReferenceValue;
        objArr[45] = this.fileMoveValue;
        objArr[46] = this.filePermanentlyDeleteValue;
        objArr[47] = this.filePreviewValue;
        objArr[48] = this.fileRenameValue;
        objArr[49] = this.fileRestoreValue;
        objArr[50] = this.fileRevertValue;
        objArr[51] = this.fileRollbackChangesValue;
        objArr[52] = this.fileSaveCopyReferenceValue;
        objArr[53] = this.fileRequestChangeValue;
        objArr[54] = this.fileRequestCloseValue;
        objArr[55] = this.fileRequestCreateValue;
        objArr[56] = this.fileRequestReceiveFileValue;
        objArr[57] = this.groupAddExternalIdValue;
        objArr[58] = this.groupAddMemberValue;
        objArr[59] = this.groupChangeExternalIdValue;
        objArr[60] = this.groupChangeManagementTypeValue;
        objArr[61] = this.groupChangeMemberRoleValue;
        objArr[62] = this.groupCreateValue;
        objArr[63] = this.groupDeleteValue;
        objArr[64] = this.groupDescriptionUpdatedValue;
        objArr[65] = this.groupJoinPolicyUpdatedValue;
        objArr[66] = this.groupMovedValue;
        objArr[67] = this.groupRemoveExternalIdValue;
        objArr[68] = this.groupRemoveMemberValue;
        objArr[69] = this.groupRenameValue;
        objArr[70] = this.emmErrorValue;
        objArr[71] = this.loginFailValue;
        objArr[72] = this.loginSuccessValue;
        objArr[73] = this.logoutValue;
        objArr[74] = this.resellerSupportSessionEndValue;
        objArr[75] = this.resellerSupportSessionStartValue;
        objArr[76] = this.signInAsSessionEndValue;
        objArr[77] = this.signInAsSessionStartValue;
        objArr[78] = this.ssoErrorValue;
        objArr[79] = this.memberAddNameValue;
        objArr[80] = this.memberChangeAdminRoleValue;
        objArr[81] = this.memberChangeEmailValue;
        objArr[82] = this.memberChangeMembershipTypeValue;
        objArr[83] = this.memberChangeNameValue;
        objArr[84] = this.memberChangeStatusValue;
        objArr[85] = this.memberDeleteManualContactsValue;
        objArr[86] = this.memberPermanentlyDeleteAccountContentsValue;
        objArr[87] = this.memberSpaceLimitsAddCustomQuotaValue;
        objArr[88] = this.memberSpaceLimitsChangeCustomQuotaValue;
        objArr[89] = this.memberSpaceLimitsChangeStatusValue;
        objArr[90] = this.memberSpaceLimitsRemoveCustomQuotaValue;
        objArr[91] = this.memberSuggestValue;
        objArr[92] = this.memberTransferAccountContentsValue;
        objArr[93] = this.secondaryMailsPolicyChangedValue;
        objArr[94] = this.paperContentAddMemberValue;
        objArr[95] = this.paperContentAddToFolderValue;
        objArr[96] = this.paperContentArchiveValue;
        objArr[97] = this.paperContentCreateValue;
        objArr[98] = this.paperContentPermanentlyDeleteValue;
        objArr[99] = this.paperContentRemoveFromFolderValue;
        objArr[100] = this.paperContentRemoveMemberValue;
        objArr[101] = this.paperContentRenameValue;
        objArr[102] = this.paperContentRestoreValue;
        objArr[103] = this.paperDocAddCommentValue;
        objArr[104] = this.paperDocChangeMemberRoleValue;
        objArr[105] = this.paperDocChangeSharingPolicyValue;
        objArr[106] = this.paperDocChangeSubscriptionValue;
        objArr[107] = this.paperDocDeletedValue;
        objArr[108] = this.paperDocDeleteCommentValue;
        objArr[109] = this.paperDocDownloadValue;
        objArr[110] = this.paperDocEditValue;
        objArr[111] = this.paperDocEditCommentValue;
        objArr[112] = this.paperDocFollowedValue;
        objArr[113] = this.paperDocMentionValue;
        objArr[114] = this.paperDocOwnershipChangedValue;
        objArr[115] = this.paperDocRequestAccessValue;
        objArr[116] = this.paperDocResolveCommentValue;
        objArr[117] = this.paperDocRevertValue;
        objArr[118] = this.paperDocSlackShareValue;
        objArr[119] = this.paperDocTeamInviteValue;
        objArr[120] = this.paperDocTrashedValue;
        objArr[121] = this.paperDocUnresolveCommentValue;
        objArr[122] = this.paperDocUntrashedValue;
        objArr[123] = this.paperDocViewValue;
        objArr[124] = this.paperExternalViewAllowValue;
        objArr[125] = this.paperExternalViewDefaultTeamValue;
        objArr[126] = this.paperExternalViewForbidValue;
        objArr[127] = this.paperFolderChangeSubscriptionValue;
        objArr[128] = this.paperFolderDeletedValue;
        objArr[129] = this.paperFolderFollowedValue;
        objArr[130] = this.paperFolderTeamInviteValue;
        objArr[131] = this.passwordChangeValue;
        objArr[132] = this.passwordResetValue;
        objArr[133] = this.passwordResetAllValue;
        objArr[134] = this.emmCreateExceptionsReportValue;
        objArr[135] = this.emmCreateUsageReportValue;
        objArr[136] = this.exportMembersReportValue;
        objArr[137] = this.paperAdminExportStartValue;
        objArr[138] = this.smartSyncCreateAdminPrivilegeReportValue;
        objArr[139] = this.teamActivityCreateReportValue;
        objArr[140] = this.collectionShareValue;
        objArr[141] = this.noteAclInviteOnlyValue;
        objArr[142] = this.noteAclLinkValue;
        objArr[143] = this.noteAclTeamLinkValue;
        objArr[144] = this.noteSharedValue;
        objArr[145] = this.noteShareReceiveValue;
        objArr[146] = this.openNoteSharedValue;
        objArr[147] = this.sfAddGroupValue;
        objArr[148] = this.sfAllowNonMembersToViewSharedLinksValue;
        objArr[149] = this.sfExternalInviteWarnValue;
        objArr[150] = this.sfFbInviteValue;
        objArr[151] = this.sfFbInviteChangeRoleValue;
        objArr[152] = this.sfFbUninviteValue;
        objArr[153] = this.sfInviteGroupValue;
        objArr[154] = this.sfTeamGrantAccessValue;
        objArr[155] = this.sfTeamInviteValue;
        objArr[156] = this.sfTeamInviteChangeRoleValue;
        objArr[157] = this.sfTeamJoinValue;
        objArr[158] = this.sfTeamJoinFromOobLinkValue;
        objArr[159] = this.sfTeamUninviteValue;
        objArr[160] = this.sharedContentAddInviteesValue;
        objArr[161] = this.sharedContentAddLinkExpiryValue;
        objArr[162] = this.sharedContentAddLinkPasswordValue;
        objArr[163] = this.sharedContentAddMemberValue;
        objArr[164] = this.sharedContentChangeDownloadsPolicyValue;
        objArr[165] = this.sharedContentChangeInviteeRoleValue;
        objArr[166] = this.sharedContentChangeLinkAudienceValue;
        objArr[167] = this.sharedContentChangeLinkExpiryValue;
        objArr[168] = this.sharedContentChangeLinkPasswordValue;
        objArr[169] = this.sharedContentChangeMemberRoleValue;
        objArr[170] = this.sharedContentChangeViewerInfoPolicyValue;
        objArr[171] = this.sharedContentClaimInvitationValue;
        objArr[172] = this.sharedContentCopyValue;
        objArr[173] = this.sharedContentDownloadValue;
        objArr[174] = this.sharedContentRelinquishMembershipValue;
        objArr[175] = this.sharedContentRemoveInviteesValue;
        objArr[176] = this.sharedContentRemoveLinkExpiryValue;
        objArr[177] = this.sharedContentRemoveLinkPasswordValue;
        objArr[178] = this.sharedContentRemoveMemberValue;
        objArr[179] = this.sharedContentRequestAccessValue;
        objArr[180] = this.sharedContentUnshareValue;
        objArr[181] = this.sharedContentViewValue;
        objArr[182] = this.sharedFolderChangeLinkPolicyValue;
        objArr[183] = this.sharedFolderChangeMembersInheritancePolicyValue;
        objArr[184] = this.sharedFolderChangeMembersManagementPolicyValue;
        objArr[185] = this.sharedFolderChangeMembersPolicyValue;
        objArr[186] = this.sharedFolderCreateValue;
        objArr[187] = this.sharedFolderDeclineInvitationValue;
        objArr[188] = this.sharedFolderMountValue;
        objArr[189] = this.sharedFolderNestValue;
        objArr[190] = this.sharedFolderTransferOwnershipValue;
        objArr[191] = this.sharedFolderUnmountValue;
        objArr[192] = this.sharedLinkAddExpiryValue;
        objArr[193] = this.sharedLinkChangeExpiryValue;
        objArr[194] = this.sharedLinkChangeVisibilityValue;
        objArr[195] = this.sharedLinkCopyValue;
        objArr[196] = this.sharedLinkCreateValue;
        objArr[197] = this.sharedLinkDisableValue;
        objArr[198] = this.sharedLinkDownloadValue;
        objArr[199] = this.sharedLinkRemoveExpiryValue;
        objArr[200] = this.sharedLinkShareValue;
        objArr[201] = this.sharedLinkViewValue;
        objArr[202] = this.sharedNoteOpenedValue;
        objArr[203] = this.shmodelGroupShareValue;
        objArr[204] = this.showcaseAccessGrantedValue;
        objArr[205] = this.showcaseAddMemberValue;
        objArr[206] = this.showcaseArchivedValue;
        objArr[207] = this.showcaseCreatedValue;
        objArr[208] = this.showcaseDeleteCommentValue;
        objArr[209] = this.showcaseEditedValue;
        objArr[210] = this.showcaseEditCommentValue;
        objArr[211] = this.showcaseFileAddedValue;
        objArr[212] = this.showcaseFileDownloadValue;
        objArr[213] = this.showcaseFileRemovedValue;
        objArr[214] = this.showcaseFileViewValue;
        objArr[215] = this.showcasePermanentlyDeletedValue;
        objArr[216] = this.showcasePostCommentValue;
        objArr[217] = this.showcaseRemoveMemberValue;
        objArr[218] = this.showcaseRenamedValue;
        objArr[219] = this.showcaseRequestAccessValue;
        objArr[220] = this.showcaseResolveCommentValue;
        objArr[221] = this.showcaseRestoredValue;
        objArr[222] = this.showcaseTrashedValue;
        objArr[223] = this.showcaseTrashedDeprecatedValue;
        objArr[224] = this.showcaseUnresolveCommentValue;
        objArr[225] = this.showcaseUntrashedValue;
        objArr[226] = this.showcaseUntrashedDeprecatedValue;
        objArr[227] = this.showcaseViewValue;
        objArr[228] = this.ssoAddCertValue;
        objArr[229] = this.ssoAddLoginUrlValue;
        objArr[230] = this.ssoAddLogoutUrlValue;
        objArr[231] = this.ssoChangeCertValue;
        objArr[232] = this.ssoChangeLoginUrlValue;
        objArr[233] = this.ssoChangeLogoutUrlValue;
        objArr[234] = this.ssoChangeSamlIdentityModeValue;
        objArr[235] = this.ssoRemoveCertValue;
        objArr[236] = this.ssoRemoveLoginUrlValue;
        objArr[237] = this.ssoRemoveLogoutUrlValue;
        objArr[238] = this.teamFolderChangeStatusValue;
        objArr[239] = this.teamFolderCreateValue;
        objArr[240] = this.teamFolderDowngradeValue;
        objArr[241] = this.teamFolderPermanentlyDeleteValue;
        objArr[242] = this.teamFolderRenameValue;
        objArr[243] = this.teamSelectiveSyncSettingsChangedValue;
        objArr[244] = this.accountCaptureChangePolicyValue;
        objArr[245] = this.allowDownloadDisabledValue;
        objArr[246] = this.allowDownloadEnabledValue;
        objArr[247] = this.dataPlacementRestrictionChangePolicyValue;
        objArr[248] = this.dataPlacementRestrictionSatisfyPolicyValue;
        objArr[249] = this.deviceApprovalsChangeDesktopPolicyValue;
        objArr[250] = this.deviceApprovalsChangeMobilePolicyValue;
        objArr[251] = this.deviceApprovalsChangeOverageActionValue;
        objArr[252] = this.deviceApprovalsChangeUnlinkActionValue;
        objArr[253] = this.directoryRestrictionsAddMembersValue;
        objArr[254] = this.directoryRestrictionsRemoveMembersValue;
        objArr[255] = this.emmAddExceptionValue;
        objArr[256] = this.emmChangePolicyValue;
        objArr[257] = this.emmRemoveExceptionValue;
        objArr[258] = this.extendedVersionHistoryChangePolicyValue;
        objArr[259] = this.fileCommentsChangePolicyValue;
        objArr[260] = this.fileRequestsChangePolicyValue;
        objArr[261] = this.fileRequestsEmailsEnabledValue;
        objArr[262] = this.fileRequestsEmailsRestrictedToTeamOnlyValue;
        objArr[263] = this.googleSsoChangePolicyValue;
        objArr[264] = this.groupUserManagementChangePolicyValue;
        objArr[265] = this.memberRequestsChangePolicyValue;
        objArr[266] = this.memberSpaceLimitsAddExceptionValue;
        objArr[267] = this.memberSpaceLimitsChangeCapsTypePolicyValue;
        objArr[268] = this.memberSpaceLimitsChangePolicyValue;
        objArr[269] = this.memberSpaceLimitsRemoveExceptionValue;
        objArr[270] = this.memberSuggestionsChangePolicyValue;
        objArr[271] = this.microsoftOfficeAddinChangePolicyValue;
        objArr[272] = this.networkControlChangePolicyValue;
        objArr[273] = this.paperChangeDeploymentPolicyValue;
        objArr[274] = this.paperChangeMemberLinkPolicyValue;
        objArr[275] = this.paperChangeMemberPolicyValue;
        objArr[276] = this.paperChangePolicyValue;
        objArr[277] = this.paperEnabledUsersGroupAdditionValue;
        objArr[278] = this.paperEnabledUsersGroupRemovalValue;
        objArr[279] = this.permanentDeleteChangePolicyValue;
        objArr[280] = this.sharingChangeFolderJoinPolicyValue;
        objArr[281] = this.sharingChangeLinkPolicyValue;
        objArr[282] = this.sharingChangeMemberPolicyValue;
        objArr[283] = this.showcaseChangeDownloadPolicyValue;
        objArr[284] = this.showcaseChangeEnabledPolicyValue;
        objArr[285] = this.showcaseChangeExternalSharingPolicyValue;
        objArr[286] = this.smartSyncChangePolicyValue;
        objArr[287] = this.smartSyncNotOptOutValue;
        objArr[288] = this.smartSyncOptOutValue;
        objArr[289] = this.ssoChangePolicyValue;
        objArr[290] = this.teamSelectiveSyncPolicyChangedValue;
        objArr[291] = this.tfaChangePolicyValue;
        objArr[292] = this.twoAccountChangePolicyValue;
        objArr[293] = this.viewerInfoPolicyChangedValue;
        objArr[294] = this.webSessionsChangeFixedLengthPolicyValue;
        objArr[295] = this.webSessionsChangeIdleLengthPolicyValue;
        objArr[296] = this.teamMergeFromValue;
        objArr[297] = this.teamMergeToValue;
        objArr[298] = this.teamProfileAddLogoValue;
        objArr[299] = this.teamProfileChangeDefaultLanguageValue;
        objArr[300] = this.teamProfileChangeLogoValue;
        objArr[301] = this.teamProfileChangeNameValue;
        objArr[302] = this.teamProfileRemoveLogoValue;
        objArr[303] = this.tfaAddBackupPhoneValue;
        objArr[304] = this.tfaAddSecurityKeyValue;
        objArr[305] = this.tfaChangeBackupPhoneValue;
        objArr[306] = this.tfaChangeStatusValue;
        objArr[307] = this.tfaRemoveBackupPhoneValue;
        objArr[308] = this.tfaRemoveSecurityKeyValue;
        objArr[309] = this.tfaResetValue;
        return Arrays.hashCode(objArr);
    }

    public boolean equals(Object obj) {
        boolean z = 1;
        if (obj == this) {
            return true;
        }
        if (obj == null || !(obj instanceof EventType)) {
            return false;
        }
        EventType eventType = (EventType) obj;
        if (this._tag != eventType._tag) {
            return false;
        }
        switch (C08951.$SwitchMap$com$dropbox$core$v2$teamlog$EventType$Tag[this._tag.ordinal()]) {
            case 1:
                AppLinkTeamType appLinkTeamType = this.appLinkTeamValue;
                AppLinkTeamType appLinkTeamType2 = eventType.appLinkTeamValue;
                if (appLinkTeamType != appLinkTeamType2 && !appLinkTeamType.equals(appLinkTeamType2)) {
                    z = 0;
                }
                return z;
            case 2:
                AppLinkUserType appLinkUserType = this.appLinkUserValue;
                AppLinkUserType appLinkUserType2 = eventType.appLinkUserValue;
                if (appLinkUserType != appLinkUserType2 && !appLinkUserType.equals(appLinkUserType2)) {
                    z = 0;
                }
                return z;
            case 3:
                AppUnlinkTeamType appUnlinkTeamType = this.appUnlinkTeamValue;
                AppUnlinkTeamType appUnlinkTeamType2 = eventType.appUnlinkTeamValue;
                if (appUnlinkTeamType != appUnlinkTeamType2 && !appUnlinkTeamType.equals(appUnlinkTeamType2)) {
                    z = 0;
                }
                return z;
            case 4:
                AppUnlinkUserType appUnlinkUserType = this.appUnlinkUserValue;
                AppUnlinkUserType appUnlinkUserType2 = eventType.appUnlinkUserValue;
                if (appUnlinkUserType != appUnlinkUserType2 && !appUnlinkUserType.equals(appUnlinkUserType2)) {
                    z = 0;
                }
                return z;
            case 5:
                FileAddCommentType fileAddCommentType = this.fileAddCommentValue;
                FileAddCommentType fileAddCommentType2 = eventType.fileAddCommentValue;
                if (fileAddCommentType != fileAddCommentType2 && !fileAddCommentType.equals(fileAddCommentType2)) {
                    z = 0;
                }
                return z;
            case 6:
                FileChangeCommentSubscriptionType fileChangeCommentSubscriptionType = this.fileChangeCommentSubscriptionValue;
                FileChangeCommentSubscriptionType fileChangeCommentSubscriptionType2 = eventType.fileChangeCommentSubscriptionValue;
                if (fileChangeCommentSubscriptionType != fileChangeCommentSubscriptionType2 && !fileChangeCommentSubscriptionType.equals(fileChangeCommentSubscriptionType2)) {
                    z = 0;
                }
                return z;
            case 7:
                FileDeleteCommentType fileDeleteCommentType = this.fileDeleteCommentValue;
                FileDeleteCommentType fileDeleteCommentType2 = eventType.fileDeleteCommentValue;
                if (fileDeleteCommentType != fileDeleteCommentType2 && !fileDeleteCommentType.equals(fileDeleteCommentType2)) {
                    z = 0;
                }
                return z;
            case 8:
                FileLikeCommentType fileLikeCommentType = this.fileLikeCommentValue;
                FileLikeCommentType fileLikeCommentType2 = eventType.fileLikeCommentValue;
                if (fileLikeCommentType != fileLikeCommentType2 && !fileLikeCommentType.equals(fileLikeCommentType2)) {
                    z = 0;
                }
                return z;
            case 9:
                FileResolveCommentType fileResolveCommentType = this.fileResolveCommentValue;
                FileResolveCommentType fileResolveCommentType2 = eventType.fileResolveCommentValue;
                if (fileResolveCommentType != fileResolveCommentType2 && !fileResolveCommentType.equals(fileResolveCommentType2)) {
                    z = 0;
                }
                return z;
            case 10:
                FileUnlikeCommentType fileUnlikeCommentType = this.fileUnlikeCommentValue;
                FileUnlikeCommentType fileUnlikeCommentType2 = eventType.fileUnlikeCommentValue;
                if (fileUnlikeCommentType != fileUnlikeCommentType2 && !fileUnlikeCommentType.equals(fileUnlikeCommentType2)) {
                    z = 0;
                }
                return z;
            case 11:
                FileUnresolveCommentType fileUnresolveCommentType = this.fileUnresolveCommentValue;
                FileUnresolveCommentType fileUnresolveCommentType2 = eventType.fileUnresolveCommentValue;
                if (fileUnresolveCommentType != fileUnresolveCommentType2 && !fileUnresolveCommentType.equals(fileUnresolveCommentType2)) {
                    z = 0;
                }
                return z;
            case 12:
                DeviceChangeIpDesktopType deviceChangeIpDesktopType = this.deviceChangeIpDesktopValue;
                DeviceChangeIpDesktopType deviceChangeIpDesktopType2 = eventType.deviceChangeIpDesktopValue;
                if (deviceChangeIpDesktopType != deviceChangeIpDesktopType2 && !deviceChangeIpDesktopType.equals(deviceChangeIpDesktopType2)) {
                    z = 0;
                }
                return z;
            case 13:
                DeviceChangeIpMobileType deviceChangeIpMobileType = this.deviceChangeIpMobileValue;
                DeviceChangeIpMobileType deviceChangeIpMobileType2 = eventType.deviceChangeIpMobileValue;
                if (deviceChangeIpMobileType != deviceChangeIpMobileType2 && !deviceChangeIpMobileType.equals(deviceChangeIpMobileType2)) {
                    z = 0;
                }
                return z;
            case 14:
                DeviceChangeIpWebType deviceChangeIpWebType = this.deviceChangeIpWebValue;
                DeviceChangeIpWebType deviceChangeIpWebType2 = eventType.deviceChangeIpWebValue;
                if (deviceChangeIpWebType != deviceChangeIpWebType2 && !deviceChangeIpWebType.equals(deviceChangeIpWebType2)) {
                    z = 0;
                }
                return z;
            case 15:
                DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailType = this.deviceDeleteOnUnlinkFailValue;
                DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailType2 = eventType.deviceDeleteOnUnlinkFailValue;
                if (deviceDeleteOnUnlinkFailType != deviceDeleteOnUnlinkFailType2 && !deviceDeleteOnUnlinkFailType.equals(deviceDeleteOnUnlinkFailType2)) {
                    z = 0;
                }
                return z;
            case 16:
                DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessType = this.deviceDeleteOnUnlinkSuccessValue;
                DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessType2 = eventType.deviceDeleteOnUnlinkSuccessValue;
                if (deviceDeleteOnUnlinkSuccessType != deviceDeleteOnUnlinkSuccessType2 && !deviceDeleteOnUnlinkSuccessType.equals(deviceDeleteOnUnlinkSuccessType2)) {
                    z = 0;
                }
                return z;
            case 17:
                DeviceLinkFailType deviceLinkFailType = this.deviceLinkFailValue;
                DeviceLinkFailType deviceLinkFailType2 = eventType.deviceLinkFailValue;
                if (deviceLinkFailType != deviceLinkFailType2 && !deviceLinkFailType.equals(deviceLinkFailType2)) {
                    z = 0;
                }
                return z;
            case 18:
                DeviceLinkSuccessType deviceLinkSuccessType = this.deviceLinkSuccessValue;
                DeviceLinkSuccessType deviceLinkSuccessType2 = eventType.deviceLinkSuccessValue;
                if (deviceLinkSuccessType != deviceLinkSuccessType2 && !deviceLinkSuccessType.equals(deviceLinkSuccessType2)) {
                    z = 0;
                }
                return z;
            case 19:
                DeviceManagementDisabledType deviceManagementDisabledType = this.deviceManagementDisabledValue;
                DeviceManagementDisabledType deviceManagementDisabledType2 = eventType.deviceManagementDisabledValue;
                if (deviceManagementDisabledType != deviceManagementDisabledType2 && !deviceManagementDisabledType.equals(deviceManagementDisabledType2)) {
                    z = 0;
                }
                return z;
            case 20:
                DeviceManagementEnabledType deviceManagementEnabledType = this.deviceManagementEnabledValue;
                DeviceManagementEnabledType deviceManagementEnabledType2 = eventType.deviceManagementEnabledValue;
                if (deviceManagementEnabledType != deviceManagementEnabledType2 && !deviceManagementEnabledType.equals(deviceManagementEnabledType2)) {
                    z = 0;
                }
                return z;
            case 21:
                DeviceUnlinkType deviceUnlinkType = this.deviceUnlinkValue;
                DeviceUnlinkType deviceUnlinkType2 = eventType.deviceUnlinkValue;
                if (deviceUnlinkType != deviceUnlinkType2 && !deviceUnlinkType.equals(deviceUnlinkType2)) {
                    z = 0;
                }
                return z;
            case 22:
                EmmRefreshAuthTokenType emmRefreshAuthTokenType = this.emmRefreshAuthTokenValue;
                EmmRefreshAuthTokenType emmRefreshAuthTokenType2 = eventType.emmRefreshAuthTokenValue;
                if (emmRefreshAuthTokenType != emmRefreshAuthTokenType2 && !emmRefreshAuthTokenType.equals(emmRefreshAuthTokenType2)) {
                    z = 0;
                }
                return z;
            case 23:
                AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityType = this.accountCaptureChangeAvailabilityValue;
                AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityType2 = eventType.accountCaptureChangeAvailabilityValue;
                if (accountCaptureChangeAvailabilityType != accountCaptureChangeAvailabilityType2 && !accountCaptureChangeAvailabilityType.equals(accountCaptureChangeAvailabilityType2)) {
                    z = 0;
                }
                return z;
            case 24:
                AccountCaptureMigrateAccountType accountCaptureMigrateAccountType = this.accountCaptureMigrateAccountValue;
                AccountCaptureMigrateAccountType accountCaptureMigrateAccountType2 = eventType.accountCaptureMigrateAccountValue;
                if (accountCaptureMigrateAccountType != accountCaptureMigrateAccountType2 && !accountCaptureMigrateAccountType.equals(accountCaptureMigrateAccountType2)) {
                    z = 0;
                }
                return z;
            case 25:
                AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentType = this.accountCaptureNotificationEmailsSentValue;
                AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentType2 = eventType.accountCaptureNotificationEmailsSentValue;
                if (accountCaptureNotificationEmailsSentType != accountCaptureNotificationEmailsSentType2 && !accountCaptureNotificationEmailsSentType.equals(accountCaptureNotificationEmailsSentType2)) {
                    z = 0;
                }
                return z;
            case 26:
                AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountType = this.accountCaptureRelinquishAccountValue;
                AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountType2 = eventType.accountCaptureRelinquishAccountValue;
                if (accountCaptureRelinquishAccountType != accountCaptureRelinquishAccountType2 && !accountCaptureRelinquishAccountType.equals(accountCaptureRelinquishAccountType2)) {
                    z = 0;
                }
                return z;
            case 27:
                DisabledDomainInvitesType disabledDomainInvitesType = this.disabledDomainInvitesValue;
                DisabledDomainInvitesType disabledDomainInvitesType2 = eventType.disabledDomainInvitesValue;
                if (disabledDomainInvitesType != disabledDomainInvitesType2 && !disabledDomainInvitesType.equals(disabledDomainInvitesType2)) {
                    z = 0;
                }
                return z;
            case 28:
                DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamType = this.domainInvitesApproveRequestToJoinTeamValue;
                DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamType2 = eventType.domainInvitesApproveRequestToJoinTeamValue;
                if (domainInvitesApproveRequestToJoinTeamType != domainInvitesApproveRequestToJoinTeamType2 && !domainInvitesApproveRequestToJoinTeamType.equals(domainInvitesApproveRequestToJoinTeamType2)) {
                    z = 0;
                }
                return z;
            case 29:
                DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamType = this.domainInvitesDeclineRequestToJoinTeamValue;
                DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamType2 = eventType.domainInvitesDeclineRequestToJoinTeamValue;
                if (domainInvitesDeclineRequestToJoinTeamType != domainInvitesDeclineRequestToJoinTeamType2 && !domainInvitesDeclineRequestToJoinTeamType.equals(domainInvitesDeclineRequestToJoinTeamType2)) {
                    z = 0;
                }
                return z;
            case 30:
                DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersType = this.domainInvitesEmailExistingUsersValue;
                DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersType2 = eventType.domainInvitesEmailExistingUsersValue;
                if (domainInvitesEmailExistingUsersType != domainInvitesEmailExistingUsersType2 && !domainInvitesEmailExistingUsersType.equals(domainInvitesEmailExistingUsersType2)) {
                    z = 0;
                }
                return z;
            case 31:
                DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamType = this.domainInvitesRequestToJoinTeamValue;
                DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamType2 = eventType.domainInvitesRequestToJoinTeamValue;
                if (domainInvitesRequestToJoinTeamType != domainInvitesRequestToJoinTeamType2 && !domainInvitesRequestToJoinTeamType.equals(domainInvitesRequestToJoinTeamType2)) {
                    z = 0;
                }
                return z;
            case 32:
                DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoType = this.domainInvitesSetInviteNewUserPrefToNoValue;
                DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoType2 = eventType.domainInvitesSetInviteNewUserPrefToNoValue;
                if (domainInvitesSetInviteNewUserPrefToNoType != domainInvitesSetInviteNewUserPrefToNoType2 && !domainInvitesSetInviteNewUserPrefToNoType.equals(domainInvitesSetInviteNewUserPrefToNoType2)) {
                    z = 0;
                }
                return z;
            case 33:
                DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesType = this.domainInvitesSetInviteNewUserPrefToYesValue;
                DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesType2 = eventType.domainInvitesSetInviteNewUserPrefToYesValue;
                if (domainInvitesSetInviteNewUserPrefToYesType != domainInvitesSetInviteNewUserPrefToYesType2 && !domainInvitesSetInviteNewUserPrefToYesType.equals(domainInvitesSetInviteNewUserPrefToYesType2)) {
                    z = 0;
                }
                return z;
            case 34:
                DomainVerificationAddDomainFailType domainVerificationAddDomainFailType = this.domainVerificationAddDomainFailValue;
                DomainVerificationAddDomainFailType domainVerificationAddDomainFailType2 = eventType.domainVerificationAddDomainFailValue;
                if (domainVerificationAddDomainFailType != domainVerificationAddDomainFailType2 && !domainVerificationAddDomainFailType.equals(domainVerificationAddDomainFailType2)) {
                    z = 0;
                }
                return z;
            case 35:
                DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessType = this.domainVerificationAddDomainSuccessValue;
                DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessType2 = eventType.domainVerificationAddDomainSuccessValue;
                if (domainVerificationAddDomainSuccessType != domainVerificationAddDomainSuccessType2 && !domainVerificationAddDomainSuccessType.equals(domainVerificationAddDomainSuccessType2)) {
                    z = 0;
                }
                return z;
            case 36:
                DomainVerificationRemoveDomainType domainVerificationRemoveDomainType = this.domainVerificationRemoveDomainValue;
                DomainVerificationRemoveDomainType domainVerificationRemoveDomainType2 = eventType.domainVerificationRemoveDomainValue;
                if (domainVerificationRemoveDomainType != domainVerificationRemoveDomainType2 && !domainVerificationRemoveDomainType.equals(domainVerificationRemoveDomainType2)) {
                    z = 0;
                }
                return z;
            case 37:
                EnabledDomainInvitesType enabledDomainInvitesType = this.enabledDomainInvitesValue;
                EnabledDomainInvitesType enabledDomainInvitesType2 = eventType.enabledDomainInvitesValue;
                if (enabledDomainInvitesType != enabledDomainInvitesType2 && !enabledDomainInvitesType.equals(enabledDomainInvitesType2)) {
                    z = 0;
                }
                return z;
            case 38:
                CreateFolderType createFolderType = this.createFolderValue;
                CreateFolderType createFolderType2 = eventType.createFolderValue;
                if (createFolderType != createFolderType2 && !createFolderType.equals(createFolderType2)) {
                    z = 0;
                }
                return z;
            case 39:
                FileAddType fileAddType = this.fileAddValue;
                FileAddType fileAddType2 = eventType.fileAddValue;
                if (fileAddType != fileAddType2 && !fileAddType.equals(fileAddType2)) {
                    z = 0;
                }
                return z;
            case 40:
                FileCopyType fileCopyType = this.fileCopyValue;
                FileCopyType fileCopyType2 = eventType.fileCopyValue;
                if (fileCopyType != fileCopyType2 && !fileCopyType.equals(fileCopyType2)) {
                    z = 0;
                }
                return z;
            case 41:
                FileDeleteType fileDeleteType = this.fileDeleteValue;
                FileDeleteType fileDeleteType2 = eventType.fileDeleteValue;
                if (fileDeleteType != fileDeleteType2 && !fileDeleteType.equals(fileDeleteType2)) {
                    z = 0;
                }
                return z;
            case 42:
                FileDownloadType fileDownloadType = this.fileDownloadValue;
                FileDownloadType fileDownloadType2 = eventType.fileDownloadValue;
                if (fileDownloadType != fileDownloadType2 && !fileDownloadType.equals(fileDownloadType2)) {
                    z = 0;
                }
                return z;
            case 43:
                FileEditType fileEditType = this.fileEditValue;
                FileEditType fileEditType2 = eventType.fileEditValue;
                if (fileEditType != fileEditType2 && !fileEditType.equals(fileEditType2)) {
                    z = 0;
                }
                return z;
            case 44:
                FileGetCopyReferenceType fileGetCopyReferenceType = this.fileGetCopyReferenceValue;
                FileGetCopyReferenceType fileGetCopyReferenceType2 = eventType.fileGetCopyReferenceValue;
                if (fileGetCopyReferenceType != fileGetCopyReferenceType2 && !fileGetCopyReferenceType.equals(fileGetCopyReferenceType2)) {
                    z = 0;
                }
                return z;
            case 45:
                FileMoveType fileMoveType = this.fileMoveValue;
                FileMoveType fileMoveType2 = eventType.fileMoveValue;
                if (fileMoveType != fileMoveType2 && !fileMoveType.equals(fileMoveType2)) {
                    z = 0;
                }
                return z;
            case 46:
                FilePermanentlyDeleteType filePermanentlyDeleteType = this.filePermanentlyDeleteValue;
                FilePermanentlyDeleteType filePermanentlyDeleteType2 = eventType.filePermanentlyDeleteValue;
                if (filePermanentlyDeleteType != filePermanentlyDeleteType2 && !filePermanentlyDeleteType.equals(filePermanentlyDeleteType2)) {
                    z = 0;
                }
                return z;
            case 47:
                FilePreviewType filePreviewType = this.filePreviewValue;
                FilePreviewType filePreviewType2 = eventType.filePreviewValue;
                if (filePreviewType != filePreviewType2 && !filePreviewType.equals(filePreviewType2)) {
                    z = 0;
                }
                return z;
            case 48:
                FileRenameType fileRenameType = this.fileRenameValue;
                FileRenameType fileRenameType2 = eventType.fileRenameValue;
                if (fileRenameType != fileRenameType2 && !fileRenameType.equals(fileRenameType2)) {
                    z = 0;
                }
                return z;
            case 49:
                FileRestoreType fileRestoreType = this.fileRestoreValue;
                FileRestoreType fileRestoreType2 = eventType.fileRestoreValue;
                if (fileRestoreType != fileRestoreType2 && !fileRestoreType.equals(fileRestoreType2)) {
                    z = 0;
                }
                return z;
            case 50:
                FileRevertType fileRevertType = this.fileRevertValue;
                FileRevertType fileRevertType2 = eventType.fileRevertValue;
                if (fileRevertType != fileRevertType2 && !fileRevertType.equals(fileRevertType2)) {
                    z = 0;
                }
                return z;
            case 51:
                FileRollbackChangesType fileRollbackChangesType = this.fileRollbackChangesValue;
                FileRollbackChangesType fileRollbackChangesType2 = eventType.fileRollbackChangesValue;
                if (fileRollbackChangesType != fileRollbackChangesType2 && !fileRollbackChangesType.equals(fileRollbackChangesType2)) {
                    z = 0;
                }
                return z;
            case 52:
                FileSaveCopyReferenceType fileSaveCopyReferenceType = this.fileSaveCopyReferenceValue;
                FileSaveCopyReferenceType fileSaveCopyReferenceType2 = eventType.fileSaveCopyReferenceValue;
                if (fileSaveCopyReferenceType != fileSaveCopyReferenceType2 && !fileSaveCopyReferenceType.equals(fileSaveCopyReferenceType2)) {
                    z = 0;
                }
                return z;
            case 53:
                FileRequestChangeType fileRequestChangeType = this.fileRequestChangeValue;
                FileRequestChangeType fileRequestChangeType2 = eventType.fileRequestChangeValue;
                if (fileRequestChangeType != fileRequestChangeType2 && !fileRequestChangeType.equals(fileRequestChangeType2)) {
                    z = 0;
                }
                return z;
            case 54:
                FileRequestCloseType fileRequestCloseType = this.fileRequestCloseValue;
                FileRequestCloseType fileRequestCloseType2 = eventType.fileRequestCloseValue;
                if (fileRequestCloseType != fileRequestCloseType2 && !fileRequestCloseType.equals(fileRequestCloseType2)) {
                    z = 0;
                }
                return z;
            case 55:
                FileRequestCreateType fileRequestCreateType = this.fileRequestCreateValue;
                FileRequestCreateType fileRequestCreateType2 = eventType.fileRequestCreateValue;
                if (fileRequestCreateType != fileRequestCreateType2 && !fileRequestCreateType.equals(fileRequestCreateType2)) {
                    z = 0;
                }
                return z;
            case 56:
                FileRequestReceiveFileType fileRequestReceiveFileType = this.fileRequestReceiveFileValue;
                FileRequestReceiveFileType fileRequestReceiveFileType2 = eventType.fileRequestReceiveFileValue;
                if (fileRequestReceiveFileType != fileRequestReceiveFileType2 && !fileRequestReceiveFileType.equals(fileRequestReceiveFileType2)) {
                    z = 0;
                }
                return z;
            case 57:
                GroupAddExternalIdType groupAddExternalIdType = this.groupAddExternalIdValue;
                GroupAddExternalIdType groupAddExternalIdType2 = eventType.groupAddExternalIdValue;
                if (groupAddExternalIdType != groupAddExternalIdType2 && !groupAddExternalIdType.equals(groupAddExternalIdType2)) {
                    z = 0;
                }
                return z;
            case 58:
                GroupAddMemberType groupAddMemberType = this.groupAddMemberValue;
                GroupAddMemberType groupAddMemberType2 = eventType.groupAddMemberValue;
                if (groupAddMemberType != groupAddMemberType2 && !groupAddMemberType.equals(groupAddMemberType2)) {
                    z = 0;
                }
                return z;
            case 59:
                GroupChangeExternalIdType groupChangeExternalIdType = this.groupChangeExternalIdValue;
                GroupChangeExternalIdType groupChangeExternalIdType2 = eventType.groupChangeExternalIdValue;
                if (groupChangeExternalIdType != groupChangeExternalIdType2 && !groupChangeExternalIdType.equals(groupChangeExternalIdType2)) {
                    z = 0;
                }
                return z;
            case 60:
                GroupChangeManagementTypeType groupChangeManagementTypeType = this.groupChangeManagementTypeValue;
                GroupChangeManagementTypeType groupChangeManagementTypeType2 = eventType.groupChangeManagementTypeValue;
                if (groupChangeManagementTypeType != groupChangeManagementTypeType2 && !groupChangeManagementTypeType.equals(groupChangeManagementTypeType2)) {
                    z = 0;
                }
                return z;
            case 61:
                GroupChangeMemberRoleType groupChangeMemberRoleType = this.groupChangeMemberRoleValue;
                GroupChangeMemberRoleType groupChangeMemberRoleType2 = eventType.groupChangeMemberRoleValue;
                if (groupChangeMemberRoleType != groupChangeMemberRoleType2 && !groupChangeMemberRoleType.equals(groupChangeMemberRoleType2)) {
                    z = 0;
                }
                return z;
            case 62:
                GroupCreateType groupCreateType = this.groupCreateValue;
                GroupCreateType groupCreateType2 = eventType.groupCreateValue;
                if (groupCreateType != groupCreateType2 && !groupCreateType.equals(groupCreateType2)) {
                    z = 0;
                }
                return z;
            case 63:
                GroupDeleteType groupDeleteType = this.groupDeleteValue;
                GroupDeleteType groupDeleteType2 = eventType.groupDeleteValue;
                if (groupDeleteType != groupDeleteType2 && !groupDeleteType.equals(groupDeleteType2)) {
                    z = 0;
                }
                return z;
            case 64:
                GroupDescriptionUpdatedType groupDescriptionUpdatedType = this.groupDescriptionUpdatedValue;
                GroupDescriptionUpdatedType groupDescriptionUpdatedType2 = eventType.groupDescriptionUpdatedValue;
                if (groupDescriptionUpdatedType != groupDescriptionUpdatedType2 && !groupDescriptionUpdatedType.equals(groupDescriptionUpdatedType2)) {
                    z = 0;
                }
                return z;
            case 65:
                GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedType = this.groupJoinPolicyUpdatedValue;
                GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedType2 = eventType.groupJoinPolicyUpdatedValue;
                if (groupJoinPolicyUpdatedType != groupJoinPolicyUpdatedType2 && !groupJoinPolicyUpdatedType.equals(groupJoinPolicyUpdatedType2)) {
                    z = 0;
                }
                return z;
            case 66:
                GroupMovedType groupMovedType = this.groupMovedValue;
                GroupMovedType groupMovedType2 = eventType.groupMovedValue;
                if (groupMovedType != groupMovedType2 && !groupMovedType.equals(groupMovedType2)) {
                    z = 0;
                }
                return z;
            case 67:
                GroupRemoveExternalIdType groupRemoveExternalIdType = this.groupRemoveExternalIdValue;
                GroupRemoveExternalIdType groupRemoveExternalIdType2 = eventType.groupRemoveExternalIdValue;
                if (groupRemoveExternalIdType != groupRemoveExternalIdType2 && !groupRemoveExternalIdType.equals(groupRemoveExternalIdType2)) {
                    z = 0;
                }
                return z;
            case 68:
                GroupRemoveMemberType groupRemoveMemberType = this.groupRemoveMemberValue;
                GroupRemoveMemberType groupRemoveMemberType2 = eventType.groupRemoveMemberValue;
                if (groupRemoveMemberType != groupRemoveMemberType2 && !groupRemoveMemberType.equals(groupRemoveMemberType2)) {
                    z = 0;
                }
                return z;
            case 69:
                GroupRenameType groupRenameType = this.groupRenameValue;
                GroupRenameType groupRenameType2 = eventType.groupRenameValue;
                if (groupRenameType != groupRenameType2 && !groupRenameType.equals(groupRenameType2)) {
                    z = 0;
                }
                return z;
            case 70:
                EmmErrorType emmErrorType = this.emmErrorValue;
                EmmErrorType emmErrorType2 = eventType.emmErrorValue;
                if (emmErrorType != emmErrorType2 && !emmErrorType.equals(emmErrorType2)) {
                    z = 0;
                }
                return z;
            case 71:
                LoginFailType loginFailType = this.loginFailValue;
                LoginFailType loginFailType2 = eventType.loginFailValue;
                if (loginFailType != loginFailType2 && !loginFailType.equals(loginFailType2)) {
                    z = 0;
                }
                return z;
            case 72:
                LoginSuccessType loginSuccessType = this.loginSuccessValue;
                LoginSuccessType loginSuccessType2 = eventType.loginSuccessValue;
                if (loginSuccessType != loginSuccessType2 && !loginSuccessType.equals(loginSuccessType2)) {
                    z = 0;
                }
                return z;
            case 73:
                LogoutType logoutType = this.logoutValue;
                LogoutType logoutType2 = eventType.logoutValue;
                if (logoutType != logoutType2 && !logoutType.equals(logoutType2)) {
                    z = 0;
                }
                return z;
            case 74:
                ResellerSupportSessionEndType resellerSupportSessionEndType = this.resellerSupportSessionEndValue;
                ResellerSupportSessionEndType resellerSupportSessionEndType2 = eventType.resellerSupportSessionEndValue;
                if (resellerSupportSessionEndType != resellerSupportSessionEndType2 && !resellerSupportSessionEndType.equals(resellerSupportSessionEndType2)) {
                    z = 0;
                }
                return z;
            case 75:
                ResellerSupportSessionStartType resellerSupportSessionStartType = this.resellerSupportSessionStartValue;
                ResellerSupportSessionStartType resellerSupportSessionStartType2 = eventType.resellerSupportSessionStartValue;
                if (resellerSupportSessionStartType != resellerSupportSessionStartType2 && !resellerSupportSessionStartType.equals(resellerSupportSessionStartType2)) {
                    z = 0;
                }
                return z;
            case 76:
                SignInAsSessionEndType signInAsSessionEndType = this.signInAsSessionEndValue;
                SignInAsSessionEndType signInAsSessionEndType2 = eventType.signInAsSessionEndValue;
                if (signInAsSessionEndType != signInAsSessionEndType2 && !signInAsSessionEndType.equals(signInAsSessionEndType2)) {
                    z = 0;
                }
                return z;
            case 77:
                SignInAsSessionStartType signInAsSessionStartType = this.signInAsSessionStartValue;
                SignInAsSessionStartType signInAsSessionStartType2 = eventType.signInAsSessionStartValue;
                if (signInAsSessionStartType != signInAsSessionStartType2 && !signInAsSessionStartType.equals(signInAsSessionStartType2)) {
                    z = 0;
                }
                return z;
            case 78:
                SsoErrorType ssoErrorType = this.ssoErrorValue;
                SsoErrorType ssoErrorType2 = eventType.ssoErrorValue;
                if (ssoErrorType != ssoErrorType2 && !ssoErrorType.equals(ssoErrorType2)) {
                    z = 0;
                }
                return z;
            case 79:
                MemberAddNameType memberAddNameType = this.memberAddNameValue;
                MemberAddNameType memberAddNameType2 = eventType.memberAddNameValue;
                if (memberAddNameType != memberAddNameType2 && !memberAddNameType.equals(memberAddNameType2)) {
                    z = 0;
                }
                return z;
            case 80:
                MemberChangeAdminRoleType memberChangeAdminRoleType = this.memberChangeAdminRoleValue;
                MemberChangeAdminRoleType memberChangeAdminRoleType2 = eventType.memberChangeAdminRoleValue;
                if (memberChangeAdminRoleType != memberChangeAdminRoleType2 && !memberChangeAdminRoleType.equals(memberChangeAdminRoleType2)) {
                    z = 0;
                }
                return z;
            case 81:
                MemberChangeEmailType memberChangeEmailType = this.memberChangeEmailValue;
                MemberChangeEmailType memberChangeEmailType2 = eventType.memberChangeEmailValue;
                if (memberChangeEmailType != memberChangeEmailType2 && !memberChangeEmailType.equals(memberChangeEmailType2)) {
                    z = 0;
                }
                return z;
            case 82:
                MemberChangeMembershipTypeType memberChangeMembershipTypeType = this.memberChangeMembershipTypeValue;
                MemberChangeMembershipTypeType memberChangeMembershipTypeType2 = eventType.memberChangeMembershipTypeValue;
                if (memberChangeMembershipTypeType != memberChangeMembershipTypeType2 && !memberChangeMembershipTypeType.equals(memberChangeMembershipTypeType2)) {
                    z = 0;
                }
                return z;
            case 83:
                MemberChangeNameType memberChangeNameType = this.memberChangeNameValue;
                MemberChangeNameType memberChangeNameType2 = eventType.memberChangeNameValue;
                if (memberChangeNameType != memberChangeNameType2 && !memberChangeNameType.equals(memberChangeNameType2)) {
                    z = 0;
                }
                return z;
            case 84:
                MemberChangeStatusType memberChangeStatusType = this.memberChangeStatusValue;
                MemberChangeStatusType memberChangeStatusType2 = eventType.memberChangeStatusValue;
                if (memberChangeStatusType != memberChangeStatusType2 && !memberChangeStatusType.equals(memberChangeStatusType2)) {
                    z = 0;
                }
                return z;
            case 85:
                MemberDeleteManualContactsType memberDeleteManualContactsType = this.memberDeleteManualContactsValue;
                MemberDeleteManualContactsType memberDeleteManualContactsType2 = eventType.memberDeleteManualContactsValue;
                if (memberDeleteManualContactsType != memberDeleteManualContactsType2 && !memberDeleteManualContactsType.equals(memberDeleteManualContactsType2)) {
                    z = 0;
                }
                return z;
            case 86:
                MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsType = this.memberPermanentlyDeleteAccountContentsValue;
                MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsType2 = eventType.memberPermanentlyDeleteAccountContentsValue;
                if (memberPermanentlyDeleteAccountContentsType != memberPermanentlyDeleteAccountContentsType2 && !memberPermanentlyDeleteAccountContentsType.equals(memberPermanentlyDeleteAccountContentsType2)) {
                    z = 0;
                }
                return z;
            case 87:
                MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaType = this.memberSpaceLimitsAddCustomQuotaValue;
                MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaType2 = eventType.memberSpaceLimitsAddCustomQuotaValue;
                if (memberSpaceLimitsAddCustomQuotaType != memberSpaceLimitsAddCustomQuotaType2 && !memberSpaceLimitsAddCustomQuotaType.equals(memberSpaceLimitsAddCustomQuotaType2)) {
                    z = 0;
                }
                return z;
            case 88:
                MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaType = this.memberSpaceLimitsChangeCustomQuotaValue;
                MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaType2 = eventType.memberSpaceLimitsChangeCustomQuotaValue;
                if (memberSpaceLimitsChangeCustomQuotaType != memberSpaceLimitsChangeCustomQuotaType2 && !memberSpaceLimitsChangeCustomQuotaType.equals(memberSpaceLimitsChangeCustomQuotaType2)) {
                    z = 0;
                }
                return z;
            case 89:
                MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusType = this.memberSpaceLimitsChangeStatusValue;
                MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusType2 = eventType.memberSpaceLimitsChangeStatusValue;
                if (memberSpaceLimitsChangeStatusType != memberSpaceLimitsChangeStatusType2 && !memberSpaceLimitsChangeStatusType.equals(memberSpaceLimitsChangeStatusType2)) {
                    z = 0;
                }
                return z;
            case 90:
                MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaType = this.memberSpaceLimitsRemoveCustomQuotaValue;
                MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaType2 = eventType.memberSpaceLimitsRemoveCustomQuotaValue;
                if (memberSpaceLimitsRemoveCustomQuotaType != memberSpaceLimitsRemoveCustomQuotaType2 && !memberSpaceLimitsRemoveCustomQuotaType.equals(memberSpaceLimitsRemoveCustomQuotaType2)) {
                    z = 0;
                }
                return z;
            case 91:
                MemberSuggestType memberSuggestType = this.memberSuggestValue;
                MemberSuggestType memberSuggestType2 = eventType.memberSuggestValue;
                if (memberSuggestType != memberSuggestType2 && !memberSuggestType.equals(memberSuggestType2)) {
                    z = 0;
                }
                return z;
            case 92:
                MemberTransferAccountContentsType memberTransferAccountContentsType = this.memberTransferAccountContentsValue;
                MemberTransferAccountContentsType memberTransferAccountContentsType2 = eventType.memberTransferAccountContentsValue;
                if (memberTransferAccountContentsType != memberTransferAccountContentsType2 && !memberTransferAccountContentsType.equals(memberTransferAccountContentsType2)) {
                    z = 0;
                }
                return z;
            case 93:
                SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedType = this.secondaryMailsPolicyChangedValue;
                SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedType2 = eventType.secondaryMailsPolicyChangedValue;
                if (secondaryMailsPolicyChangedType != secondaryMailsPolicyChangedType2 && !secondaryMailsPolicyChangedType.equals(secondaryMailsPolicyChangedType2)) {
                    z = 0;
                }
                return z;
            case 94:
                PaperContentAddMemberType paperContentAddMemberType = this.paperContentAddMemberValue;
                PaperContentAddMemberType paperContentAddMemberType2 = eventType.paperContentAddMemberValue;
                if (paperContentAddMemberType != paperContentAddMemberType2 && !paperContentAddMemberType.equals(paperContentAddMemberType2)) {
                    z = 0;
                }
                return z;
            case 95:
                PaperContentAddToFolderType paperContentAddToFolderType = this.paperContentAddToFolderValue;
                PaperContentAddToFolderType paperContentAddToFolderType2 = eventType.paperContentAddToFolderValue;
                if (paperContentAddToFolderType != paperContentAddToFolderType2 && !paperContentAddToFolderType.equals(paperContentAddToFolderType2)) {
                    z = 0;
                }
                return z;
            case 96:
                PaperContentArchiveType paperContentArchiveType = this.paperContentArchiveValue;
                PaperContentArchiveType paperContentArchiveType2 = eventType.paperContentArchiveValue;
                if (paperContentArchiveType != paperContentArchiveType2 && !paperContentArchiveType.equals(paperContentArchiveType2)) {
                    z = 0;
                }
                return z;
            case 97:
                PaperContentCreateType paperContentCreateType = this.paperContentCreateValue;
                PaperContentCreateType paperContentCreateType2 = eventType.paperContentCreateValue;
                if (paperContentCreateType != paperContentCreateType2 && !paperContentCreateType.equals(paperContentCreateType2)) {
                    z = 0;
                }
                return z;
            case 98:
                PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteType = this.paperContentPermanentlyDeleteValue;
                PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteType2 = eventType.paperContentPermanentlyDeleteValue;
                if (paperContentPermanentlyDeleteType != paperContentPermanentlyDeleteType2 && !paperContentPermanentlyDeleteType.equals(paperContentPermanentlyDeleteType2)) {
                    z = 0;
                }
                return z;
            case 99:
                PaperContentRemoveFromFolderType paperContentRemoveFromFolderType = this.paperContentRemoveFromFolderValue;
                PaperContentRemoveFromFolderType paperContentRemoveFromFolderType2 = eventType.paperContentRemoveFromFolderValue;
                if (paperContentRemoveFromFolderType != paperContentRemoveFromFolderType2 && !paperContentRemoveFromFolderType.equals(paperContentRemoveFromFolderType2)) {
                    z = 0;
                }
                return z;
            case 100:
                PaperContentRemoveMemberType paperContentRemoveMemberType = this.paperContentRemoveMemberValue;
                PaperContentRemoveMemberType paperContentRemoveMemberType2 = eventType.paperContentRemoveMemberValue;
                if (paperContentRemoveMemberType != paperContentRemoveMemberType2 && !paperContentRemoveMemberType.equals(paperContentRemoveMemberType2)) {
                    z = 0;
                }
                return z;
            case 101:
                PaperContentRenameType paperContentRenameType = this.paperContentRenameValue;
                PaperContentRenameType paperContentRenameType2 = eventType.paperContentRenameValue;
                if (paperContentRenameType != paperContentRenameType2 && !paperContentRenameType.equals(paperContentRenameType2)) {
                    z = 0;
                }
                return z;
            case 102:
                PaperContentRestoreType paperContentRestoreType = this.paperContentRestoreValue;
                PaperContentRestoreType paperContentRestoreType2 = eventType.paperContentRestoreValue;
                if (paperContentRestoreType != paperContentRestoreType2 && !paperContentRestoreType.equals(paperContentRestoreType2)) {
                    z = 0;
                }
                return z;
            case 103:
                PaperDocAddCommentType paperDocAddCommentType = this.paperDocAddCommentValue;
                PaperDocAddCommentType paperDocAddCommentType2 = eventType.paperDocAddCommentValue;
                if (paperDocAddCommentType != paperDocAddCommentType2 && !paperDocAddCommentType.equals(paperDocAddCommentType2)) {
                    z = 0;
                }
                return z;
            case 104:
                PaperDocChangeMemberRoleType paperDocChangeMemberRoleType = this.paperDocChangeMemberRoleValue;
                PaperDocChangeMemberRoleType paperDocChangeMemberRoleType2 = eventType.paperDocChangeMemberRoleValue;
                if (paperDocChangeMemberRoleType != paperDocChangeMemberRoleType2 && !paperDocChangeMemberRoleType.equals(paperDocChangeMemberRoleType2)) {
                    z = 0;
                }
                return z;
            case 105:
                PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyType = this.paperDocChangeSharingPolicyValue;
                PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyType2 = eventType.paperDocChangeSharingPolicyValue;
                if (paperDocChangeSharingPolicyType != paperDocChangeSharingPolicyType2 && !paperDocChangeSharingPolicyType.equals(paperDocChangeSharingPolicyType2)) {
                    z = 0;
                }
                return z;
            case 106:
                PaperDocChangeSubscriptionType paperDocChangeSubscriptionType = this.paperDocChangeSubscriptionValue;
                PaperDocChangeSubscriptionType paperDocChangeSubscriptionType2 = eventType.paperDocChangeSubscriptionValue;
                if (paperDocChangeSubscriptionType != paperDocChangeSubscriptionType2 && !paperDocChangeSubscriptionType.equals(paperDocChangeSubscriptionType2)) {
                    z = 0;
                }
                return z;
            case 107:
                PaperDocDeletedType paperDocDeletedType = this.paperDocDeletedValue;
                PaperDocDeletedType paperDocDeletedType2 = eventType.paperDocDeletedValue;
                if (paperDocDeletedType != paperDocDeletedType2 && !paperDocDeletedType.equals(paperDocDeletedType2)) {
                    z = 0;
                }
                return z;
            case 108:
                PaperDocDeleteCommentType paperDocDeleteCommentType = this.paperDocDeleteCommentValue;
                PaperDocDeleteCommentType paperDocDeleteCommentType2 = eventType.paperDocDeleteCommentValue;
                if (paperDocDeleteCommentType != paperDocDeleteCommentType2 && !paperDocDeleteCommentType.equals(paperDocDeleteCommentType2)) {
                    z = 0;
                }
                return z;
            case 109:
                PaperDocDownloadType paperDocDownloadType = this.paperDocDownloadValue;
                PaperDocDownloadType paperDocDownloadType2 = eventType.paperDocDownloadValue;
                if (paperDocDownloadType != paperDocDownloadType2 && !paperDocDownloadType.equals(paperDocDownloadType2)) {
                    z = 0;
                }
                return z;
            case 110:
                PaperDocEditType paperDocEditType = this.paperDocEditValue;
                PaperDocEditType paperDocEditType2 = eventType.paperDocEditValue;
                if (paperDocEditType != paperDocEditType2 && !paperDocEditType.equals(paperDocEditType2)) {
                    z = 0;
                }
                return z;
            case 111:
                PaperDocEditCommentType paperDocEditCommentType = this.paperDocEditCommentValue;
                PaperDocEditCommentType paperDocEditCommentType2 = eventType.paperDocEditCommentValue;
                if (paperDocEditCommentType != paperDocEditCommentType2 && !paperDocEditCommentType.equals(paperDocEditCommentType2)) {
                    z = 0;
                }
                return z;
            case 112:
                PaperDocFollowedType paperDocFollowedType = this.paperDocFollowedValue;
                PaperDocFollowedType paperDocFollowedType2 = eventType.paperDocFollowedValue;
                if (paperDocFollowedType != paperDocFollowedType2 && !paperDocFollowedType.equals(paperDocFollowedType2)) {
                    z = 0;
                }
                return z;
            case 113:
                PaperDocMentionType paperDocMentionType = this.paperDocMentionValue;
                PaperDocMentionType paperDocMentionType2 = eventType.paperDocMentionValue;
                if (paperDocMentionType != paperDocMentionType2 && !paperDocMentionType.equals(paperDocMentionType2)) {
                    z = 0;
                }
                return z;
            case 114:
                PaperDocOwnershipChangedType paperDocOwnershipChangedType = this.paperDocOwnershipChangedValue;
                PaperDocOwnershipChangedType paperDocOwnershipChangedType2 = eventType.paperDocOwnershipChangedValue;
                if (paperDocOwnershipChangedType != paperDocOwnershipChangedType2 && !paperDocOwnershipChangedType.equals(paperDocOwnershipChangedType2)) {
                    z = 0;
                }
                return z;
            case 115:
                PaperDocRequestAccessType paperDocRequestAccessType = this.paperDocRequestAccessValue;
                PaperDocRequestAccessType paperDocRequestAccessType2 = eventType.paperDocRequestAccessValue;
                if (paperDocRequestAccessType != paperDocRequestAccessType2 && !paperDocRequestAccessType.equals(paperDocRequestAccessType2)) {
                    z = 0;
                }
                return z;
            case 116:
                PaperDocResolveCommentType paperDocResolveCommentType = this.paperDocResolveCommentValue;
                PaperDocResolveCommentType paperDocResolveCommentType2 = eventType.paperDocResolveCommentValue;
                if (paperDocResolveCommentType != paperDocResolveCommentType2 && !paperDocResolveCommentType.equals(paperDocResolveCommentType2)) {
                    z = 0;
                }
                return z;
            case 117:
                PaperDocRevertType paperDocRevertType = this.paperDocRevertValue;
                PaperDocRevertType paperDocRevertType2 = eventType.paperDocRevertValue;
                if (paperDocRevertType != paperDocRevertType2 && !paperDocRevertType.equals(paperDocRevertType2)) {
                    z = 0;
                }
                return z;
            case 118:
                PaperDocSlackShareType paperDocSlackShareType = this.paperDocSlackShareValue;
                PaperDocSlackShareType paperDocSlackShareType2 = eventType.paperDocSlackShareValue;
                if (paperDocSlackShareType != paperDocSlackShareType2 && !paperDocSlackShareType.equals(paperDocSlackShareType2)) {
                    z = 0;
                }
                return z;
            case 119:
                PaperDocTeamInviteType paperDocTeamInviteType = this.paperDocTeamInviteValue;
                PaperDocTeamInviteType paperDocTeamInviteType2 = eventType.paperDocTeamInviteValue;
                if (paperDocTeamInviteType != paperDocTeamInviteType2 && !paperDocTeamInviteType.equals(paperDocTeamInviteType2)) {
                    z = 0;
                }
                return z;
            case 120:
                PaperDocTrashedType paperDocTrashedType = this.paperDocTrashedValue;
                PaperDocTrashedType paperDocTrashedType2 = eventType.paperDocTrashedValue;
                if (paperDocTrashedType != paperDocTrashedType2 && !paperDocTrashedType.equals(paperDocTrashedType2)) {
                    z = 0;
                }
                return z;
            case 121:
                PaperDocUnresolveCommentType paperDocUnresolveCommentType = this.paperDocUnresolveCommentValue;
                PaperDocUnresolveCommentType paperDocUnresolveCommentType2 = eventType.paperDocUnresolveCommentValue;
                if (paperDocUnresolveCommentType != paperDocUnresolveCommentType2 && !paperDocUnresolveCommentType.equals(paperDocUnresolveCommentType2)) {
                    z = 0;
                }
                return z;
            case 122:
                PaperDocUntrashedType paperDocUntrashedType = this.paperDocUntrashedValue;
                PaperDocUntrashedType paperDocUntrashedType2 = eventType.paperDocUntrashedValue;
                if (paperDocUntrashedType != paperDocUntrashedType2 && !paperDocUntrashedType.equals(paperDocUntrashedType2)) {
                    z = 0;
                }
                return z;
            case 123:
                PaperDocViewType paperDocViewType = this.paperDocViewValue;
                PaperDocViewType paperDocViewType2 = eventType.paperDocViewValue;
                if (paperDocViewType != paperDocViewType2 && !paperDocViewType.equals(paperDocViewType2)) {
                    z = 0;
                }
                return z;
            case 124:
                PaperExternalViewAllowType paperExternalViewAllowType = this.paperExternalViewAllowValue;
                PaperExternalViewAllowType paperExternalViewAllowType2 = eventType.paperExternalViewAllowValue;
                if (paperExternalViewAllowType != paperExternalViewAllowType2 && !paperExternalViewAllowType.equals(paperExternalViewAllowType2)) {
                    z = 0;
                }
                return z;
            case 125:
                PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamType = this.paperExternalViewDefaultTeamValue;
                PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamType2 = eventType.paperExternalViewDefaultTeamValue;
                if (paperExternalViewDefaultTeamType != paperExternalViewDefaultTeamType2 && !paperExternalViewDefaultTeamType.equals(paperExternalViewDefaultTeamType2)) {
                    z = 0;
                }
                return z;
            case 126:
                PaperExternalViewForbidType paperExternalViewForbidType = this.paperExternalViewForbidValue;
                PaperExternalViewForbidType paperExternalViewForbidType2 = eventType.paperExternalViewForbidValue;
                if (paperExternalViewForbidType != paperExternalViewForbidType2 && !paperExternalViewForbidType.equals(paperExternalViewForbidType2)) {
                    z = 0;
                }
                return z;
            case 127:
                PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionType = this.paperFolderChangeSubscriptionValue;
                PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionType2 = eventType.paperFolderChangeSubscriptionValue;
                if (paperFolderChangeSubscriptionType != paperFolderChangeSubscriptionType2 && !paperFolderChangeSubscriptionType.equals(paperFolderChangeSubscriptionType2)) {
                    z = 0;
                }
                return z;
            case 128:
                PaperFolderDeletedType paperFolderDeletedType = this.paperFolderDeletedValue;
                PaperFolderDeletedType paperFolderDeletedType2 = eventType.paperFolderDeletedValue;
                if (paperFolderDeletedType != paperFolderDeletedType2 && !paperFolderDeletedType.equals(paperFolderDeletedType2)) {
                    z = 0;
                }
                return z;
            case 129:
                PaperFolderFollowedType paperFolderFollowedType = this.paperFolderFollowedValue;
                PaperFolderFollowedType paperFolderFollowedType2 = eventType.paperFolderFollowedValue;
                if (paperFolderFollowedType != paperFolderFollowedType2 && !paperFolderFollowedType.equals(paperFolderFollowedType2)) {
                    z = 0;
                }
                return z;
            case 130:
                PaperFolderTeamInviteType paperFolderTeamInviteType = this.paperFolderTeamInviteValue;
                PaperFolderTeamInviteType paperFolderTeamInviteType2 = eventType.paperFolderTeamInviteValue;
                if (paperFolderTeamInviteType != paperFolderTeamInviteType2 && !paperFolderTeamInviteType.equals(paperFolderTeamInviteType2)) {
                    z = 0;
                }
                return z;
            case 131:
                PasswordChangeType passwordChangeType = this.passwordChangeValue;
                PasswordChangeType passwordChangeType2 = eventType.passwordChangeValue;
                if (passwordChangeType != passwordChangeType2 && !passwordChangeType.equals(passwordChangeType2)) {
                    z = 0;
                }
                return z;
            case 132:
                PasswordResetType passwordResetType = this.passwordResetValue;
                PasswordResetType passwordResetType2 = eventType.passwordResetValue;
                if (passwordResetType != passwordResetType2 && !passwordResetType.equals(passwordResetType2)) {
                    z = 0;
                }
                return z;
            case 133:
                PasswordResetAllType passwordResetAllType = this.passwordResetAllValue;
                PasswordResetAllType passwordResetAllType2 = eventType.passwordResetAllValue;
                if (passwordResetAllType != passwordResetAllType2 && !passwordResetAllType.equals(passwordResetAllType2)) {
                    z = 0;
                }
                return z;
            case 134:
                EmmCreateExceptionsReportType emmCreateExceptionsReportType = this.emmCreateExceptionsReportValue;
                EmmCreateExceptionsReportType emmCreateExceptionsReportType2 = eventType.emmCreateExceptionsReportValue;
                if (emmCreateExceptionsReportType != emmCreateExceptionsReportType2 && !emmCreateExceptionsReportType.equals(emmCreateExceptionsReportType2)) {
                    z = 0;
                }
                return z;
            case 135:
                EmmCreateUsageReportType emmCreateUsageReportType = this.emmCreateUsageReportValue;
                EmmCreateUsageReportType emmCreateUsageReportType2 = eventType.emmCreateUsageReportValue;
                if (emmCreateUsageReportType != emmCreateUsageReportType2 && !emmCreateUsageReportType.equals(emmCreateUsageReportType2)) {
                    z = 0;
                }
                return z;
            case 136:
                ExportMembersReportType exportMembersReportType = this.exportMembersReportValue;
                ExportMembersReportType exportMembersReportType2 = eventType.exportMembersReportValue;
                if (exportMembersReportType != exportMembersReportType2 && !exportMembersReportType.equals(exportMembersReportType2)) {
                    z = 0;
                }
                return z;
            case 137:
                PaperAdminExportStartType paperAdminExportStartType = this.paperAdminExportStartValue;
                PaperAdminExportStartType paperAdminExportStartType2 = eventType.paperAdminExportStartValue;
                if (paperAdminExportStartType != paperAdminExportStartType2 && !paperAdminExportStartType.equals(paperAdminExportStartType2)) {
                    z = 0;
                }
                return z;
            case 138:
                SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportType = this.smartSyncCreateAdminPrivilegeReportValue;
                SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportType2 = eventType.smartSyncCreateAdminPrivilegeReportValue;
                if (smartSyncCreateAdminPrivilegeReportType != smartSyncCreateAdminPrivilegeReportType2 && !smartSyncCreateAdminPrivilegeReportType.equals(smartSyncCreateAdminPrivilegeReportType2)) {
                    z = 0;
                }
                return z;
            case 139:
                TeamActivityCreateReportType teamActivityCreateReportType = this.teamActivityCreateReportValue;
                TeamActivityCreateReportType teamActivityCreateReportType2 = eventType.teamActivityCreateReportValue;
                if (teamActivityCreateReportType != teamActivityCreateReportType2 && !teamActivityCreateReportType.equals(teamActivityCreateReportType2)) {
                    z = 0;
                }
                return z;
            case 140:
                CollectionShareType collectionShareType = this.collectionShareValue;
                CollectionShareType collectionShareType2 = eventType.collectionShareValue;
                if (collectionShareType != collectionShareType2 && !collectionShareType.equals(collectionShareType2)) {
                    z = 0;
                }
                return z;
            case 141:
                NoteAclInviteOnlyType noteAclInviteOnlyType = this.noteAclInviteOnlyValue;
                NoteAclInviteOnlyType noteAclInviteOnlyType2 = eventType.noteAclInviteOnlyValue;
                if (noteAclInviteOnlyType != noteAclInviteOnlyType2 && !noteAclInviteOnlyType.equals(noteAclInviteOnlyType2)) {
                    z = 0;
                }
                return z;
            case 142:
                NoteAclLinkType noteAclLinkType = this.noteAclLinkValue;
                NoteAclLinkType noteAclLinkType2 = eventType.noteAclLinkValue;
                if (noteAclLinkType != noteAclLinkType2 && !noteAclLinkType.equals(noteAclLinkType2)) {
                    z = 0;
                }
                return z;
            case 143:
                NoteAclTeamLinkType noteAclTeamLinkType = this.noteAclTeamLinkValue;
                NoteAclTeamLinkType noteAclTeamLinkType2 = eventType.noteAclTeamLinkValue;
                if (noteAclTeamLinkType != noteAclTeamLinkType2 && !noteAclTeamLinkType.equals(noteAclTeamLinkType2)) {
                    z = 0;
                }
                return z;
            case 144:
                NoteSharedType noteSharedType = this.noteSharedValue;
                NoteSharedType noteSharedType2 = eventType.noteSharedValue;
                if (noteSharedType != noteSharedType2 && !noteSharedType.equals(noteSharedType2)) {
                    z = 0;
                }
                return z;
            case 145:
                NoteShareReceiveType noteShareReceiveType = this.noteShareReceiveValue;
                NoteShareReceiveType noteShareReceiveType2 = eventType.noteShareReceiveValue;
                if (noteShareReceiveType != noteShareReceiveType2 && !noteShareReceiveType.equals(noteShareReceiveType2)) {
                    z = 0;
                }
                return z;
            case 146:
                OpenNoteSharedType openNoteSharedType = this.openNoteSharedValue;
                OpenNoteSharedType openNoteSharedType2 = eventType.openNoteSharedValue;
                if (openNoteSharedType != openNoteSharedType2 && !openNoteSharedType.equals(openNoteSharedType2)) {
                    z = 0;
                }
                return z;
            case 147:
                SfAddGroupType sfAddGroupType = this.sfAddGroupValue;
                SfAddGroupType sfAddGroupType2 = eventType.sfAddGroupValue;
                if (sfAddGroupType != sfAddGroupType2 && !sfAddGroupType.equals(sfAddGroupType2)) {
                    z = 0;
                }
                return z;
            case 148:
                SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksType = this.sfAllowNonMembersToViewSharedLinksValue;
                SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksType2 = eventType.sfAllowNonMembersToViewSharedLinksValue;
                if (sfAllowNonMembersToViewSharedLinksType != sfAllowNonMembersToViewSharedLinksType2 && !sfAllowNonMembersToViewSharedLinksType.equals(sfAllowNonMembersToViewSharedLinksType2)) {
                    z = 0;
                }
                return z;
            case 149:
                SfExternalInviteWarnType sfExternalInviteWarnType = this.sfExternalInviteWarnValue;
                SfExternalInviteWarnType sfExternalInviteWarnType2 = eventType.sfExternalInviteWarnValue;
                if (sfExternalInviteWarnType != sfExternalInviteWarnType2 && !sfExternalInviteWarnType.equals(sfExternalInviteWarnType2)) {
                    z = 0;
                }
                return z;
            case 150:
                SfFbInviteType sfFbInviteType = this.sfFbInviteValue;
                SfFbInviteType sfFbInviteType2 = eventType.sfFbInviteValue;
                if (sfFbInviteType != sfFbInviteType2 && !sfFbInviteType.equals(sfFbInviteType2)) {
                    z = 0;
                }
                return z;
            case 151:
                SfFbInviteChangeRoleType sfFbInviteChangeRoleType = this.sfFbInviteChangeRoleValue;
                SfFbInviteChangeRoleType sfFbInviteChangeRoleType2 = eventType.sfFbInviteChangeRoleValue;
                if (sfFbInviteChangeRoleType != sfFbInviteChangeRoleType2 && !sfFbInviteChangeRoleType.equals(sfFbInviteChangeRoleType2)) {
                    z = 0;
                }
                return z;
            case 152:
                SfFbUninviteType sfFbUninviteType = this.sfFbUninviteValue;
                SfFbUninviteType sfFbUninviteType2 = eventType.sfFbUninviteValue;
                if (sfFbUninviteType != sfFbUninviteType2 && !sfFbUninviteType.equals(sfFbUninviteType2)) {
                    z = 0;
                }
                return z;
            case 153:
                SfInviteGroupType sfInviteGroupType = this.sfInviteGroupValue;
                SfInviteGroupType sfInviteGroupType2 = eventType.sfInviteGroupValue;
                if (sfInviteGroupType != sfInviteGroupType2 && !sfInviteGroupType.equals(sfInviteGroupType2)) {
                    z = 0;
                }
                return z;
            case 154:
                SfTeamGrantAccessType sfTeamGrantAccessType = this.sfTeamGrantAccessValue;
                SfTeamGrantAccessType sfTeamGrantAccessType2 = eventType.sfTeamGrantAccessValue;
                if (sfTeamGrantAccessType != sfTeamGrantAccessType2 && !sfTeamGrantAccessType.equals(sfTeamGrantAccessType2)) {
                    z = 0;
                }
                return z;
            case 155:
                SfTeamInviteType sfTeamInviteType = this.sfTeamInviteValue;
                SfTeamInviteType sfTeamInviteType2 = eventType.sfTeamInviteValue;
                if (sfTeamInviteType != sfTeamInviteType2 && !sfTeamInviteType.equals(sfTeamInviteType2)) {
                    z = 0;
                }
                return z;
            case 156:
                SfTeamInviteChangeRoleType sfTeamInviteChangeRoleType = this.sfTeamInviteChangeRoleValue;
                SfTeamInviteChangeRoleType sfTeamInviteChangeRoleType2 = eventType.sfTeamInviteChangeRoleValue;
                if (sfTeamInviteChangeRoleType != sfTeamInviteChangeRoleType2 && !sfTeamInviteChangeRoleType.equals(sfTeamInviteChangeRoleType2)) {
                    z = 0;
                }
                return z;
            case 157:
                SfTeamJoinType sfTeamJoinType = this.sfTeamJoinValue;
                SfTeamJoinType sfTeamJoinType2 = eventType.sfTeamJoinValue;
                if (sfTeamJoinType != sfTeamJoinType2 && !sfTeamJoinType.equals(sfTeamJoinType2)) {
                    z = 0;
                }
                return z;
            case 158:
                SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkType = this.sfTeamJoinFromOobLinkValue;
                SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkType2 = eventType.sfTeamJoinFromOobLinkValue;
                if (sfTeamJoinFromOobLinkType != sfTeamJoinFromOobLinkType2 && !sfTeamJoinFromOobLinkType.equals(sfTeamJoinFromOobLinkType2)) {
                    z = 0;
                }
                return z;
            case 159:
                SfTeamUninviteType sfTeamUninviteType = this.sfTeamUninviteValue;
                SfTeamUninviteType sfTeamUninviteType2 = eventType.sfTeamUninviteValue;
                if (sfTeamUninviteType != sfTeamUninviteType2 && !sfTeamUninviteType.equals(sfTeamUninviteType2)) {
                    z = 0;
                }
                return z;
            case 160:
                SharedContentAddInviteesType sharedContentAddInviteesType = this.sharedContentAddInviteesValue;
                SharedContentAddInviteesType sharedContentAddInviteesType2 = eventType.sharedContentAddInviteesValue;
                if (sharedContentAddInviteesType != sharedContentAddInviteesType2 && !sharedContentAddInviteesType.equals(sharedContentAddInviteesType2)) {
                    z = 0;
                }
                return z;
            case 161:
                SharedContentAddLinkExpiryType sharedContentAddLinkExpiryType = this.sharedContentAddLinkExpiryValue;
                SharedContentAddLinkExpiryType sharedContentAddLinkExpiryType2 = eventType.sharedContentAddLinkExpiryValue;
                if (sharedContentAddLinkExpiryType != sharedContentAddLinkExpiryType2 && !sharedContentAddLinkExpiryType.equals(sharedContentAddLinkExpiryType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetOriginalSoundMicID /*162*/:
                SharedContentAddLinkPasswordType sharedContentAddLinkPasswordType = this.sharedContentAddLinkPasswordValue;
                SharedContentAddLinkPasswordType sharedContentAddLinkPasswordType2 = eventType.sharedContentAddLinkPasswordValue;
                if (sharedContentAddLinkPasswordType != sharedContentAddLinkPasswordType2 && !sharedContentAddLinkPasswordType.equals(sharedContentAddLinkPasswordType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUseSystemDefaultMicForVOIP /*163*/:
                SharedContentAddMemberType sharedContentAddMemberType = this.sharedContentAddMemberValue;
                SharedContentAddMemberType sharedContentAddMemberType2 = eventType.sharedContentAddMemberValue;
                if (sharedContentAddMemberType != sharedContentAddMemberType2 && !sharedContentAddMemberType.equals(sharedContentAddMemberType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUseSystemDefaultSpeakerForVOIP /*164*/:
                SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyType = this.sharedContentChangeDownloadsPolicyValue;
                SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyType2 = eventType.sharedContentChangeDownloadsPolicyValue;
                if (sharedContentChangeDownloadsPolicyType != sharedContentChangeDownloadsPolicyType2 && !sharedContentChangeDownloadsPolicyType.equals(sharedContentChangeDownloadsPolicyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUseSystemDefaultSpeakerForRing /*165*/:
                SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleType = this.sharedContentChangeInviteeRoleValue;
                SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleType2 = eventType.sharedContentChangeInviteeRoleValue;
                if (sharedContentChangeInviteeRoleType != sharedContentChangeInviteeRoleType2 && !sharedContentChangeInviteeRoleType.equals(sharedContentChangeInviteeRoleType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUseVOIPForAudio /*166*/:
                SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceType = this.sharedContentChangeLinkAudienceValue;
                SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceType2 = eventType.sharedContentChangeLinkAudienceValue;
                if (sharedContentChangeLinkAudienceType != sharedContentChangeLinkAudienceType2 && !sharedContentChangeLinkAudienceType.equals(sharedContentChangeLinkAudienceType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUseCallinForAudio /*167*/:
                SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryType = this.sharedContentChangeLinkExpiryValue;
                SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryType2 = eventType.sharedContentChangeLinkExpiryValue;
                if (sharedContentChangeLinkExpiryType != sharedContentChangeLinkExpiryType2 && !sharedContentChangeLinkExpiryType.equals(sharedContentChangeLinkExpiryType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUseCalloutForAudio /*168*/:
                SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordType = this.sharedContentChangeLinkPasswordValue;
                SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordType2 = eventType.sharedContentChangeLinkPasswordValue;
                if (sharedContentChangeLinkPasswordType != sharedContentChangeLinkPasswordType2 && !sharedContentChangeLinkPasswordType.equals(sharedContentChangeLinkPasswordType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetSpeakerID /*169*/:
                SharedContentChangeMemberRoleType sharedContentChangeMemberRoleType = this.sharedContentChangeMemberRoleValue;
                SharedContentChangeMemberRoleType sharedContentChangeMemberRoleType2 = eventType.sharedContentChangeMemberRoleValue;
                if (sharedContentChangeMemberRoleType != sharedContentChangeMemberRoleType2 && !sharedContentChangeMemberRoleType.equals(sharedContentChangeMemberRoleType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetRingSpeakerID /*170*/:
                SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyType = this.sharedContentChangeViewerInfoPolicyValue;
                SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyType2 = eventType.sharedContentChangeViewerInfoPolicyValue;
                if (sharedContentChangeViewerInfoPolicyType != sharedContentChangeViewerInfoPolicyType2 && !sharedContentChangeViewerInfoPolicyType.equals(sharedContentChangeViewerInfoPolicyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetSpeakerName /*171*/:
                SharedContentClaimInvitationType sharedContentClaimInvitationType = this.sharedContentClaimInvitationValue;
                SharedContentClaimInvitationType sharedContentClaimInvitationType2 = eventType.sharedContentClaimInvitationValue;
                if (sharedContentClaimInvitationType != sharedContentClaimInvitationType2 && !sharedContentClaimInvitationType.equals(sharedContentClaimInvitationType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetMicID /*172*/:
                SharedContentCopyType sharedContentCopyType = this.sharedContentCopyValue;
                SharedContentCopyType sharedContentCopyType2 = eventType.sharedContentCopyValue;
                if (sharedContentCopyType != sharedContentCopyType2 && !sharedContentCopyType.equals(sharedContentCopyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetMicName /*173*/:
                SharedContentDownloadType sharedContentDownloadType = this.sharedContentDownloadValue;
                SharedContentDownloadType sharedContentDownloadType2 = eventType.sharedContentDownloadValue;
                if (sharedContentDownloadType != sharedContentDownloadType2 && !sharedContentDownloadType.equals(sharedContentDownloadType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetCameraID /*174*/:
                SharedContentRelinquishMembershipType sharedContentRelinquishMembershipType = this.sharedContentRelinquishMembershipValue;
                SharedContentRelinquishMembershipType sharedContentRelinquishMembershipType2 = eventType.sharedContentRelinquishMembershipValue;
                if (sharedContentRelinquishMembershipType != sharedContentRelinquishMembershipType2 && !sharedContentRelinquishMembershipType.equals(sharedContentRelinquishMembershipType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetCameraName /*175*/:
                SharedContentRemoveInviteesType sharedContentRemoveInviteesType = this.sharedContentRemoveInviteesValue;
                SharedContentRemoveInviteesType sharedContentRemoveInviteesType2 = eventType.sharedContentRemoveInviteesValue;
                if (sharedContentRemoveInviteesType != sharedContentRemoveInviteesType2 && !sharedContentRemoveInviteesType.equals(sharedContentRemoveInviteesType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetCameraAlias /*176*/:
                SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryType = this.sharedContentRemoveLinkExpiryValue;
                SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryType2 = eventType.sharedContentRemoveLinkExpiryValue;
                if (sharedContentRemoveLinkExpiryType != sharedContentRemoveLinkExpiryType2 && !sharedContentRemoveLinkExpiryType.equals(sharedContentRemoveLinkExpiryType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetVideoBackgroundPath /*177*/:
                SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordType = this.sharedContentRemoveLinkPasswordValue;
                SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordType2 = eventType.sharedContentRemoveLinkPasswordValue;
                if (sharedContentRemoveLinkPasswordType != sharedContentRemoveLinkPasswordType2 && !sharedContentRemoveLinkPasswordType.equals(sharedContentRemoveLinkPasswordType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetVideoBackgroundData /*178*/:
                SharedContentRemoveMemberType sharedContentRemoveMemberType = this.sharedContentRemoveMemberValue;
                SharedContentRemoveMemberType sharedContentRemoveMemberType2 = eventType.sharedContentRemoveMemberValue;
                if (sharedContentRemoveMemberType != sharedContentRemoveMemberType2 && !sharedContentRemoveMemberType.equals(sharedContentRemoveMemberType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetSavedUserMeetingID /*179*/:
                SharedContentRequestAccessType sharedContentRequestAccessType = this.sharedContentRequestAccessValue;
                SharedContentRequestAccessType sharedContentRequestAccessType2 = eventType.sharedContentRequestAccessValue;
                if (sharedContentRequestAccessType != sharedContentRequestAccessType2 && !sharedContentRequestAccessType.equals(sharedContentRequestAccessType2)) {
                    z = 0;
                }
                return z;
            case 180:
                SharedContentUnshareType sharedContentUnshareType = this.sharedContentUnshareValue;
                SharedContentUnshareType sharedContentUnshareType2 = eventType.sharedContentUnshareValue;
                if (sharedContentUnshareType != sharedContentUnshareType2 && !sharedContentUnshareType.equals(sharedContentUnshareType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetCallmeRemeberNumber /*181*/:
                SharedContentViewType sharedContentViewType = this.sharedContentViewValue;
                SharedContentViewType sharedContentViewType2 = eventType.sharedContentViewValue;
                if (sharedContentViewType != sharedContentViewType2 && !sharedContentViewType.equals(sharedContentViewType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetCallmeTeleNumber /*182*/:
                SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyType = this.sharedFolderChangeLinkPolicyValue;
                SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyType2 = eventType.sharedFolderChangeLinkPolicyValue;
                if (sharedFolderChangeLinkPolicyType != sharedFolderChangeLinkPolicyType2 && !sharedFolderChangeLinkPolicyType.equals(sharedFolderChangeLinkPolicyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetCallmeAreaCode /*183*/:
                SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyType = this.sharedFolderChangeMembersInheritancePolicyValue;
                SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyType2 = eventType.sharedFolderChangeMembersInheritancePolicyValue;
                if (sharedFolderChangeMembersInheritancePolicyType != sharedFolderChangeMembersInheritancePolicyType2 && !sharedFolderChangeMembersInheritancePolicyType.equals(sharedFolderChangeMembersInheritancePolicyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetMessengerDNDParam /*184*/:
                SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyType = this.sharedFolderChangeMembersManagementPolicyValue;
                SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyType2 = eventType.sharedFolderChangeMembersManagementPolicyValue;
                if (sharedFolderChangeMembersManagementPolicyType != sharedFolderChangeMembersManagementPolicyType2 && !sharedFolderChangeMembersManagementPolicyType.equals(sharedFolderChangeMembersManagementPolicyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetUserNameForJoinMeeting /*185*/:
                SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyType = this.sharedFolderChangeMembersPolicyValue;
                SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyType2 = eventType.sharedFolderChangeMembersPolicyValue;
                if (sharedFolderChangeMembersPolicyType != sharedFolderChangeMembersPolicyType2 && !sharedFolderChangeMembersPolicyType.equals(sharedFolderChangeMembersPolicyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetMessengerIdleMinutes /*186*/:
                SharedFolderCreateType sharedFolderCreateType = this.sharedFolderCreateValue;
                SharedFolderCreateType sharedFolderCreateType2 = eventType.sharedFolderCreateValue;
                if (sharedFolderCreateType != sharedFolderCreateType2 && !sharedFolderCreateType.equals(sharedFolderCreateType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_First_Time_Show_Tips /*187*/:
                SharedFolderDeclineInvitationType sharedFolderDeclineInvitationType = this.sharedFolderDeclineInvitationValue;
                SharedFolderDeclineInvitationType sharedFolderDeclineInvitationType2 = eventType.sharedFolderDeclineInvitationValue;
                if (sharedFolderDeclineInvitationType != sharedFolderDeclineInvitationType2 && !sharedFolderDeclineInvitationType.equals(sharedFolderDeclineInvitationType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Reset /*188*/:
                SharedFolderMountType sharedFolderMountType = this.sharedFolderMountValue;
                SharedFolderMountType sharedFolderMountType2 = eventType.sharedFolderMountValue;
                if (sharedFolderMountType != sharedFolderMountType2 && !sharedFolderMountType.equals(sharedFolderMountType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Navigate_PopupWindow /*189*/:
                SharedFolderNestType sharedFolderNestType = this.sharedFolderNestValue;
                SharedFolderNestType sharedFolderNestType2 = eventType.sharedFolderNestValue;
                if (sharedFolderNestType != sharedFolderNestType2 && !sharedFolderNestType.equals(sharedFolderNestType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Focus_MeetingControls /*190*/:
                SharedFolderTransferOwnershipType sharedFolderTransferOwnershipType = this.sharedFolderTransferOwnershipValue;
                SharedFolderTransferOwnershipType sharedFolderTransferOwnershipType2 = eventType.sharedFolderTransferOwnershipValue;
                if (sharedFolderTransferOwnershipType != sharedFolderTransferOwnershipType2 && !sharedFolderTransferOwnershipType.equals(sharedFolderTransferOwnershipType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_View_PreviousGallery /*191*/:
                SharedFolderUnmountType sharedFolderUnmountType = this.sharedFolderUnmountValue;
                SharedFolderUnmountType sharedFolderUnmountType2 = eventType.sharedFolderUnmountValue;
                if (sharedFolderUnmountType != sharedFolderUnmountType2 && !sharedFolderUnmountType.equals(sharedFolderUnmountType2)) {
                    z = 0;
                }
                return z;
            case 192:
                SharedLinkAddExpiryType sharedLinkAddExpiryType = this.sharedLinkAddExpiryValue;
                SharedLinkAddExpiryType sharedLinkAddExpiryType2 = eventType.sharedLinkAddExpiryValue;
                if (sharedLinkAddExpiryType != sharedLinkAddExpiryType2 && !sharedLinkAddExpiryType.equals(sharedLinkAddExpiryType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Toggle_ShowMeettingControls /*193*/:
                SharedLinkChangeExpiryType sharedLinkChangeExpiryType = this.sharedLinkChangeExpiryValue;
                SharedLinkChangeExpiryType sharedLinkChangeExpiryType2 = eventType.sharedLinkChangeExpiryValue;
                if (sharedLinkChangeExpiryType != sharedLinkChangeExpiryType2 && !sharedLinkChangeExpiryType.equals(sharedLinkChangeExpiryType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Switch_SpeakerView /*194*/:
                SharedLinkChangeVisibilityType sharedLinkChangeVisibilityType = this.sharedLinkChangeVisibilityValue;
                SharedLinkChangeVisibilityType sharedLinkChangeVisibilityType2 = eventType.sharedLinkChangeVisibilityValue;
                if (sharedLinkChangeVisibilityType != sharedLinkChangeVisibilityType2 && !sharedLinkChangeVisibilityType.equals(sharedLinkChangeVisibilityType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Switch_GalleryView /*195*/:
                SharedLinkCopyType sharedLinkCopyType = this.sharedLinkCopyValue;
                SharedLinkCopyType sharedLinkCopyType2 = eventType.sharedLinkCopyValue;
                if (sharedLinkCopyType != sharedLinkCopyType2 && !sharedLinkCopyType.equals(sharedLinkCopyType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Close_CurrentWindow /*196*/:
                SharedLinkCreateType sharedLinkCreateType = this.sharedLinkCreateValue;
                SharedLinkCreateType sharedLinkCreateType2 = eventType.sharedLinkCreateValue;
                if (sharedLinkCreateType != sharedLinkCreateType2 && !sharedLinkCreateType.equals(sharedLinkCreateType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Start_Or_Stop_Video /*197*/:
                SharedLinkDisableType sharedLinkDisableType = this.sharedLinkDisableValue;
                SharedLinkDisableType sharedLinkDisableType2 = eventType.sharedLinkDisableValue;
                if (sharedLinkDisableType != sharedLinkDisableType2 && !sharedLinkDisableType.equals(sharedLinkDisableType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Mute_Or_Unmute_Audio /*198*/:
                SharedLinkDownloadType sharedLinkDownloadType = this.sharedLinkDownloadValue;
                SharedLinkDownloadType sharedLinkDownloadType2 = eventType.sharedLinkDownloadValue;
                if (sharedLinkDownloadType != sharedLinkDownloadType2 && !sharedLinkDownloadType.equals(sharedLinkDownloadType2)) {
                    z = 0;
                }
                return z;
            case 199:
                SharedLinkRemoveExpiryType sharedLinkRemoveExpiryType = this.sharedLinkRemoveExpiryValue;
                SharedLinkRemoveExpiryType sharedLinkRemoveExpiryType2 = eventType.sharedLinkRemoveExpiryValue;
                if (sharedLinkRemoveExpiryType != sharedLinkRemoveExpiryType2 && !sharedLinkRemoveExpiryType.equals(sharedLinkRemoveExpiryType2)) {
                    z = 0;
                }
                return z;
            case 200:
                SharedLinkShareType sharedLinkShareType = this.sharedLinkShareValue;
                SharedLinkShareType sharedLinkShareType2 = eventType.sharedLinkShareValue;
                if (sharedLinkShareType != sharedLinkShareType2 && !sharedLinkShareType.equals(sharedLinkShareType2)) {
                    z = 0;
                }
                return z;
            case 201:
                SharedLinkViewType sharedLinkViewType = this.sharedLinkViewValue;
                SharedLinkViewType sharedLinkViewType2 = eventType.sharedLinkViewValue;
                if (sharedLinkViewType != sharedLinkViewType2 && !sharedLinkViewType.equals(sharedLinkViewType2)) {
                    z = 0;
                }
                return z;
            case 202:
                SharedNoteOpenedType sharedNoteOpenedType = this.sharedNoteOpenedValue;
                SharedNoteOpenedType sharedNoteOpenedType2 = eventType.sharedNoteOpenedValue;
                if (sharedNoteOpenedType != sharedNoteOpenedType2 && !sharedNoteOpenedType.equals(sharedNoteOpenedType2)) {
                    z = 0;
                }
                return z;
            case 203:
                ShmodelGroupShareType shmodelGroupShareType = this.shmodelGroupShareValue;
                ShmodelGroupShareType shmodelGroupShareType2 = eventType.shmodelGroupShareValue;
                if (shmodelGroupShareType != shmodelGroupShareType2 && !shmodelGroupShareType.equals(shmodelGroupShareType2)) {
                    z = 0;
                }
                return z;
            case 204:
                ShowcaseAccessGrantedType showcaseAccessGrantedType = this.showcaseAccessGrantedValue;
                ShowcaseAccessGrantedType showcaseAccessGrantedType2 = eventType.showcaseAccessGrantedValue;
                if (showcaseAccessGrantedType != showcaseAccessGrantedType2 && !showcaseAccessGrantedType.equals(showcaseAccessGrantedType2)) {
                    z = 0;
                }
                return z;
            case 205:
                ShowcaseAddMemberType showcaseAddMemberType = this.showcaseAddMemberValue;
                ShowcaseAddMemberType showcaseAddMemberType2 = eventType.showcaseAddMemberValue;
                if (showcaseAddMemberType != showcaseAddMemberType2 && !showcaseAddMemberType.equals(showcaseAddMemberType2)) {
                    z = 0;
                }
                return z;
            case 206:
                ShowcaseArchivedType showcaseArchivedType = this.showcaseArchivedValue;
                ShowcaseArchivedType showcaseArchivedType2 = eventType.showcaseArchivedValue;
                if (showcaseArchivedType != showcaseArchivedType2 && !showcaseArchivedType.equals(showcaseArchivedType2)) {
                    z = 0;
                }
                return z;
            case 207:
                ShowcaseCreatedType showcaseCreatedType = this.showcaseCreatedValue;
                ShowcaseCreatedType showcaseCreatedType2 = eventType.showcaseCreatedValue;
                if (showcaseCreatedType != showcaseCreatedType2 && !showcaseCreatedType.equals(showcaseCreatedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Show_Or_Hide_Chat /*208*/:
                ShowcaseDeleteCommentType showcaseDeleteCommentType = this.showcaseDeleteCommentValue;
                ShowcaseDeleteCommentType showcaseDeleteCommentType2 = eventType.showcaseDeleteCommentValue;
                if (showcaseDeleteCommentType != showcaseDeleteCommentType2 && !showcaseDeleteCommentType.equals(showcaseDeleteCommentType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Show_Or_Hide_ManageParticipant /*209*/:
                ShowcaseEditedType showcaseEditedType = this.showcaseEditedValue;
                ShowcaseEditedType showcaseEditedType2 = eventType.showcaseEditedValue;
                if (showcaseEditedType != showcaseEditedType2 && !showcaseEditedType.equals(showcaseEditedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Open_Invite_Window /*210*/:
                ShowcaseEditCommentType showcaseEditCommentType = this.showcaseEditCommentValue;
                ShowcaseEditCommentType showcaseEditCommentType2 = eventType.showcaseEditCommentValue;
                if (showcaseEditCommentType != showcaseEditCommentType2 && !showcaseEditCommentType.equals(showcaseEditCommentType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Raise_Or_Lower_Hand /*211*/:
                ShowcaseFileAddedType showcaseFileAddedType = this.showcaseFileAddedValue;
                ShowcaseFileAddedType showcaseFileAddedType2 = eventType.showcaseFileAddedValue;
                if (showcaseFileAddedType != showcaseFileAddedType2 && !showcaseFileAddedType.equals(showcaseFileAddedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_End_Metting /*212*/:
                ShowcaseFileDownloadType showcaseFileDownloadType = this.showcaseFileDownloadValue;
                ShowcaseFileDownloadType showcaseFileDownloadType2 = eventType.showcaseFileDownloadValue;
                if (showcaseFileDownloadType != showcaseFileDownloadType2 && !showcaseFileDownloadType.equals(showcaseFileDownloadType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Gain_RemoteControl /*213*/:
                ShowcaseFileRemovedType showcaseFileRemovedType = this.showcaseFileRemovedValue;
                ShowcaseFileRemovedType showcaseFileRemovedType2 = eventType.showcaseFileRemovedValue;
                if (showcaseFileRemovedType != showcaseFileRemovedType2 && !showcaseFileRemovedType.equals(showcaseFileRemovedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Stop_RemoteControl /*214*/:
                ShowcaseFileViewType showcaseFileViewType = this.showcaseFileViewValue;
                ShowcaseFileViewType showcaseFileViewType2 = eventType.showcaseFileViewValue;
                if (showcaseFileViewType != showcaseFileViewType2 && !showcaseFileViewType.equals(showcaseFileViewType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Announce_ActiveSpeakerName /*215*/:
                ShowcasePermanentlyDeletedType showcasePermanentlyDeletedType = this.showcasePermanentlyDeletedValue;
                ShowcasePermanentlyDeletedType showcasePermanentlyDeletedType2 = eventType.showcasePermanentlyDeletedValue;
                if (showcasePermanentlyDeletedType != showcasePermanentlyDeletedType2 && !showcasePermanentlyDeletedType.equals(showcasePermanentlyDeletedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Show_Or_Hide_Meeting_Controls /*216*/:
                ShowcasePostCommentType showcasePostCommentType = this.showcasePostCommentValue;
                ShowcasePostCommentType showcasePostCommentType2 = eventType.showcasePostCommentValue;
                if (showcasePostCommentType != showcasePostCommentType2 && !showcasePostCommentType.equals(showcasePostCommentType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Enlarge_ChatDisplayFontSize /*217*/:
                ShowcaseRemoveMemberType showcaseRemoveMemberType = this.showcaseRemoveMemberValue;
                ShowcaseRemoveMemberType showcaseRemoveMemberType2 = eventType.showcaseRemoveMemberValue;
                if (showcaseRemoveMemberType != showcaseRemoveMemberType2 && !showcaseRemoveMemberType.equals(showcaseRemoveMemberType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Reduce_ChatDisplayFontSize /*218*/:
                ShowcaseRenamedType showcaseRenamedType = this.showcaseRenamedValue;
                ShowcaseRenamedType showcaseRenamedType2 = eventType.showcaseRenamedValue;
                if (showcaseRenamedType != showcaseRenamedType2 && !showcaseRenamedType.equals(showcaseRenamedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Take_Screenshot /*219*/:
                ShowcaseRequestAccessType showcaseRequestAccessType = this.showcaseRequestAccessValue;
                ShowcaseRequestAccessType showcaseRequestAccessType2 = eventType.showcaseRequestAccessValue;
                if (showcaseRequestAccessType != showcaseRequestAccessType2 && !showcaseRequestAccessType.equals(showcaseRequestAccessType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Switch_Portait_Or_Landscape_View /*220*/:
                ShowcaseResolveCommentType showcaseResolveCommentType = this.showcaseResolveCommentValue;
                ShowcaseResolveCommentType showcaseResolveCommentType2 = eventType.showcaseResolveCommentValue;
                if (showcaseResolveCommentType != showcaseResolveCommentType2 && !showcaseResolveCommentType.equals(showcaseResolveCommentType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Close_CurrentChatSession /*221*/:
                ShowcaseRestoredType showcaseRestoredType = this.showcaseRestoredValue;
                ShowcaseRestoredType showcaseRestoredType2 = eventType.showcaseRestoredValue;
                if (showcaseRestoredType != showcaseRestoredType2 && !showcaseRestoredType.equals(showcaseRestoredType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_SwitchSessionUp /*222*/:
                ShowcaseTrashedType showcaseTrashedType = this.showcaseTrashedValue;
                ShowcaseTrashedType showcaseTrashedType2 = eventType.showcaseTrashedValue;
                if (showcaseTrashedType != showcaseTrashedType2 && !showcaseTrashedType.equals(showcaseTrashedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_SwitchSessionDown /*223*/:
                ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedType = this.showcaseTrashedDeprecatedValue;
                ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedType2 = eventType.showcaseTrashedDeprecatedValue;
                if (showcaseTrashedDeprecatedType != showcaseTrashedDeprecatedType2 && !showcaseTrashedDeprecatedType.equals(showcaseTrashedDeprecatedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_JumpToSession /*224*/:
                ShowcaseUnresolveCommentType showcaseUnresolveCommentType = this.showcaseUnresolveCommentValue;
                ShowcaseUnresolveCommentType showcaseUnresolveCommentType2 = eventType.showcaseUnresolveCommentValue;
                if (showcaseUnresolveCommentType != showcaseUnresolveCommentType2 && !showcaseUnresolveCommentType.equals(showcaseUnresolveCommentType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_Search /*225*/:
                ShowcaseUntrashedType showcaseUntrashedType = this.showcaseUntrashedValue;
                ShowcaseUntrashedType showcaseUntrashedType2 = eventType.showcaseUntrashedValue;
                if (showcaseUntrashedType != showcaseUntrashedType2 && !showcaseUntrashedType.equals(showcaseUntrashedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_AddNewLine /*226*/:
                ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedType = this.showcaseUntrashedDeprecatedValue;
                ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedType2 = eventType.showcaseUntrashedDeprecatedValue;
                if (showcaseUntrashedDeprecatedType != showcaseUntrashedDeprecatedType2 && !showcaseUntrashedDeprecatedType.equals(showcaseUntrashedDeprecatedType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_SetShortCuts_SendMessage /*227*/:
                ShowcaseViewType showcaseViewType = this.showcaseViewValue;
                ShowcaseViewType showcaseViewType2 = eventType.showcaseViewValue;
                if (showcaseViewType != showcaseViewType2 && !showcaseViewType.equals(showcaseViewType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_UpdateWnd_DoNotRemindAgain /*228*/:
                SsoAddCertType ssoAddCertType = this.ssoAddCertValue;
                SsoAddCertType ssoAddCertType2 = eventType.ssoAddCertValue;
                if (ssoAddCertType != ssoAddCertType2 && !ssoAddCertType.equals(ssoAddCertType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_IMNotificationBannerAlwaysShow /*229*/:
                SsoAddLoginUrlType ssoAddLoginUrlType = this.ssoAddLoginUrlValue;
                SsoAddLoginUrlType ssoAddLoginUrlType2 = eventType.ssoAddLoginUrlValue;
                if (ssoAddLoginUrlType != ssoAddLoginUrlType2 && !ssoAddLoginUrlType.equals(ssoAddLoginUrlType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_IMNotificationMessagePreviewsShow /*230*/:
                SsoAddLogoutUrlType ssoAddLogoutUrlType = this.ssoAddLogoutUrlValue;
                SsoAddLogoutUrlType ssoAddLogoutUrlType2 = eventType.ssoAddLogoutUrlValue;
                if (ssoAddLogoutUrlType != ssoAddLogoutUrlType2 && !ssoAddLogoutUrlType.equals(ssoAddLogoutUrlType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_Update_ChatDisplayFontSize /*231*/:
                SsoChangeCertType ssoChangeCertType = this.ssoChangeCertValue;
                SsoChangeCertType ssoChangeCertType2 = eventType.ssoChangeCertValue;
                if (ssoChangeCertType != ssoChangeCertType2 && !ssoChangeCertType.equals(ssoChangeCertType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_NeedCallARoom /*232*/:
                SsoChangeLoginUrlType ssoChangeLoginUrlType = this.ssoChangeLoginUrlValue;
                SsoChangeLoginUrlType ssoChangeLoginUrlType2 = eventType.ssoChangeLoginUrlValue;
                if (ssoChangeLoginUrlType != ssoChangeLoginUrlType2 && !ssoChangeLoginUrlType.equals(ssoChangeLoginUrlType2)) {
                    z = 0;
                }
                return z;
            case 233:
                SsoChangeLogoutUrlType ssoChangeLogoutUrlType = this.ssoChangeLogoutUrlValue;
                SsoChangeLogoutUrlType ssoChangeLogoutUrlType2 = eventType.ssoChangeLogoutUrlValue;
                if (ssoChangeLogoutUrlType != ssoChangeLogoutUrlType2 && !ssoChangeLogoutUrlType.equals(ssoChangeLogoutUrlType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_KeepSignedIn /*234*/:
                SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeType = this.ssoChangeSamlIdentityModeValue;
                SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeType2 = eventType.ssoChangeSamlIdentityModeValue;
                if (ssoChangeSamlIdentityModeType != ssoChangeSamlIdentityModeType2 && !ssoChangeSamlIdentityModeType.equals(ssoChangeSamlIdentityModeType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_ShowJoinLeaveTip /*235*/:
                SsoRemoveCertType ssoRemoveCertType = this.ssoRemoveCertValue;
                SsoRemoveCertType ssoRemoveCertType2 = eventType.ssoRemoveCertValue;
                if (ssoRemoveCertType != ssoRemoveCertType2 && !ssoRemoveCertType.equals(ssoRemoveCertType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_ShowInviteUrl /*236*/:
                SsoRemoveLoginUrlType ssoRemoveLoginUrlType = this.ssoRemoveLoginUrlValue;
                SsoRemoveLoginUrlType ssoRemoveLoginUrlType2 = eventType.ssoRemoveLoginUrlValue;
                if (ssoRemoveLoginUrlType != ssoRemoveLoginUrlType2 && !ssoRemoveLoginUrlType.equals(ssoRemoveLoginUrlType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_DisableAudioOverProxy /*237*/:
                SsoRemoveLogoutUrlType ssoRemoveLogoutUrlType = this.ssoRemoveLogoutUrlValue;
                SsoRemoveLogoutUrlType ssoRemoveLogoutUrlType2 = eventType.ssoRemoveLogoutUrlValue;
                if (ssoRemoveLogoutUrlType != ssoRemoveLogoutUrlType2 && !ssoRemoveLogoutUrlType.equals(ssoRemoveLogoutUrlType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_DisableVideoOverProxy /*238*/:
                TeamFolderChangeStatusType teamFolderChangeStatusType = this.teamFolderChangeStatusValue;
                TeamFolderChangeStatusType teamFolderChangeStatusType2 = eventType.teamFolderChangeStatusValue;
                if (teamFolderChangeStatusType != teamFolderChangeStatusType2 && !teamFolderChangeStatusType.equals(teamFolderChangeStatusType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_DisableSharingOverProxy /*239*/:
                TeamFolderCreateType teamFolderCreateType = this.teamFolderCreateValue;
                TeamFolderCreateType teamFolderCreateType2 = eventType.teamFolderCreateValue;
                if (teamFolderCreateType != teamFolderCreateType2 && !teamFolderCreateType.equals(teamFolderCreateType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_EnableElevateForAdvDSCP /*240*/:
                TeamFolderDowngradeType teamFolderDowngradeType = this.teamFolderDowngradeValue;
                TeamFolderDowngradeType teamFolderDowngradeType2 = eventType.teamFolderDowngradeValue;
                if (teamFolderDowngradeType != teamFolderDowngradeType2 && !teamFolderDowngradeType.equals(teamFolderDowngradeType2)) {
                    z = 0;
                }
                return z;
            case DummyPolicyIDType.zPolicy_LastKnownId /*241*/:
                TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteType = this.teamFolderPermanentlyDeleteValue;
                TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteType2 = eventType.teamFolderPermanentlyDeleteValue;
                if (teamFolderPermanentlyDeleteType != teamFolderPermanentlyDeleteType2 && !teamFolderPermanentlyDeleteType.equals(teamFolderPermanentlyDeleteType2)) {
                    z = 0;
                }
                return z;
            case 242:
                TeamFolderRenameType teamFolderRenameType = this.teamFolderRenameValue;
                TeamFolderRenameType teamFolderRenameType2 = eventType.teamFolderRenameValue;
                if (teamFolderRenameType != teamFolderRenameType2 && !teamFolderRenameType.equals(teamFolderRenameType2)) {
                    z = 0;
                }
                return z;
            case 243:
                TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedType = this.teamSelectiveSyncSettingsChangedValue;
                TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedType2 = eventType.teamSelectiveSyncSettingsChangedValue;
                if (teamSelectiveSyncSettingsChangedType != teamSelectiveSyncSettingsChangedType2 && !teamSelectiveSyncSettingsChangedType.equals(teamSelectiveSyncSettingsChangedType2)) {
                    z = 0;
                }
                return z;
            case 244:
                AccountCaptureChangePolicyType accountCaptureChangePolicyType = this.accountCaptureChangePolicyValue;
                AccountCaptureChangePolicyType accountCaptureChangePolicyType2 = eventType.accountCaptureChangePolicyValue;
                if (accountCaptureChangePolicyType != accountCaptureChangePolicyType2 && !accountCaptureChangePolicyType.equals(accountCaptureChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 245:
                AllowDownloadDisabledType allowDownloadDisabledType = this.allowDownloadDisabledValue;
                AllowDownloadDisabledType allowDownloadDisabledType2 = eventType.allowDownloadDisabledValue;
                if (allowDownloadDisabledType != allowDownloadDisabledType2 && !allowDownloadDisabledType.equals(allowDownloadDisabledType2)) {
                    z = 0;
                }
                return z;
            case 246:
                AllowDownloadEnabledType allowDownloadEnabledType = this.allowDownloadEnabledValue;
                AllowDownloadEnabledType allowDownloadEnabledType2 = eventType.allowDownloadEnabledValue;
                if (allowDownloadEnabledType != allowDownloadEnabledType2 && !allowDownloadEnabledType.equals(allowDownloadEnabledType2)) {
                    z = 0;
                }
                return z;
            case 247:
                DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyType = this.dataPlacementRestrictionChangePolicyValue;
                DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyType2 = eventType.dataPlacementRestrictionChangePolicyValue;
                if (dataPlacementRestrictionChangePolicyType != dataPlacementRestrictionChangePolicyType2 && !dataPlacementRestrictionChangePolicyType.equals(dataPlacementRestrictionChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 248:
                DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyType = this.dataPlacementRestrictionSatisfyPolicyValue;
                DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyType2 = eventType.dataPlacementRestrictionSatisfyPolicyValue;
                if (dataPlacementRestrictionSatisfyPolicyType != dataPlacementRestrictionSatisfyPolicyType2 && !dataPlacementRestrictionSatisfyPolicyType.equals(dataPlacementRestrictionSatisfyPolicyType2)) {
                    z = 0;
                }
                return z;
            case 249:
                DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyType = this.deviceApprovalsChangeDesktopPolicyValue;
                DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyType2 = eventType.deviceApprovalsChangeDesktopPolicyValue;
                if (deviceApprovalsChangeDesktopPolicyType != deviceApprovalsChangeDesktopPolicyType2 && !deviceApprovalsChangeDesktopPolicyType.equals(deviceApprovalsChangeDesktopPolicyType2)) {
                    z = 0;
                }
                return z;
            case Callback.DEFAULT_SWIPE_ANIMATION_DURATION /*250*/:
                DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyType = this.deviceApprovalsChangeMobilePolicyValue;
                DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyType2 = eventType.deviceApprovalsChangeMobilePolicyValue;
                if (deviceApprovalsChangeMobilePolicyType != deviceApprovalsChangeMobilePolicyType2 && !deviceApprovalsChangeMobilePolicyType.equals(deviceApprovalsChangeMobilePolicyType2)) {
                    z = 0;
                }
                return z;
            case 251:
                DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionType = this.deviceApprovalsChangeOverageActionValue;
                DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionType2 = eventType.deviceApprovalsChangeOverageActionValue;
                if (deviceApprovalsChangeOverageActionType != deviceApprovalsChangeOverageActionType2 && !deviceApprovalsChangeOverageActionType.equals(deviceApprovalsChangeOverageActionType2)) {
                    z = 0;
                }
                return z;
            case 252:
                DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionType = this.deviceApprovalsChangeUnlinkActionValue;
                DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionType2 = eventType.deviceApprovalsChangeUnlinkActionValue;
                if (deviceApprovalsChangeUnlinkActionType != deviceApprovalsChangeUnlinkActionType2 && !deviceApprovalsChangeUnlinkActionType.equals(deviceApprovalsChangeUnlinkActionType2)) {
                    z = 0;
                }
                return z;
            case 253:
                DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersType = this.directoryRestrictionsAddMembersValue;
                DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersType2 = eventType.directoryRestrictionsAddMembersValue;
                if (directoryRestrictionsAddMembersType != directoryRestrictionsAddMembersType2 && !directoryRestrictionsAddMembersType.equals(directoryRestrictionsAddMembersType2)) {
                    z = 0;
                }
                return z;
            case 254:
                DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersType = this.directoryRestrictionsRemoveMembersValue;
                DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersType2 = eventType.directoryRestrictionsRemoveMembersValue;
                if (directoryRestrictionsRemoveMembersType != directoryRestrictionsRemoveMembersType2 && !directoryRestrictionsRemoveMembersType.equals(directoryRestrictionsRemoveMembersType2)) {
                    z = 0;
                }
                return z;
            case 255:
                EmmAddExceptionType emmAddExceptionType = this.emmAddExceptionValue;
                EmmAddExceptionType emmAddExceptionType2 = eventType.emmAddExceptionValue;
                if (emmAddExceptionType != emmAddExceptionType2 && !emmAddExceptionType.equals(emmAddExceptionType2)) {
                    z = 0;
                }
                return z;
            case 256:
                EmmChangePolicyType emmChangePolicyType = this.emmChangePolicyValue;
                EmmChangePolicyType emmChangePolicyType2 = eventType.emmChangePolicyValue;
                if (emmChangePolicyType != emmChangePolicyType2 && !emmChangePolicyType.equals(emmChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case InputDeviceCompat.SOURCE_KEYBOARD /*257*/:
                EmmRemoveExceptionType emmRemoveExceptionType = this.emmRemoveExceptionValue;
                EmmRemoveExceptionType emmRemoveExceptionType2 = eventType.emmRemoveExceptionValue;
                if (emmRemoveExceptionType != emmRemoveExceptionType2 && !emmRemoveExceptionType.equals(emmRemoveExceptionType2)) {
                    z = 0;
                }
                return z;
            case 258:
                ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyType = this.extendedVersionHistoryChangePolicyValue;
                ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyType2 = eventType.extendedVersionHistoryChangePolicyValue;
                if (extendedVersionHistoryChangePolicyType != extendedVersionHistoryChangePolicyType2 && !extendedVersionHistoryChangePolicyType.equals(extendedVersionHistoryChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 259:
                FileCommentsChangePolicyType fileCommentsChangePolicyType = this.fileCommentsChangePolicyValue;
                FileCommentsChangePolicyType fileCommentsChangePolicyType2 = eventType.fileCommentsChangePolicyValue;
                if (fileCommentsChangePolicyType != fileCommentsChangePolicyType2 && !fileCommentsChangePolicyType.equals(fileCommentsChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 260:
                FileRequestsChangePolicyType fileRequestsChangePolicyType = this.fileRequestsChangePolicyValue;
                FileRequestsChangePolicyType fileRequestsChangePolicyType2 = eventType.fileRequestsChangePolicyValue;
                if (fileRequestsChangePolicyType != fileRequestsChangePolicyType2 && !fileRequestsChangePolicyType.equals(fileRequestsChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 261:
                FileRequestsEmailsEnabledType fileRequestsEmailsEnabledType = this.fileRequestsEmailsEnabledValue;
                FileRequestsEmailsEnabledType fileRequestsEmailsEnabledType2 = eventType.fileRequestsEmailsEnabledValue;
                if (fileRequestsEmailsEnabledType != fileRequestsEmailsEnabledType2 && !fileRequestsEmailsEnabledType.equals(fileRequestsEmailsEnabledType2)) {
                    z = 0;
                }
                return z;
            case 262:
                FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyType = this.fileRequestsEmailsRestrictedToTeamOnlyValue;
                FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyType2 = eventType.fileRequestsEmailsRestrictedToTeamOnlyValue;
                if (fileRequestsEmailsRestrictedToTeamOnlyType != fileRequestsEmailsRestrictedToTeamOnlyType2 && !fileRequestsEmailsRestrictedToTeamOnlyType.equals(fileRequestsEmailsRestrictedToTeamOnlyType2)) {
                    z = 0;
                }
                return z;
            case 263:
                GoogleSsoChangePolicyType googleSsoChangePolicyType = this.googleSsoChangePolicyValue;
                GoogleSsoChangePolicyType googleSsoChangePolicyType2 = eventType.googleSsoChangePolicyValue;
                if (googleSsoChangePolicyType != googleSsoChangePolicyType2 && !googleSsoChangePolicyType.equals(googleSsoChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 264:
                GroupUserManagementChangePolicyType groupUserManagementChangePolicyType = this.groupUserManagementChangePolicyValue;
                GroupUserManagementChangePolicyType groupUserManagementChangePolicyType2 = eventType.groupUserManagementChangePolicyValue;
                if (groupUserManagementChangePolicyType != groupUserManagementChangePolicyType2 && !groupUserManagementChangePolicyType.equals(groupUserManagementChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 265:
                MemberRequestsChangePolicyType memberRequestsChangePolicyType = this.memberRequestsChangePolicyValue;
                MemberRequestsChangePolicyType memberRequestsChangePolicyType2 = eventType.memberRequestsChangePolicyValue;
                if (memberRequestsChangePolicyType != memberRequestsChangePolicyType2 && !memberRequestsChangePolicyType.equals(memberRequestsChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 266:
                MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionType = this.memberSpaceLimitsAddExceptionValue;
                MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionType2 = eventType.memberSpaceLimitsAddExceptionValue;
                if (memberSpaceLimitsAddExceptionType != memberSpaceLimitsAddExceptionType2 && !memberSpaceLimitsAddExceptionType.equals(memberSpaceLimitsAddExceptionType2)) {
                    z = 0;
                }
                return z;
            case 267:
                MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyType = this.memberSpaceLimitsChangeCapsTypePolicyValue;
                MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyType2 = eventType.memberSpaceLimitsChangeCapsTypePolicyValue;
                if (memberSpaceLimitsChangeCapsTypePolicyType != memberSpaceLimitsChangeCapsTypePolicyType2 && !memberSpaceLimitsChangeCapsTypePolicyType.equals(memberSpaceLimitsChangeCapsTypePolicyType2)) {
                    z = 0;
                }
                return z;
            case 268:
                MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyType = this.memberSpaceLimitsChangePolicyValue;
                MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyType2 = eventType.memberSpaceLimitsChangePolicyValue;
                if (memberSpaceLimitsChangePolicyType != memberSpaceLimitsChangePolicyType2 && !memberSpaceLimitsChangePolicyType.equals(memberSpaceLimitsChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 269:
                MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionType = this.memberSpaceLimitsRemoveExceptionValue;
                MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionType2 = eventType.memberSpaceLimitsRemoveExceptionValue;
                if (memberSpaceLimitsRemoveExceptionType != memberSpaceLimitsRemoveExceptionType2 && !memberSpaceLimitsRemoveExceptionType.equals(memberSpaceLimitsRemoveExceptionType2)) {
                    z = 0;
                }
                return z;
            case SubsamplingScaleImageView.ORIENTATION_270 /*270*/:
                MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyType = this.memberSuggestionsChangePolicyValue;
                MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyType2 = eventType.memberSuggestionsChangePolicyValue;
                if (memberSuggestionsChangePolicyType != memberSuggestionsChangePolicyType2 && !memberSuggestionsChangePolicyType.equals(memberSuggestionsChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 271:
                MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyType = this.microsoftOfficeAddinChangePolicyValue;
                MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyType2 = eventType.microsoftOfficeAddinChangePolicyValue;
                if (microsoftOfficeAddinChangePolicyType != microsoftOfficeAddinChangePolicyType2 && !microsoftOfficeAddinChangePolicyType.equals(microsoftOfficeAddinChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 272:
                NetworkControlChangePolicyType networkControlChangePolicyType = this.networkControlChangePolicyValue;
                NetworkControlChangePolicyType networkControlChangePolicyType2 = eventType.networkControlChangePolicyValue;
                if (networkControlChangePolicyType != networkControlChangePolicyType2 && !networkControlChangePolicyType.equals(networkControlChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case ZMBaseRecyclerViewAdapter.HEADER_VIEW /*273*/:
                PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyType = this.paperChangeDeploymentPolicyValue;
                PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyType2 = eventType.paperChangeDeploymentPolicyValue;
                if (paperChangeDeploymentPolicyType != paperChangeDeploymentPolicyType2 && !paperChangeDeploymentPolicyType.equals(paperChangeDeploymentPolicyType2)) {
                    z = 0;
                }
                return z;
            case 274:
                PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyType = this.paperChangeMemberLinkPolicyValue;
                PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyType2 = eventType.paperChangeMemberLinkPolicyValue;
                if (paperChangeMemberLinkPolicyType != paperChangeMemberLinkPolicyType2 && !paperChangeMemberLinkPolicyType.equals(paperChangeMemberLinkPolicyType2)) {
                    z = 0;
                }
                return z;
            case 275:
                PaperChangeMemberPolicyType paperChangeMemberPolicyType = this.paperChangeMemberPolicyValue;
                PaperChangeMemberPolicyType paperChangeMemberPolicyType2 = eventType.paperChangeMemberPolicyValue;
                if (paperChangeMemberPolicyType != paperChangeMemberPolicyType2 && !paperChangeMemberPolicyType.equals(paperChangeMemberPolicyType2)) {
                    z = 0;
                }
                return z;
            case 276:
                PaperChangePolicyType paperChangePolicyType = this.paperChangePolicyValue;
                PaperChangePolicyType paperChangePolicyType2 = eventType.paperChangePolicyValue;
                if (paperChangePolicyType != paperChangePolicyType2 && !paperChangePolicyType.equals(paperChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 277:
                PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionType = this.paperEnabledUsersGroupAdditionValue;
                PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionType2 = eventType.paperEnabledUsersGroupAdditionValue;
                if (paperEnabledUsersGroupAdditionType != paperEnabledUsersGroupAdditionType2 && !paperEnabledUsersGroupAdditionType.equals(paperEnabledUsersGroupAdditionType2)) {
                    z = 0;
                }
                return z;
            case 278:
                PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalType = this.paperEnabledUsersGroupRemovalValue;
                PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalType2 = eventType.paperEnabledUsersGroupRemovalValue;
                if (paperEnabledUsersGroupRemovalType != paperEnabledUsersGroupRemovalType2 && !paperEnabledUsersGroupRemovalType.equals(paperEnabledUsersGroupRemovalType2)) {
                    z = 0;
                }
                return z;
            case 279:
                PermanentDeleteChangePolicyType permanentDeleteChangePolicyType = this.permanentDeleteChangePolicyValue;
                PermanentDeleteChangePolicyType permanentDeleteChangePolicyType2 = eventType.permanentDeleteChangePolicyValue;
                if (permanentDeleteChangePolicyType != permanentDeleteChangePolicyType2 && !permanentDeleteChangePolicyType.equals(permanentDeleteChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 280:
                SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyType = this.sharingChangeFolderJoinPolicyValue;
                SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyType2 = eventType.sharingChangeFolderJoinPolicyValue;
                if (sharingChangeFolderJoinPolicyType != sharingChangeFolderJoinPolicyType2 && !sharingChangeFolderJoinPolicyType.equals(sharingChangeFolderJoinPolicyType2)) {
                    z = 0;
                }
                return z;
            case 281:
                SharingChangeLinkPolicyType sharingChangeLinkPolicyType = this.sharingChangeLinkPolicyValue;
                SharingChangeLinkPolicyType sharingChangeLinkPolicyType2 = eventType.sharingChangeLinkPolicyValue;
                if (sharingChangeLinkPolicyType != sharingChangeLinkPolicyType2 && !sharingChangeLinkPolicyType.equals(sharingChangeLinkPolicyType2)) {
                    z = 0;
                }
                return z;
            case 282:
                SharingChangeMemberPolicyType sharingChangeMemberPolicyType = this.sharingChangeMemberPolicyValue;
                SharingChangeMemberPolicyType sharingChangeMemberPolicyType2 = eventType.sharingChangeMemberPolicyValue;
                if (sharingChangeMemberPolicyType != sharingChangeMemberPolicyType2 && !sharingChangeMemberPolicyType.equals(sharingChangeMemberPolicyType2)) {
                    z = 0;
                }
                return z;
            case 283:
                ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyType = this.showcaseChangeDownloadPolicyValue;
                ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyType2 = eventType.showcaseChangeDownloadPolicyValue;
                if (showcaseChangeDownloadPolicyType != showcaseChangeDownloadPolicyType2 && !showcaseChangeDownloadPolicyType.equals(showcaseChangeDownloadPolicyType2)) {
                    z = 0;
                }
                return z;
            case 284:
                ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyType = this.showcaseChangeEnabledPolicyValue;
                ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyType2 = eventType.showcaseChangeEnabledPolicyValue;
                if (showcaseChangeEnabledPolicyType != showcaseChangeEnabledPolicyType2 && !showcaseChangeEnabledPolicyType.equals(showcaseChangeEnabledPolicyType2)) {
                    z = 0;
                }
                return z;
            case 285:
                ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyType = this.showcaseChangeExternalSharingPolicyValue;
                ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyType2 = eventType.showcaseChangeExternalSharingPolicyValue;
                if (showcaseChangeExternalSharingPolicyType != showcaseChangeExternalSharingPolicyType2 && !showcaseChangeExternalSharingPolicyType.equals(showcaseChangeExternalSharingPolicyType2)) {
                    z = 0;
                }
                return z;
            case 286:
                SmartSyncChangePolicyType smartSyncChangePolicyType = this.smartSyncChangePolicyValue;
                SmartSyncChangePolicyType smartSyncChangePolicyType2 = eventType.smartSyncChangePolicyValue;
                if (smartSyncChangePolicyType != smartSyncChangePolicyType2 && !smartSyncChangePolicyType.equals(smartSyncChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 287:
                SmartSyncNotOptOutType smartSyncNotOptOutType = this.smartSyncNotOptOutValue;
                SmartSyncNotOptOutType smartSyncNotOptOutType2 = eventType.smartSyncNotOptOutValue;
                if (smartSyncNotOptOutType != smartSyncNotOptOutType2 && !smartSyncNotOptOutType.equals(smartSyncNotOptOutType2)) {
                    z = 0;
                }
                return z;
            case 288:
                SmartSyncOptOutType smartSyncOptOutType = this.smartSyncOptOutValue;
                SmartSyncOptOutType smartSyncOptOutType2 = eventType.smartSyncOptOutValue;
                if (smartSyncOptOutType != smartSyncOptOutType2 && !smartSyncOptOutType.equals(smartSyncOptOutType2)) {
                    z = 0;
                }
                return z;
            case 289:
                SsoChangePolicyType ssoChangePolicyType = this.ssoChangePolicyValue;
                SsoChangePolicyType ssoChangePolicyType2 = eventType.ssoChangePolicyValue;
                if (ssoChangePolicyType != ssoChangePolicyType2 && !ssoChangePolicyType.equals(ssoChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 290:
                TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedType = this.teamSelectiveSyncPolicyChangedValue;
                TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedType2 = eventType.teamSelectiveSyncPolicyChangedValue;
                if (teamSelectiveSyncPolicyChangedType != teamSelectiveSyncPolicyChangedType2 && !teamSelectiveSyncPolicyChangedType.equals(teamSelectiveSyncPolicyChangedType2)) {
                    z = 0;
                }
                return z;
            case 291:
                TfaChangePolicyType tfaChangePolicyType = this.tfaChangePolicyValue;
                TfaChangePolicyType tfaChangePolicyType2 = eventType.tfaChangePolicyValue;
                if (tfaChangePolicyType != tfaChangePolicyType2 && !tfaChangePolicyType.equals(tfaChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 292:
                TwoAccountChangePolicyType twoAccountChangePolicyType = this.twoAccountChangePolicyValue;
                TwoAccountChangePolicyType twoAccountChangePolicyType2 = eventType.twoAccountChangePolicyValue;
                if (twoAccountChangePolicyType != twoAccountChangePolicyType2 && !twoAccountChangePolicyType.equals(twoAccountChangePolicyType2)) {
                    z = 0;
                }
                return z;
            case 293:
                ViewerInfoPolicyChangedType viewerInfoPolicyChangedType = this.viewerInfoPolicyChangedValue;
                ViewerInfoPolicyChangedType viewerInfoPolicyChangedType2 = eventType.viewerInfoPolicyChangedValue;
                if (viewerInfoPolicyChangedType != viewerInfoPolicyChangedType2 && !viewerInfoPolicyChangedType.equals(viewerInfoPolicyChangedType2)) {
                    z = 0;
                }
                return z;
            case 294:
                WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyType = this.webSessionsChangeFixedLengthPolicyValue;
                WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyType2 = eventType.webSessionsChangeFixedLengthPolicyValue;
                if (webSessionsChangeFixedLengthPolicyType != webSessionsChangeFixedLengthPolicyType2 && !webSessionsChangeFixedLengthPolicyType.equals(webSessionsChangeFixedLengthPolicyType2)) {
                    z = 0;
                }
                return z;
            case 295:
                WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyType = this.webSessionsChangeIdleLengthPolicyValue;
                WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyType2 = eventType.webSessionsChangeIdleLengthPolicyValue;
                if (webSessionsChangeIdleLengthPolicyType != webSessionsChangeIdleLengthPolicyType2 && !webSessionsChangeIdleLengthPolicyType.equals(webSessionsChangeIdleLengthPolicyType2)) {
                    z = 0;
                }
                return z;
            case 296:
                TeamMergeFromType teamMergeFromType = this.teamMergeFromValue;
                TeamMergeFromType teamMergeFromType2 = eventType.teamMergeFromValue;
                if (teamMergeFromType != teamMergeFromType2 && !teamMergeFromType.equals(teamMergeFromType2)) {
                    z = 0;
                }
                return z;
            case 297:
                TeamMergeToType teamMergeToType = this.teamMergeToValue;
                TeamMergeToType teamMergeToType2 = eventType.teamMergeToValue;
                if (teamMergeToType != teamMergeToType2 && !teamMergeToType.equals(teamMergeToType2)) {
                    z = 0;
                }
                return z;
            case 298:
                TeamProfileAddLogoType teamProfileAddLogoType = this.teamProfileAddLogoValue;
                TeamProfileAddLogoType teamProfileAddLogoType2 = eventType.teamProfileAddLogoValue;
                if (teamProfileAddLogoType != teamProfileAddLogoType2 && !teamProfileAddLogoType.equals(teamProfileAddLogoType2)) {
                    z = 0;
                }
                return z;
            case 299:
                TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageType = this.teamProfileChangeDefaultLanguageValue;
                TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageType2 = eventType.teamProfileChangeDefaultLanguageValue;
                if (teamProfileChangeDefaultLanguageType != teamProfileChangeDefaultLanguageType2 && !teamProfileChangeDefaultLanguageType.equals(teamProfileChangeDefaultLanguageType2)) {
                    z = 0;
                }
                return z;
            case 300:
                TeamProfileChangeLogoType teamProfileChangeLogoType = this.teamProfileChangeLogoValue;
                TeamProfileChangeLogoType teamProfileChangeLogoType2 = eventType.teamProfileChangeLogoValue;
                if (teamProfileChangeLogoType != teamProfileChangeLogoType2 && !teamProfileChangeLogoType.equals(teamProfileChangeLogoType2)) {
                    z = 0;
                }
                return z;
            case 301:
                TeamProfileChangeNameType teamProfileChangeNameType = this.teamProfileChangeNameValue;
                TeamProfileChangeNameType teamProfileChangeNameType2 = eventType.teamProfileChangeNameValue;
                if (teamProfileChangeNameType != teamProfileChangeNameType2 && !teamProfileChangeNameType.equals(teamProfileChangeNameType2)) {
                    z = 0;
                }
                return z;
            case 302:
                TeamProfileRemoveLogoType teamProfileRemoveLogoType = this.teamProfileRemoveLogoValue;
                TeamProfileRemoveLogoType teamProfileRemoveLogoType2 = eventType.teamProfileRemoveLogoValue;
                if (teamProfileRemoveLogoType != teamProfileRemoveLogoType2 && !teamProfileRemoveLogoType.equals(teamProfileRemoveLogoType2)) {
                    z = 0;
                }
                return z;
            case 303:
                TfaAddBackupPhoneType tfaAddBackupPhoneType = this.tfaAddBackupPhoneValue;
                TfaAddBackupPhoneType tfaAddBackupPhoneType2 = eventType.tfaAddBackupPhoneValue;
                if (tfaAddBackupPhoneType != tfaAddBackupPhoneType2 && !tfaAddBackupPhoneType.equals(tfaAddBackupPhoneType2)) {
                    z = 0;
                }
                return z;
            case 304:
                TfaAddSecurityKeyType tfaAddSecurityKeyType = this.tfaAddSecurityKeyValue;
                TfaAddSecurityKeyType tfaAddSecurityKeyType2 = eventType.tfaAddSecurityKeyValue;
                if (tfaAddSecurityKeyType != tfaAddSecurityKeyType2 && !tfaAddSecurityKeyType.equals(tfaAddSecurityKeyType2)) {
                    z = 0;
                }
                return z;
            case 305:
                TfaChangeBackupPhoneType tfaChangeBackupPhoneType = this.tfaChangeBackupPhoneValue;
                TfaChangeBackupPhoneType tfaChangeBackupPhoneType2 = eventType.tfaChangeBackupPhoneValue;
                if (tfaChangeBackupPhoneType != tfaChangeBackupPhoneType2 && !tfaChangeBackupPhoneType.equals(tfaChangeBackupPhoneType2)) {
                    z = 0;
                }
                return z;
            case XmppError.XmppError_JidMalformed /*306*/:
                TfaChangeStatusType tfaChangeStatusType = this.tfaChangeStatusValue;
                TfaChangeStatusType tfaChangeStatusType2 = eventType.tfaChangeStatusValue;
                if (tfaChangeStatusType != tfaChangeStatusType2 && !tfaChangeStatusType.equals(tfaChangeStatusType2)) {
                    z = 0;
                }
                return z;
            case 307:
                TfaRemoveBackupPhoneType tfaRemoveBackupPhoneType = this.tfaRemoveBackupPhoneValue;
                TfaRemoveBackupPhoneType tfaRemoveBackupPhoneType2 = eventType.tfaRemoveBackupPhoneValue;
                if (tfaRemoveBackupPhoneType != tfaRemoveBackupPhoneType2 && !tfaRemoveBackupPhoneType.equals(tfaRemoveBackupPhoneType2)) {
                    z = 0;
                }
                return z;
            case 308:
                TfaRemoveSecurityKeyType tfaRemoveSecurityKeyType = this.tfaRemoveSecurityKeyValue;
                TfaRemoveSecurityKeyType tfaRemoveSecurityKeyType2 = eventType.tfaRemoveSecurityKeyValue;
                if (tfaRemoveSecurityKeyType != tfaRemoveSecurityKeyType2 && !tfaRemoveSecurityKeyType.equals(tfaRemoveSecurityKeyType2)) {
                    z = 0;
                }
                return z;
            case XmppError.XmppError_RecipientUnavailable /*309*/:
                TfaResetType tfaResetType = this.tfaResetValue;
                TfaResetType tfaResetType2 = eventType.tfaResetValue;
                if (tfaResetType != tfaResetType2 && !tfaResetType.equals(tfaResetType2)) {
                    z = 0;
                }
                return z;
            case XmppError.XmppError_Redirect /*310*/:
                return true;
            default:
                return false;
        }
    }

    public String toString() {
        return Serializer.INSTANCE.serialize(this, false);
    }

    public String toStringMultiline() {
        return Serializer.INSTANCE.serialize(this, true);
    }
}
